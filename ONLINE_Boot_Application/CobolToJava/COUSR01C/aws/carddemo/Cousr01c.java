package aws.carddemo;

import com.tmax.openframe.online.service.api.ProgramControl;
import aws.carddemo.dto.Cosgn00cInputDto;
import aws.carddemo.mapper.Cousr01cMapperInterface.*;
import aws.carddemo.dto.Coadm01cInputDto;
import com.tmax.openframe.online.service.api.TaskInvoker;
import com.tmax.openframe.online.service.dto.taskdto.TaskDto;
import com.tmax.openframe.online.service.dto.taskdto.Data;
import com.tmax.openframe.online.service.api.Task;
import aws.carddemo.dto.Cousr01cOutputDto;
import aws.carddemo.dto.Cousr01cInputDto;
import com.tmax.openframe.online.service.exception.ConditionException;
import aws.carddemo.dto.AwsM2CarddemoUsrsecVsamKsdsDto;
import com.tmax.openframe.online.service.api.ReadPointManager;
import com.tmax.openframe.online.service.api.RecordKeyAccessor;
import static aws.carddemo.variable.group.Cousr01cCarddemoCommarea.Cousr01cCdemoGeneralInfo.*;
import static aws.carddemo.variable.group.Cousr01cWsVariables.*;
import aws.carddemo.variable.Cousr01cVariableContainer;
import aws.carddemo.variable.group.*;
import com.tmax.openframe.DataConverter;
import com.tmax.openframe.runtime.cobol.CobStringUtils;
import com.tmax.openframe.runtime.cobol.IntrinsicFunction;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.flow.ControlManager;
import java.math.*;
import java.util.*;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:48 UTC</p>
 * <hr>
 * <p>Java class for defining logics of COBOL program</p>
 * <ul>
 * <li>The name of COBOL program: COUSR01C.cbl</li>
 * <li>Variable container class: {@link Cousr01cVariableContainer}</li>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Transactional
public class Cousr01c {
    private final ReadPointManager readPointManager;
    private final RecordKeyAccessor recordKeyAccessor;
    private final Task task;
    private final TaskInvoker taskInvoker;
    private final ProgramControl programControl;
    /** 
     * <p>Class that manages an execution flow of the program</p>
     */
    private final ControlManager controlManager;
    Consumer<OpenFrameContext> mainPara = this::mainPara;
    Consumer<OpenFrameContext> processEnterKey = this::processEnterKey;
    Consumer<OpenFrameContext> returnToPrevScreen = this::returnToPrevScreen;
    Consumer<OpenFrameContext> sendUsraddScreen = this::sendUsraddScreen;
    Consumer<OpenFrameContext> receiveUsraddScreen = this::receiveUsraddScreen;
    Consumer<OpenFrameContext> populateHeaderInfo = this::populateHeaderInfo;
    Consumer<OpenFrameContext> writeUserSecFile = this::writeUserSecFile;
    Consumer<OpenFrameContext> clearCurrentScreen = this::clearCurrentScreen;
    Consumer<OpenFrameContext> initializeAllFields = this::initializeAllFields;
    /** 
     * <p>execution flow of COBOL program that defined in the procedure division</p>
     */
    ArrayList<Consumer> methodList = new ArrayList<>();
    {
        methodList.add(mainPara);
        methodList.add(processEnterKey);
        methodList.add(returnToPrevScreen);
        methodList.add(sendUsraddScreen);
        methodList.add(receiveUsraddScreen);
        methodList.add(populateHeaderInfo);
        methodList.add(writeUserSecFile);
        methodList.add(clearCurrentScreen);
        methodList.add(initializeAllFields);
    }

    /** 
     * <p>method for executing a program logic that defined in the procedure division</p>
     * @param generalContext context that is necessary for executing program
     * @return return value of program
     */
    public int run(Map<String, Object> generalContext) {
        OpenFrameContext context = new OpenFrameContext(generalContext,
                methodList);
        if (context.getProgramVariableContainer("Cousr01c") == null) {
            Cousr01cVariableContainer container = new Cousr01cVariableContainer();
            context.setProgramVariableContainer("Cousr01c", container);
        }
        controlManager.run(context);
        return context.getReturnValue();
    }

    // ******************************************************************
    // * Program     : COUSR01C.CBL                                      
    // * Application : CardDemo                                          
    // * Type        : CICS COBOL Program                                
    // * Function    : Add a new Regular/Admin user to USRSEC file       
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // *      OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.             
    // *----------------------------------------------------------------*
    // *                      PROCEDURE DIVISION                         
    // *----------------------------------------------------------------*

    void mainPara(OpenFrameContext context) {
        Cousr01cVariableContainer container = (Cousr01cVariableContainer) context
                .getProgramVariableContainer("Cousr01c");
        // [T-Up#INFO][COUSR01C.cbl, LINE #73] SET statement
        container.getWsVariables().setWsErrFlg(ERR_FLG_OFF);
        // [T-Up#INFO][COUSR01C.cbl, LINE #75] MOVE statement
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
        container.setErrmsgo(StringUtils.repeat(' ', 78));
        // [T-Up#INFO][COUSR01C.cbl, LINE #78] IF statement
        if (task.hasCommarea() == 0) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #79] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoToProgram("COSGN00C");
            // [T-Up#INFO][COUSR01C.cbl, LINE #80] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromTranid(
                            container.getWsVariables().getWsTranid());
            // [T-Up#INFO][COUSR01C.cbl, LINE #81] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromProgram(
                            container.getWsVariables().getWsPgmname());
            // *        MOVE WS-USER-ID   TO CDEMO-USER-ID                       
            // *        MOVE SEC-USR-TYPE TO CDEMO-USER-TYPE                     
            // [T-Up#INFO][COUSR01C.cbl, LINE #84] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoPgmContext(0);
            // [T-Up#INFO][COUSR01C.cbl, LINE #85] EXEC_CICS statement
            /*
                               EXEC CICS                                                
                               XCTL PROGRAM('COSGN00C')                                 
                               COMMAREA(CARDDEMO-COMMAREA)                              
                               END-EXEC
             */
            Cosgn00cInputDto cosgn00cInputDto = new Cosgn00cInputDto();
            cosgn00cInputDto
                    .setDfhcommarea(Cousr01cCarddemoCommareaToCosgn00cDfhcommarea.INSTANCE
                            .toTarget(container.getCarddemoCommarea()));
            programControl.forward("CC00", cosgn00cInputDto);
            context.setReturnFlag(true);
            // [T-Up#INFO][COUSR01C.cbl, LINE #89] PERFORM statement
            controlManager.run(context, returnToPrevScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COUSR01C.cbl, LINE #91] MOVE statement
            container.getCarddemoCommarea().set(
                    StringUtils.overlay(container.getCarddemoCommarea().get(),
                            container.getDfhcommarea().get().substring(0, 160),
                            0, 160));
            // [T-Up#INFO][COUSR01C.cbl, LINE #92] IF statement
            if (!(container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .getCdemoPgmContext() == CDEMO_PGM_REENTER)) {
                // [T-Up#INFO][COUSR01C.cbl, LINE #93] SET statement
                container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .setCdemoPgmContext(CDEMO_PGM_REENTER);
                // [T-Up#INFO][COUSR01C.cbl, LINE #94] MOVE statement
                container.setCousr1ao(Cousr01cCousr1ai
                        .createDefaultValueInstance().get());
                // [T-Up#INFO][COUSR01C.cbl, LINE #95] MOVE statement
                container.getCousr1ai().setFnamel(-1);
                // [T-Up#INFO][COUSR01C.cbl, LINE #96] PERFORM statement
                controlManager.run(context, sendUsraddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            } else {
                // [T-Up#INFO][COUSR01C.cbl, LINE #98] PERFORM statement
                controlManager.run(context, receiveUsraddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][COUSR01C.cbl, LINE #99] EVALUATE statement
                if (CobStringUtils.compare(task.getPressedKey(), container
                        .getDfhaid().getDfhenter()) == 0) {
                    // [T-Up#INFO][COUSR01C.cbl, LINE #101] PERFORM statement
                    controlManager.run(context, processEnterKey);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf3()) == 0) {
                    // [T-Up#INFO][COUSR01C.cbl, LINE #103] MOVE statement
                    container.getCarddemoCommarea().getCdemoGeneralInfo()
                            .setCdemoToProgram("COADM01C");
                    // [T-Up#INFO][COUSR01C.cbl, LINE #104] MOVE statement
                    container
                            .getCarddemoCommarea()
                            .getCdemoGeneralInfo()
                            .setCdemoFromTranid(
                                    container.getWsVariables().getWsTranid());
                    // [T-Up#INFO][COUSR01C.cbl, LINE #105] MOVE statement
                    container
                            .getCarddemoCommarea()
                            .getCdemoGeneralInfo()
                            .setCdemoFromProgram(
                                    container.getWsVariables().getWsPgmname());
                    // *                    MOVE WS-USER-ID   TO CDEMO-USER-ID           
                    // *                    MOVE SEC-USR-TYPE TO CDEMO-USER-TYPE         
                    // [T-Up#INFO][COUSR01C.cbl, LINE #108] MOVE statement
                    container.getCarddemoCommarea().getCdemoGeneralInfo()
                            .setCdemoPgmContext(0);
                    // [T-Up#INFO][COUSR01C.cbl, LINE #109] EXEC_CICS statement
                    /*
                                                   EXEC CICS                                    
                                                   XCTL PROGRAM('COADM01C')                     
                                                   COMMAREA(CARDDEMO-COMMAREA)                  
                                                   END-EXEC
                     */
                    Coadm01cInputDto coadm01cInputDto = new Coadm01cInputDto();
                    coadm01cInputDto
                            .setDfhcommarea(Cousr01cCarddemoCommareaToCoadm01cDfhcommarea.INSTANCE
                                    .toTarget(container.getCarddemoCommarea()));
                    programControl.forward("CA00", coadm01cInputDto);
                    context.setReturnFlag(true);
                    // [T-Up#INFO][COUSR01C.cbl, LINE #113] PERFORM statement
                    controlManager.run(context, returnToPrevScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf4()) == 0) {
                    // [T-Up#INFO][COUSR01C.cbl, LINE #115] PERFORM statement
                    controlManager.run(context, clearCurrentScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else {
                    // [T-Up#INFO][COUSR01C.cbl, LINE #117] MOVE statement
                    container.getWsVariables().setWsErrFlg("Y");
                    // [T-Up#INFO][COUSR01C.cbl, LINE #118] MOVE statement
                    container.getCousr1ai().setFnamel(-1);
                    // [T-Up#INFO][COUSR01C.cbl, LINE #119] MOVE statement
                    container.getWsVariables().setWsMessage(
                            container.getCcdaCommonMessages()
                                    .getCcdaMsgInvalidKey());
                    // [T-Up#INFO][COUSR01C.cbl, LINE #120] PERFORM statement
                    controlManager.run(context, sendUsraddScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
            }
        }
        // [T-Up#INFO][COUSR01C.cbl, LINE #125] EXEC_CICS statement
        /*
                       EXEC CICS RETURN                                             
                                 TRANSID (WS-TRANID)                                
                                 COMMAREA (CARDDEMO-COMMAREA)                       
                       END-EXEC
         */
        TaskDto taskDto = TaskDto
                .builder()
                .destination("CU01")
                .data(Data
                        .session(Cousr01cCarddemoCommareaToCousr01cDfhcommarea.INSTANCE
                                .toTarget(container.getCarddemoCommarea())))
                .build();
        taskInvoker.setNextTask(taskDto);
        context.setReturnFlag(true);
    }

    // *----------------------------------------------------------------*
    // *                      PROCESS-ENTER-KEY                          
    // *----------------------------------------------------------------*

    void processEnterKey(OpenFrameContext context) {
        Cousr01cVariableContainer container = (Cousr01cVariableContainer) context
                .getProgramVariableContainer("Cousr01c");
        // [T-Up#INFO][COUSR01C.cbl, LINE #135] EVALUATE statement
        if (CobStringUtils.compare(container.getCousr1ai().getFnamei(),
                StringUtils.repeat(' ', 20)) == 0
                || CobStringUtils.compare(container.getCousr1ai().getFnamei(),
                        StringUtils.repeat((char) 0x00, 20)) == 0) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #137] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR01C.cbl, LINE #138] MOVE statement
            container.getWsVariables().setWsMessage(
                    "First Name can NOT be empty...");
            // [T-Up#INFO][COUSR01C.cbl, LINE #140] MOVE statement
            container.getCousr1ai().setFnamel(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #141] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCousr1ai().getLnamei(),
                StringUtils.repeat(' ', 20)) == 0
                || CobStringUtils.compare(container.getCousr1ai().getLnamei(),
                        StringUtils.repeat((char) 0x00, 20)) == 0) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #143] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR01C.cbl, LINE #144] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Last Name can NOT be empty...");
            // [T-Up#INFO][COUSR01C.cbl, LINE #146] MOVE statement
            container.getCousr1ai().setLnamel(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #147] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCousr1ai().getUseridi(),
                StringUtils.repeat(' ', 8)) == 0
                || CobStringUtils.compare(container.getCousr1ai().getUseridi(),
                        StringUtils.repeat((char) 0x00, 8)) == 0) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #149] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR01C.cbl, LINE #150] MOVE statement
            container.getWsVariables().setWsMessage(
                    "User ID can NOT be empty...");
            // [T-Up#INFO][COUSR01C.cbl, LINE #152] MOVE statement
            container.getCousr1ai().setUseridl(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #153] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCousr1ai().getPasswdi(),
                StringUtils.repeat(' ', 8)) == 0
                || CobStringUtils.compare(container.getCousr1ai().getPasswdi(),
                        StringUtils.repeat((char) 0x00, 8)) == 0) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #155] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR01C.cbl, LINE #156] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Password can NOT be empty...");
            // [T-Up#INFO][COUSR01C.cbl, LINE #158] MOVE statement
            container.getCousr1ai().setPasswdl(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #159] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(
                container.getCousr1ai().getUsrtypei(), " ") == 0
                || CobStringUtils.compare(
                        container.getCousr1ai().getUsrtypei(),
                        StringUtils.repeat((char) 0x00, 1)) == 0) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #161] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR01C.cbl, LINE #162] MOVE statement
            container.getWsVariables().setWsMessage(
                    "User Type can NOT be empty...");
            // [T-Up#INFO][COUSR01C.cbl, LINE #164] MOVE statement
            container.getCousr1ai().setUsrtypel(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #165] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COUSR01C.cbl, LINE #167] MOVE statement
            container.getCousr1ai().setFnamel(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #168] CONTINUE statement
        }
        // [T-Up#INFO][COUSR01C.cbl, LINE #171] IF statement
        if (!(CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0)) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #172] MOVE statement
            container.getSecUserData().setSecUsrId(
                    container.getCousr1ai().getUseridi());
            // [T-Up#INFO][COUSR01C.cbl, LINE #173] MOVE statement
            container.getSecUserData().setSecUsrFname(
                    container.getCousr1ai().getFnamei());
            // [T-Up#INFO][COUSR01C.cbl, LINE #174] MOVE statement
            container.getSecUserData().setSecUsrLname(
                    container.getCousr1ai().getLnamei());
            // [T-Up#INFO][COUSR01C.cbl, LINE #175] MOVE statement
            container.getSecUserData().setSecUsrPwd(
                    container.getCousr1ai().getPasswdi());
            // [T-Up#INFO][COUSR01C.cbl, LINE #176] MOVE statement
            container.getSecUserData().setSecUsrType(
                    container.getCousr1ai().getUsrtypei());
            // [T-Up#INFO][COUSR01C.cbl, LINE #177] PERFORM statement
            controlManager.run(context, writeUserSecFile);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      RETURN-TO-PREV-SCREEN                      
    // *----------------------------------------------------------------*

    void returnToPrevScreen(OpenFrameContext context) {
    }

    // *     IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES                  
    // *         MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM                     
    // *     END-IF                                                      
    // *     MOVE WS-TRANID    TO CDEMO-FROM-TRANID                      
    // *     MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM                     
    // *    MOVE WS-USER-ID   TO CDEMO-USER-ID                           
    // *    MOVE SEC-USR-TYPE TO CDEMO-USER-TYPE                         
    // *     MOVE ZEROS        TO CDEMO-PGM-CONTEXT                      
    // *     EXEC CICS                                                   
    // *         XCTL PROGRAM(CDEMO-TO-PROGRAM)                          
    // *         COMMAREA(CARDDEMO-COMMAREA)                             
    // *     END-EXEC.                                                   
    // *----------------------------------------------------------------*
    // *                      SEND-USRADD-SCREEN                         
    // *----------------------------------------------------------------*

    void sendUsraddScreen(OpenFrameContext context) {
        Cousr01cVariableContainer container = (Cousr01cVariableContainer) context
                .getProgramVariableContainer("Cousr01c");
        // [T-Up#INFO][COUSR01C.cbl, LINE #204] PERFORM statement
        controlManager.run(context, populateHeaderInfo);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COUSR01C.cbl, LINE #206] MOVE statement
        container.setErrmsgo(container.getWsVariables().getWsMessage());
        // [T-Up#INFO][COUSR01C.cbl, LINE #208] EXEC_CICS statement
        /*
                       EXEC CICS SEND                                               
                                 MAP('COUSR1A')                                     
                                 MAPSET('COUSR01')                                  
                                 FROM(COUSR1AO)                                     
                                 ERASE                                              
                                 CURSOR                                             
                       END-EXEC
         */
        ((Cousr01cOutputDto) task.getOutputDto())
                .setPageName("COUSR01_COUSR1A");
        ((Cousr01cOutputDto) task.getOutputDto()).setCousr1ao(container
                .getCousr1ao());
    }

    // *----------------------------------------------------------------*
    // *                      RECEIVE-USRADD-SCREEN                      
    // *----------------------------------------------------------------*

    void receiveUsraddScreen(OpenFrameContext context) {
        Cousr01cVariableContainer container = (Cousr01cVariableContainer) context
                .getProgramVariableContainer("Cousr01c");
        // [T-Up#INFO][COUSR01C.cbl, LINE #221] EXEC_CICS statement
        /*
                       EXEC CICS RECEIVE                                            
                                 MAP('COUSR1A')                                     
                                 MAPSET('COUSR01')                                  
                                 INTO(COUSR1AI)                                     
                                 RESP(WS-RESP-CD)                                   
                                 RESP2(WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            container.setCousr1ai(((Cousr01cInputDto) task.getInputDto())
                    .getCousr1ai());
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
    }

    // *----------------------------------------------------------------*
    // *                      POPULATE-HEADER-INFO                       
    // *----------------------------------------------------------------*

    void populateHeaderInfo(OpenFrameContext context) {
        Cousr01cVariableContainer container = (Cousr01cVariableContainer) context
                .getProgramVariableContainer("Cousr01c");
        // [T-Up#INFO][COUSR01C.cbl, LINE #234] MOVE statement
        container.getWsDateTime().getWsCurdateData()
                .set(IntrinsicFunction.functionCurrentDate());
        // [T-Up#INFO][COUSR01C.cbl, LINE #236] MOVE statement
        container.setTitle01o(container.getCcdaScreenTitle().getCcdaTitle01());
        // [T-Up#INFO][COUSR01C.cbl, LINE #237] MOVE statement
        container.setTitle02o(container.getCcdaScreenTitle().getCcdaTitle02());
        // [T-Up#INFO][COUSR01C.cbl, LINE #238] MOVE statement
        container.setTrnnameo(container.getWsVariables().getWsTranid());
        // [T-Up#INFO][COUSR01C.cbl, LINE #239] MOVE statement
        container.setPgmnameo(container.getWsVariables().getWsPgmname());
        // [T-Up#INFO][COUSR01C.cbl, LINE #241] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateMonth());
        // [T-Up#INFO][COUSR01C.cbl, LINE #242] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateDd(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateDay());
        // [T-Up#INFO][COUSR01C.cbl, LINE #243] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateYy(
                        Integer.parseInt(DataConverter
                                .convZonedLongToString(
                                        container.getWsDateTime()
                                                .getWsCurdateData()
                                                .getWsCurdate()
                                                .getWsCurdateYear(), 4)
                                .substring(2, 4).trim()));
        // [T-Up#INFO][COUSR01C.cbl, LINE #245] MOVE statement
        container.setCurdateo(container.getWsDateTime().getWsCurdateMmDdYy()
                .get());
        // [T-Up#INFO][COUSR01C.cbl, LINE #247] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeHh(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeHours());
        // [T-Up#INFO][COUSR01C.cbl, LINE #248] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeMinute());
        // [T-Up#INFO][COUSR01C.cbl, LINE #249] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeSs(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeSecond());
        // [T-Up#INFO][COUSR01C.cbl, LINE #251] MOVE statement
        container.setCurtimeo(container.getWsDateTime().getWsCurtimeHhMmSs()
                .get());
    }

    // *----------------------------------------------------------------*
    // *                      WRITE-USER-SEC-FILE                        
    // *----------------------------------------------------------------*

    void writeUserSecFile(OpenFrameContext context) {
        StringBuilder tempStringBuilder1;
        StringBuilder tempStringBuilder2;
        Cousr01cVariableContainer container = (Cousr01cVariableContainer) context
                .getProgramVariableContainer("Cousr01c");
        // [T-Up#INFO][COUSR01C.cbl, LINE #258] EXEC_CICS statement
        /*
                       EXEC CICS WRITE                                              
                            DATASET   (WS-USRSEC-FILE)                              
                            FROM      (SEC-USER-DATA)                               
                            LENGTH    (LENGTH OF SEC-USER-DATA)                     
                            RIDFLD    (SEC-USR-ID)                                  
                            KEYLENGTH (LENGTH OF SEC-USR-ID)                        
                            RESP      (WS-RESP-CD)                                  
                            RESP2     (WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            AwsM2CarddemoUsrsecVsamKsdsDto awsM2CarddemoUsrsecVsamKsdsDto = Cousr01cSecUserDataToAwsM2CarddemoUsrsecVsamKsdsDto.INSTANCE
                    .toTarget(container.getSecUserData());
            awsM2CarddemoUsrsecVsamKsdsDto.setSecUsrId(container
                    .getSecUserData().getSecUsrId());
            recordKeyAccessor.writeWithReturningId(
                    "awsM2CarddemoUsrsecVsamKsdsDao",
                    awsM2CarddemoUsrsecVsamKsdsDto);
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COUSR01C.cbl, LINE #268] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #270] PERFORM statement
            controlManager.run(context, initializeAllFields);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COUSR01C.cbl, LINE #271] MOVE statement
            container.getWsVariables()
                    .setWsMessage(StringUtils.repeat(' ', 80));
            // [T-Up#INFO][COUSR01C.cbl, LINE #272] MOVE statement
            container.setErrmsgc(container.getDfhbmsca().getDfhgreen());
            // [T-Up#INFO][COUSR01C.cbl, LINE #273] STRING statement
            tempStringBuilder1 = new StringBuilder();
            tempStringBuilder2 = new StringBuilder(container.getWsVariables()
                    .getWsMessage());
            tempStringBuilder1
                    .append("User ")
                    .append(container.getSecUserData().getSecUsrId()
                            .split(Pattern.quote(" "))[0])
                    .append(" has been added ...");
            if (tempStringBuilder1.length() <= 80) {
                tempStringBuilder2.replace(0, tempStringBuilder1.length(),
                        tempStringBuilder1.toString());
                container.getWsVariables().setWsMessage(
                        tempStringBuilder2.toString());
            }
            // [T-Up#INFO][COUSR01C.cbl, LINE #277] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if ((container.getWsVariables().getWsRespCd() == 15)
                || (container.getWsVariables().getWsRespCd() == 14)) {
            // [T-Up#INFO][COUSR01C.cbl, LINE #280] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR01C.cbl, LINE #281] MOVE statement
            container.getWsVariables().setWsMessage("User ID already exist...");
            // [T-Up#INFO][COUSR01C.cbl, LINE #283] MOVE statement
            container.getCousr1ai().setUseridl(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #284] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // *            DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD        
            // [T-Up#INFO][COUSR01C.cbl, LINE #287] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR01C.cbl, LINE #288] MOVE statement
            container.getWsVariables().setWsMessage("Unable to Add User...");
            // [T-Up#INFO][COUSR01C.cbl, LINE #290] MOVE statement
            container.getCousr1ai().setFnamel(-1);
            // [T-Up#INFO][COUSR01C.cbl, LINE #291] PERFORM statement
            controlManager.run(context, sendUsraddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      CLEAR-CURRENT-SCREEN                       
    // *----------------------------------------------------------------*

    void clearCurrentScreen(OpenFrameContext context) {
        // [T-Up#INFO][COUSR01C.cbl, LINE #299] PERFORM statement
        controlManager.run(context, initializeAllFields);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COUSR01C.cbl, LINE #300] PERFORM statement
        controlManager.run(context, sendUsraddScreen);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    // *----------------------------------------------------------------*
    // *                      INITIALIZE-ALL-FIELDS                      
    // *----------------------------------------------------------------*

    void initializeAllFields(OpenFrameContext context) {
        Cousr01cVariableContainer container = (Cousr01cVariableContainer) context
                .getProgramVariableContainer("Cousr01c");
        // [T-Up#INFO][COUSR01C.cbl, LINE #307] MOVE statement
        container.getCousr1ai().setFnamel(-1);
        // [T-Up#INFO][COUSR01C.cbl, LINE #308] MOVE statement
        container.getCousr1ai().setUseridi(StringUtils.repeat(' ', 8));
        container.getCousr1ai().setFnamei(StringUtils.repeat(' ', 20));
        container.getCousr1ai().setLnamei(StringUtils.repeat(' ', 20));
        container.getCousr1ai().setPasswdi(StringUtils.repeat(' ', 8));
        container.getCousr1ai().setUsrtypei(" ");
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
    }

    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT 
    // *                                                                 
}
