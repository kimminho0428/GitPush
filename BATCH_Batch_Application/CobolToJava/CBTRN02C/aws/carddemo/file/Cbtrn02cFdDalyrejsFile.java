package aws.carddemo.file;

import aws.carddemo.dao.*;
import aws.carddemo.dto.*;
import aws.carddemo.mapper.*;
import aws.carddemo.variable.group.Cbtrn02cFdRejsRecord;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.file.FileStatus;
import com.tmax.openframe.runtime.file.RecordCommitter;
import java.math.*;
import java.util.*;
import lombok.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:56 UTC</p>
 * <hr>
 * <p>Class for processing file I/O operations</p>
 * <ul>
 * <li>target dataset: AwsM2CarddemoDalyrejs</li>
 * <li>file operation class: {@link Cbtrn02cFileOpDalyrejsFile}</li>
 * <li>DAO class: {@link AwsM2CarddemoDalyrejsDao}</li>
 * <li>DTO class: {@link AwsM2CarddemoDalyrejsDto}</li>
 * </ul>
 */
@Repository
public class Cbtrn02cFdDalyrejsFile extends Cbtrn02cFileOpDalyrejsFile {
    @Autowired
    private AwsM2CarddemoDalyrejsDao dao;
    @Autowired
    private RecordCommitter<AwsM2CarddemoDalyrejsDto> committer;

    public void open(OpenFrameContext context) {
        setCurrentSeqId(context, 0L);
        setIterator(context, dao.readAllAsc().iterator());
        setFileStatus(context, FileStatus.NORMAL);
        context.initFileWriteBuffer("Cbtrn02c", "DalyrejsFile");
        committer.setThreshold(5000);
    }

    public Cbtrn02cFdRejsRecord readNextRecord(OpenFrameContext context) {
        Iterator<AwsM2CarddemoDalyrejsDto> iterator = getIterator(context);
        if (iterator.hasNext()) {
            setNextSeqId(context);
            AwsM2CarddemoDalyrejsDto nextRecord = iterator.next();
            if (nextRecord == null) {
                setFileStatus(context, FileStatus.AT_END_CONDITION_SEQ_READ);
                return null;
            }
            setFileStatus(context, FileStatus.NORMAL);
            return Cbtrn02cMapperInterface.Cbtrn02cFdRejsRecordToAwsM2CarddemoDalyrejsDto.INSTANCE
                    .toSource(nextRecord);
        } else {
            setFileStatus(context, FileStatus.AT_END_CONDITION_SEQ_READ);
            return null;
        }
    }

    public void write(OpenFrameContext context, Cbtrn02cFdRejsRecord data) {
        List<AwsM2CarddemoDalyrejsDto> writeBuffer = getWriteBuffer(context);
        writeBuffer
                .add(Cbtrn02cMapperInterface.Cbtrn02cFdRejsRecordToAwsM2CarddemoDalyrejsDto.INSTANCE
                        .toTarget(data));
        if (writeBuffer.size() >= committer.getThreshold()) {
            committer.commit(dao::writeDto, writeBuffer);
            writeBuffer.clear();
        }
        setFileStatus(context, FileStatus.NORMAL);
    }

    public void close(OpenFrameContext context) {
        commit(context);
        setCurrentSeqId(context, null);
        setIterator(context, null);
        setFileStatus(context, FileStatus.NORMAL);
    }

    public void commit(OpenFrameContext context) {
        List<AwsM2CarddemoDalyrejsDto> writeBuffer = getWriteBuffer(context);
        if (writeBuffer != null && writeBuffer.size() > 0) {
            committer.commit(dao::writeDto, writeBuffer);
            writeBuffer.clear();
        }
    }

    private void setIterator(OpenFrameContext context,
            Iterator<AwsM2CarddemoDalyrejsDto> iterator) {
        context.setFileIterator("Cbtrn02c", "DalyrejsFile", iterator);
    }

    private Iterator<AwsM2CarddemoDalyrejsDto> getIterator(
            OpenFrameContext context) {
        return context.getFileIterator("Cbtrn02c", "DalyrejsFile");
    }

    private List<AwsM2CarddemoDalyrejsDto> getWriteBuffer(
            OpenFrameContext context) {
        return context.getFileWriteBuffer("Cbtrn02c", "DalyrejsFile");
    }
}
