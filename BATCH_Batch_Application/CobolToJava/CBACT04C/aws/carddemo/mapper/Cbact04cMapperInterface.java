package aws.carddemo.mapper;

import com.tmax.openframe.DataConverter;
import org.apache.commons.lang3.StringUtils;
import org.mapstruct.*;
import org.mapstruct.factory.*;
import aws.carddemo.variable.group.Cbact04cFdXreffileRec;
import aws.carddemo.dto.AwsM2CarddemoCardxrefVsamKsdsDto;
import aws.carddemo.variable.group.Cbact04cFdTranCatBalRecord;
import aws.carddemo.dto.AwsM2CarddemoTcatbalfVsamKsdsDto;
import aws.carddemo.variable.group.Cbact04cFdDiscgrpRec;
import aws.carddemo.dto.AwsM2CarddemoDiscgrpVsamKsdsDto;
import aws.carddemo.variable.group.Cbact04cFdAcctfileRec;
import aws.carddemo.dto.AwsM2CarddemoAcctdataVsamKsdsDto;
import aws.carddemo.variable.group.Cbact04cFdTranfileRec;
import aws.carddemo.dto.AwsM2CarddemoSystranDto;
import lombok.*;
import java.math.*;
import java.util.*;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:55 UTC</p>
 * <hr>
 * <p>Mapper class for converting data between different classes</p>
 */
public interface Cbact04cMapperInterface {
    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdXreffileRec}</li>
     * <li>target class: {@link AwsM2CarddemoCardxrefVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdXreffileRecToAwsM2CarddemoCardxrefVsamKsdsDto {
        Cbact04cFdXreffileRecToAwsM2CarddemoCardxrefVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdXreffileRecToAwsM2CarddemoCardxrefVsamKsdsDto.class);

        @Mapping(source = "fdXrefCardNum", target = "xrefCardNum")
        @Mapping(source = "fdXrefCustNum", target = "xrefCustId")
        @Mapping(source = "fdXrefAcctId", target = "xrefAcctId")
        @Mapping(source = "fdXrefFiller", target = "filler")
        AwsM2CarddemoCardxrefVsamKsdsDto toTarget(Cbact04cFdXreffileRec source);

        @Mapping(source = "xrefCardNum", target = "fdXrefCardNum")
        @Mapping(source = "xrefCustId", target = "fdXrefCustNum")
        @Mapping(source = "xrefAcctId", target = "fdXrefAcctId")
        @Mapping(source = "filler", target = "fdXrefFiller")
        Cbact04cFdXreffileRec toSource(AwsM2CarddemoCardxrefVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdTranCatBalRecord}</li>
     * <li>target class: {@link AwsM2CarddemoTcatbalfVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdTranCatBalRecordToAwsM2CarddemoTcatbalfVsamKsdsDto {
        Cbact04cFdTranCatBalRecordToAwsM2CarddemoTcatbalfVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdTranCatBalRecordToAwsM2CarddemoTcatbalfVsamKsdsDto.class);

        @Mapping(source = "fdTranCatKey.fdTrancatAcctId", target = "fdTrancatAcctId")
        @Mapping(source = "fdTranCatKey.fdTrancatTypeCd", target = "fdTrancatTypeCd")
        @Mapping(source = "fdTranCatKey.fdTrancatCd", target = "fdTrancatCd")
        @Mapping(source = "fdFdTranCatData", target = "fdFdTranCatData")
        AwsM2CarddemoTcatbalfVsamKsdsDto toTarget(
                Cbact04cFdTranCatBalRecord source);

        @Mapping(source = "fdTrancatAcctId", target = "fdTranCatKey.fdTrancatAcctId")
        @Mapping(source = "fdTrancatTypeCd", target = "fdTranCatKey.fdTrancatTypeCd")
        @Mapping(source = "fdTrancatCd", target = "fdTranCatKey.fdTrancatCd")
        @Mapping(source = "fdFdTranCatData", target = "fdFdTranCatData")
        Cbact04cFdTranCatBalRecord toSource(
                AwsM2CarddemoTcatbalfVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdDiscgrpRec}</li>
     * <li>target class: {@link AwsM2CarddemoDiscgrpVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdDiscgrpRecKeyToAwsM2CarddemoDiscgrpVsamKsdsDto {
        Cbact04cFdDiscgrpRecKeyToAwsM2CarddemoDiscgrpVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdDiscgrpRecKeyToAwsM2CarddemoDiscgrpVsamKsdsDto.class);

        @Mapping(source = "fdDiscgrpKey.fdDisAcctGroupId", target = "fdDisAcctGroupId")
        @Mapping(source = "fdDiscgrpKey.fdDisTranTypeCd", target = "fdDisTranTypeCd")
        @Mapping(source = "fdDiscgrpKey.fdDisTranCatCd", target = "fdDisTranCatCd")
        AwsM2CarddemoDiscgrpVsamKsdsDto toTarget(Cbact04cFdDiscgrpRec source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdXreffileRec}</li>
     * <li>target class: {@link AwsM2CarddemoCardxrefVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdXreffileRecKeyToAwsM2CarddemoCardxrefVsamKsdsDto {
        Cbact04cFdXreffileRecKeyToAwsM2CarddemoCardxrefVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdXreffileRecKeyToAwsM2CarddemoCardxrefVsamKsdsDto.class);

        @Mapping(source = "fdXrefCardNum", target = "xrefCardNum")
        AwsM2CarddemoCardxrefVsamKsdsDto toTarget(Cbact04cFdXreffileRec source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdDiscgrpRec}</li>
     * <li>target class: {@link AwsM2CarddemoDiscgrpVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdDiscgrpRecToAwsM2CarddemoDiscgrpVsamKsdsDto {
        Cbact04cFdDiscgrpRecToAwsM2CarddemoDiscgrpVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdDiscgrpRecToAwsM2CarddemoDiscgrpVsamKsdsDto.class);

        @Mapping(source = "fdDiscgrpKey.fdDisAcctGroupId", target = "fdDisAcctGroupId")
        @Mapping(source = "fdDiscgrpKey.fdDisTranTypeCd", target = "fdDisTranTypeCd")
        @Mapping(source = "fdDiscgrpKey.fdDisTranCatCd", target = "fdDisTranCatCd")
        @Mapping(source = "fdDiscgrpData", target = "fdDiscgrpData")
        AwsM2CarddemoDiscgrpVsamKsdsDto toTarget(Cbact04cFdDiscgrpRec source);

        @Mapping(source = "fdDisAcctGroupId", target = "fdDiscgrpKey.fdDisAcctGroupId")
        @Mapping(source = "fdDisTranTypeCd", target = "fdDiscgrpKey.fdDisTranTypeCd")
        @Mapping(source = "fdDisTranCatCd", target = "fdDiscgrpKey.fdDisTranCatCd")
        @Mapping(source = "fdDiscgrpData", target = "fdDiscgrpData")
        Cbact04cFdDiscgrpRec toSource(AwsM2CarddemoDiscgrpVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdXreffileRec}</li>
     * <li>target class: {@link AwsM2CarddemoCardxrefVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdXreffileRecAix10KeyToAwsM2CarddemoCardxrefVsamKsdsDto {
        Cbact04cFdXreffileRecAix10KeyToAwsM2CarddemoCardxrefVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdXreffileRecAix10KeyToAwsM2CarddemoCardxrefVsamKsdsDto.class);

        @Mapping(source = "fdXrefAcctId", target = "xrefAcctId")
        AwsM2CarddemoCardxrefVsamKsdsDto toTarget(Cbact04cFdXreffileRec source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdAcctfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoAcctdataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto {
        Cbact04cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto.class);

        @Mapping(source = "fdAcctId", target = "acctId")
        AwsM2CarddemoAcctdataVsamKsdsDto toTarget(Cbact04cFdAcctfileRec source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdAcctfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoAcctdataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto {
        Cbact04cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto.class);

        @Mapping(source = "fdAcctId", target = "acctId")
        @Mapping(source = "fdAcctActiveStatus", target = "acctActiveStatus")
        @Mapping(source = "fdAcctCurrBal", target = "acctCurrBal")
        @Mapping(source = "fdAcctCreditLimit", target = "acctCreditLimit")
        @Mapping(source = "fdAcctCashCreditLimit", target = "acctCashCreditLimit")
        @Mapping(source = "fdAcctOpenDate", target = "acctOpenDate")
        @Mapping(source = "fdAcctExpiraionDate", target = "acctExpiraionDate")
        @Mapping(source = "fdAcctReissueDate", target = "acctReissueDate")
        @Mapping(source = "fdAcctCurrCycCredit", target = "acctCurrCycCredit")
        @Mapping(source = "fdAcctCurrCycDebit", target = "acctCurrCycDebit")
        @Mapping(source = "fdAcctAddrZip", target = "acctAddrZip")
        @Mapping(source = "fdAcctGroupId", target = "acctGroupId")
        @Mapping(source = "OFFILLER1", target = "filler")
        AwsM2CarddemoAcctdataVsamKsdsDto toTarget(Cbact04cFdAcctfileRec source);

        @Mapping(source = "acctId", target = "fdAcctId")
        @Mapping(source = "acctActiveStatus", target = "fdAcctActiveStatus")
        @Mapping(source = "acctCurrBal", target = "fdAcctCurrBal")
        @Mapping(source = "acctCreditLimit", target = "fdAcctCreditLimit")
        @Mapping(source = "acctCashCreditLimit", target = "fdAcctCashCreditLimit")
        @Mapping(source = "acctOpenDate", target = "fdAcctOpenDate")
        @Mapping(source = "acctExpiraionDate", target = "fdAcctExpiraionDate")
        @Mapping(source = "acctReissueDate", target = "fdAcctReissueDate")
        @Mapping(source = "acctCurrCycCredit", target = "fdAcctCurrCycCredit")
        @Mapping(source = "acctCurrCycDebit", target = "fdAcctCurrCycDebit")
        @Mapping(source = "acctAddrZip", target = "fdAcctAddrZip")
        @Mapping(source = "acctGroupId", target = "fdAcctGroupId")
        @Mapping(source = "filler", target = "OFFILLER1")
        Cbact04cFdAcctfileRec toSource(AwsM2CarddemoAcctdataVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdTranfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoSystranDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdTranfileRecToAwsM2CarddemoSystranDto {
        Cbact04cFdTranfileRecToAwsM2CarddemoSystranDto INSTANCE = Mappers
                .getMapper(Cbact04cFdTranfileRecToAwsM2CarddemoSystranDto.class);

        @Mapping(source = "fdTransId", target = "fdTransId")
        @Mapping(source = "fdAcctData", target = "fdAcctData")
        AwsM2CarddemoSystranDto toTarget(Cbact04cFdTranfileRec source);

        @Mapping(source = "fdTransId", target = "fdTransId")
        @Mapping(source = "fdAcctData", target = "fdAcctData")
        Cbact04cFdTranfileRec toSource(AwsM2CarddemoSystranDto source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbact04cFdTranCatBalRecord}</li>
     * <li>target class: {@link AwsM2CarddemoTcatbalfVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact04cFdTranCatBalRecordKeyToAwsM2CarddemoTcatbalfVsamKsdsDto {
        Cbact04cFdTranCatBalRecordKeyToAwsM2CarddemoTcatbalfVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact04cFdTranCatBalRecordKeyToAwsM2CarddemoTcatbalfVsamKsdsDto.class);

        @Mapping(source = "fdTranCatKey.fdTrancatAcctId", target = "fdTrancatAcctId")
        @Mapping(source = "fdTranCatKey.fdTrancatTypeCd", target = "fdTrancatTypeCd")
        @Mapping(source = "fdTranCatKey.fdTrancatCd", target = "fdTrancatCd")
        AwsM2CarddemoTcatbalfVsamKsdsDto toTarget(
                Cbact04cFdTranCatBalRecord source);
    }
}
