package aws.carddemo.file;

import aws.carddemo.dao.*;
import aws.carddemo.dto.*;
import aws.carddemo.mapper.*;
import aws.carddemo.variable.group.Cbact04cFdAcctfileRec;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.file.FileStatus;
import com.tmax.openframe.runtime.file.KeyOperationType;
import com.tmax.openframe.runtime.file.RecordCommitter;
import java.math.*;
import java.util.*;
import lombok.*;
import org.apache.ibatis.executor.BatchResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:55 UTC</p>
 * <hr>
 * <p>Class for processing file I/O operations</p>
 * <ul>
 * <li>target dataset: AwsM2CarddemoAcctdataVsamKsds</li>
 * <li>file operation class: {@link Cbact04cFileOpAccountFile}</li>
 * <li>DAO class: {@link AwsM2CarddemoAcctdataVsamKsdsDao}</li>
 * <li>DTO class: {@link AwsM2CarddemoAcctdataVsamKsdsDto}</li>
 * </ul>
 */
@Repository
public class Cbact04cFdAccountFile extends Cbact04cFileOpAccountFile {
    @Autowired
    private AwsM2CarddemoAcctdataVsamKsdsDao dao;
    @Autowired
    private RecordCommitter<AwsM2CarddemoAcctdataVsamKsdsDto> committer;

    public void open(OpenFrameContext context) {
        setIterator(context, dao.readAllAsc().iterator());
        setFileStatus(context, FileStatus.NORMAL);
        context.initFileWriteBuffer("Cbact04c", "AccountFile");
        committer.setThreshold(5000);
    }

    public void start(OpenFrameContext context, Long key, KeyOperationType type) {
        Cbact04cFdAcctfileRec startPoint = new Cbact04cFdAcctfileRec();
        startPoint.setFdAcctId(key);
        AwsM2CarddemoAcctdataVsamKsdsDto dto = Cbact04cMapperInterface.Cbact04cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                .toTarget(startPoint);
        switch (type) {
        case EQ:
        case GTEQ: {
            setIterator(context, dao.readGeDto(dto).iterator());
            break;
        }
        case GT: {
            setIterator(context, dao.readGtDto(dto).iterator());
            break;
        }
        default: {
            throw new RuntimeException(
                    "not supported operation for start method");
        }
        }
        if (!getIterator(context).hasNext()) {
            setFileStatus(context, FileStatus.INVALID_KEY_READ);
        } else {
            setFileStatus(context, FileStatus.NORMAL);
        }
    }

    public Cbact04cFdAcctfileRec readNextRecord(OpenFrameContext context) {
        Iterator<AwsM2CarddemoAcctdataVsamKsdsDto> iterator = getIterator(context);
        if (iterator.hasNext()) {
            AwsM2CarddemoAcctdataVsamKsdsDto nextRecord = iterator.next();
            if (nextRecord == null) {
                setFileStatus(context, FileStatus.AT_END_CONDITION_SEQ_READ);
                return null;
            }
            setFileStatus(context, FileStatus.NORMAL);
            return Cbact04cMapperInterface.Cbact04cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                    .toSource(nextRecord);
        } else {
            setFileStatus(context, FileStatus.AT_END_CONDITION_SEQ_READ);
            return null;
        }
    }

    public Cbact04cFdAcctfileRec readKey(OpenFrameContext context, Long key) {
        commit(context);
        Cbact04cFdAcctfileRec readKeyPoint = new Cbact04cFdAcctfileRec();
        readKeyPoint.setFdAcctId(key);
        AwsM2CarddemoAcctdataVsamKsdsDto dto = Cbact04cMapperInterface.Cbact04cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                .toTarget(readKeyPoint);
        Iterator<AwsM2CarddemoAcctdataVsamKsdsDto> iterator = dao
                .readEqDto(dto).iterator();
        setIterator(context, iterator);
        if (iterator.hasNext()) {
            setFileStatus(context, FileStatus.NORMAL);
            return Cbact04cMapperInterface.Cbact04cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                    .toSource(iterator.next());
        } else {
            setFileStatus(context, FileStatus.INVALID_KEY_READ);
            return null;
        }
    }

    public void write(OpenFrameContext context, Cbact04cFdAcctfileRec data) {
        List<AwsM2CarddemoAcctdataVsamKsdsDto> writeBuffer = getWriteBuffer(context);
        writeBuffer
                .add(Cbact04cMapperInterface.Cbact04cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                        .toTarget(data));
        if (writeBuffer.size() >= committer.getThreshold()) {
            committer.commit(dao::writeDto, writeBuffer);
            writeBuffer.clear();
        }
        setFileStatus(context, FileStatus.NORMAL);
    }

    public void rewrite(OpenFrameContext context, Cbact04cFdAcctfileRec data,
            Long key) {
        commit(context);
        data.setFdAcctId(key);
        AwsM2CarddemoAcctdataVsamKsdsDto updateDto = Cbact04cMapperInterface.Cbact04cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                .toTarget(data);
        dao.flush();
        dao.rewriteDto(updateDto);
        List<BatchResult> resultList = dao.flush();
        if (resultList.get(0).getUpdateCounts()[0] > 0) {
            setFileStatus(context, FileStatus.NORMAL);
        } else {
            setFileStatus(context, FileStatus.INVALID_KEY_CREATE);
        }
    }

    public void delete(OpenFrameContext context, Long key) {
        if (getIterator(context) == null) {
            return;
        }
        commit(context);
        Cbact04cFdAcctfileRec deletePoint = new Cbact04cFdAcctfileRec();
        deletePoint.setFdAcctId(key);
        AwsM2CarddemoAcctdataVsamKsdsDto dto = Cbact04cMapperInterface.Cbact04cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                .toTarget(deletePoint);
        dao.flush();
        dao.deleteDto(dto);
        List<BatchResult> resultList = dao.flush();
        if (resultList.get(0).getUpdateCounts()[0] > 0) {
            setFileStatus(context, FileStatus.NORMAL);
        } else {
            setFileStatus(context, FileStatus.INVALID_KEY_READ);
        }
    }

    public void close(OpenFrameContext context) {
        commit(context);
        setIterator(context, null);
        setFileStatus(context, FileStatus.NORMAL);
    }

    public void commit(OpenFrameContext context) {
        List<AwsM2CarddemoAcctdataVsamKsdsDto> writeBuffer = getWriteBuffer(context);
        if (writeBuffer != null && writeBuffer.size() > 0) {
            committer.commit(dao::writeDto, writeBuffer);
            writeBuffer.clear();
        }
    }

    private void setIterator(OpenFrameContext context,
            Iterator<AwsM2CarddemoAcctdataVsamKsdsDto> iterator) {
        context.setFileIterator("Cbact04c", "AccountFile", iterator);
    }

    private Iterator<AwsM2CarddemoAcctdataVsamKsdsDto> getIterator(
            OpenFrameContext context) {
        return context.getFileIterator("Cbact04c", "AccountFile");
    }

    private List<AwsM2CarddemoAcctdataVsamKsdsDto> getWriteBuffer(
            OpenFrameContext context) {
        return context.getFileWriteBuffer("Cbact04c", "AccountFile");
    }
}
