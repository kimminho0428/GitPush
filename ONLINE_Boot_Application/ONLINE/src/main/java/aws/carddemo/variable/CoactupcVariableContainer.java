package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import lombok.experimental.Accessors;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:52 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class CoactupcVariableContainer {
    // [T-Up#INFO][COACTUPC.cbl, LINE #38] WS-MISC-STORAGE (level: 1)
    private @Getter @Setter CoactupcWsMiscStorage wsMiscStorage = new CoactupcWsMiscStorage();
    // ******************************************************************
    // *      Literals and Constants                                     
    // ******************************************************************
    // [T-Up#INFO][COACTUPC.cbl, LINE #533] WS-LITERALS (level: 1)
    private @Getter @Setter CoactupcWsLiterals wsLiterals = new CoactupcWsLiterals();
    // ******************************************************************
    // *Other common working storage Variables                           
    // ******************************************************************
    //       *COPY CVCRD01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCRD01Y.cpy)
    // [T-Up#INFO][CVCRD01Y.cpy, LINE #2] CC-WORK-AREAS (level: 1)
    private @Getter @Setter CoactupcCcWorkAreas ccWorkAreas = new CoactupcCcWorkAreas();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // ******************************************************************
    // *Lookups                                                          
    // ******************************************************************
    // *North America Phone Area codes                                   
    //       *COPY CSLKPCDY.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSLKPCDY.cpy)
    // ******************************************************************
    // *Lookup code repository                                           
    // *       1) North america phone area codes                         
    // *       2) United States - state codes                            
    // *       3) United States - state + first 2 of zip                 
    // *                                                                 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSLKPCDY.cpy, LINE #25] WS-US-PHONE-AREA-CODE-TO-EDIT (level: 1)
    private @Getter String wsUsPhoneAreaCodeToEdit = StringUtils.repeat(' ', 3);
    // ******************************************************************
    // *North America Phone area codes List obtained from North America  
    // *Numbering Plan Administrator *nanpa                              
    // *https://nationalnanpa.com/nanp1/npa_report.csv                   
    // ******************************************************************
    // [T-Up#INFO][CSLKPCDY.cpy, LINE #31] VALID-PHONE-AREA-CODE (level: 88)
    public static final String VALID_PHONE_AREA_CODE_1 = "201";
    public static final String VALID_PHONE_AREA_CODE_2 = "202";
    public static final String VALID_PHONE_AREA_CODE_3 = "203";
    public static final String VALID_PHONE_AREA_CODE_4 = "204";
    public static final String VALID_PHONE_AREA_CODE_5 = "205";
    public static final String VALID_PHONE_AREA_CODE_6 = "206";
    public static final String VALID_PHONE_AREA_CODE_7 = "207";
    public static final String VALID_PHONE_AREA_CODE_8 = "208";
    public static final String VALID_PHONE_AREA_CODE_9 = "209";
    public static final String VALID_PHONE_AREA_CODE_10 = "210";
    public static final String VALID_PHONE_AREA_CODE_11 = "212";
    public static final String VALID_PHONE_AREA_CODE_12 = "213";
    public static final String VALID_PHONE_AREA_CODE_13 = "214";
    public static final String VALID_PHONE_AREA_CODE_14 = "215";
    public static final String VALID_PHONE_AREA_CODE_15 = "216";
    public static final String VALID_PHONE_AREA_CODE_16 = "217";
    public static final String VALID_PHONE_AREA_CODE_17 = "218";
    public static final String VALID_PHONE_AREA_CODE_18 = "219";
    public static final String VALID_PHONE_AREA_CODE_19 = "220";
    public static final String VALID_PHONE_AREA_CODE_20 = "223";
    public static final String VALID_PHONE_AREA_CODE_21 = "224";
    public static final String VALID_PHONE_AREA_CODE_22 = "225";
    public static final String VALID_PHONE_AREA_CODE_23 = "226";
    public static final String VALID_PHONE_AREA_CODE_24 = "228";
    public static final String VALID_PHONE_AREA_CODE_25 = "229";
    public static final String VALID_PHONE_AREA_CODE_26 = "231";
    public static final String VALID_PHONE_AREA_CODE_27 = "234";
    public static final String VALID_PHONE_AREA_CODE_28 = "236";
    public static final String VALID_PHONE_AREA_CODE_29 = "239";
    public static final String VALID_PHONE_AREA_CODE_30 = "240";
    public static final String VALID_PHONE_AREA_CODE_31 = "242";
    public static final String VALID_PHONE_AREA_CODE_32 = "246";
    public static final String VALID_PHONE_AREA_CODE_33 = "248";
    public static final String VALID_PHONE_AREA_CODE_34 = "249";
    public static final String VALID_PHONE_AREA_CODE_35 = "250";
    public static final String VALID_PHONE_AREA_CODE_36 = "251";
    public static final String VALID_PHONE_AREA_CODE_37 = "252";
    public static final String VALID_PHONE_AREA_CODE_38 = "253";
    public static final String VALID_PHONE_AREA_CODE_39 = "254";
    public static final String VALID_PHONE_AREA_CODE_40 = "256";
    public static final String VALID_PHONE_AREA_CODE_41 = "260";
    public static final String VALID_PHONE_AREA_CODE_42 = "262";
    public static final String VALID_PHONE_AREA_CODE_43 = "264";
    public static final String VALID_PHONE_AREA_CODE_44 = "267";
    public static final String VALID_PHONE_AREA_CODE_45 = "268";
    public static final String VALID_PHONE_AREA_CODE_46 = "269";
    public static final String VALID_PHONE_AREA_CODE_47 = "270";
    public static final String VALID_PHONE_AREA_CODE_48 = "272";
    public static final String VALID_PHONE_AREA_CODE_49 = "276";
    public static final String VALID_PHONE_AREA_CODE_50 = "279";
    public static final String VALID_PHONE_AREA_CODE_51 = "281";
    public static final String VALID_PHONE_AREA_CODE_52 = "284";
    public static final String VALID_PHONE_AREA_CODE_53 = "289";
    public static final String VALID_PHONE_AREA_CODE_54 = "301";
    public static final String VALID_PHONE_AREA_CODE_55 = "302";
    public static final String VALID_PHONE_AREA_CODE_56 = "303";
    public static final String VALID_PHONE_AREA_CODE_57 = "304";
    public static final String VALID_PHONE_AREA_CODE_58 = "305";
    public static final String VALID_PHONE_AREA_CODE_59 = "306";
    public static final String VALID_PHONE_AREA_CODE_60 = "307";
    public static final String VALID_PHONE_AREA_CODE_61 = "308";
    public static final String VALID_PHONE_AREA_CODE_62 = "309";
    public static final String VALID_PHONE_AREA_CODE_63 = "310";
    public static final String VALID_PHONE_AREA_CODE_64 = "312";
    public static final String VALID_PHONE_AREA_CODE_65 = "313";
    public static final String VALID_PHONE_AREA_CODE_66 = "314";
    public static final String VALID_PHONE_AREA_CODE_67 = "315";
    public static final String VALID_PHONE_AREA_CODE_68 = "316";
    public static final String VALID_PHONE_AREA_CODE_69 = "317";
    public static final String VALID_PHONE_AREA_CODE_70 = "318";
    public static final String VALID_PHONE_AREA_CODE_71 = "319";
    public static final String VALID_PHONE_AREA_CODE_72 = "320";
    public static final String VALID_PHONE_AREA_CODE_73 = "321";
    public static final String VALID_PHONE_AREA_CODE_74 = "323";
    public static final String VALID_PHONE_AREA_CODE_75 = "325";
    public static final String VALID_PHONE_AREA_CODE_76 = "326";
    public static final String VALID_PHONE_AREA_CODE_77 = "330";
    public static final String VALID_PHONE_AREA_CODE_78 = "331";
    public static final String VALID_PHONE_AREA_CODE_79 = "332";
    public static final String VALID_PHONE_AREA_CODE_80 = "334";
    public static final String VALID_PHONE_AREA_CODE_81 = "336";
    public static final String VALID_PHONE_AREA_CODE_82 = "337";
    public static final String VALID_PHONE_AREA_CODE_83 = "339";
    public static final String VALID_PHONE_AREA_CODE_84 = "340";
    public static final String VALID_PHONE_AREA_CODE_85 = "341";
    public static final String VALID_PHONE_AREA_CODE_86 = "343";
    public static final String VALID_PHONE_AREA_CODE_87 = "345";
    public static final String VALID_PHONE_AREA_CODE_88 = "346";
    public static final String VALID_PHONE_AREA_CODE_89 = "347";
    public static final String VALID_PHONE_AREA_CODE_90 = "351";
    public static final String VALID_PHONE_AREA_CODE_91 = "352";
    public static final String VALID_PHONE_AREA_CODE_92 = "360";
    public static final String VALID_PHONE_AREA_CODE_93 = "361";
    public static final String VALID_PHONE_AREA_CODE_94 = "364";
    public static final String VALID_PHONE_AREA_CODE_95 = "365";
    public static final String VALID_PHONE_AREA_CODE_96 = "367";
    public static final String VALID_PHONE_AREA_CODE_97 = "368";
    public static final String VALID_PHONE_AREA_CODE_98 = "380";
    public static final String VALID_PHONE_AREA_CODE_99 = "385";
    public static final String VALID_PHONE_AREA_CODE_100 = "386";
    public static final String VALID_PHONE_AREA_CODE_101 = "401";
    public static final String VALID_PHONE_AREA_CODE_102 = "402";
    public static final String VALID_PHONE_AREA_CODE_103 = "403";
    public static final String VALID_PHONE_AREA_CODE_104 = "404";
    public static final String VALID_PHONE_AREA_CODE_105 = "405";
    public static final String VALID_PHONE_AREA_CODE_106 = "406";
    public static final String VALID_PHONE_AREA_CODE_107 = "407";
    public static final String VALID_PHONE_AREA_CODE_108 = "408";
    public static final String VALID_PHONE_AREA_CODE_109 = "409";
    public static final String VALID_PHONE_AREA_CODE_110 = "410";
    public static final String VALID_PHONE_AREA_CODE_111 = "412";
    public static final String VALID_PHONE_AREA_CODE_112 = "413";
    public static final String VALID_PHONE_AREA_CODE_113 = "414";
    public static final String VALID_PHONE_AREA_CODE_114 = "415";
    public static final String VALID_PHONE_AREA_CODE_115 = "416";
    public static final String VALID_PHONE_AREA_CODE_116 = "417";
    public static final String VALID_PHONE_AREA_CODE_117 = "418";
    public static final String VALID_PHONE_AREA_CODE_118 = "419";
    public static final String VALID_PHONE_AREA_CODE_119 = "423";
    public static final String VALID_PHONE_AREA_CODE_120 = "424";
    public static final String VALID_PHONE_AREA_CODE_121 = "425";
    public static final String VALID_PHONE_AREA_CODE_122 = "430";
    public static final String VALID_PHONE_AREA_CODE_123 = "431";
    public static final String VALID_PHONE_AREA_CODE_124 = "432";
    public static final String VALID_PHONE_AREA_CODE_125 = "434";
    public static final String VALID_PHONE_AREA_CODE_126 = "435";
    public static final String VALID_PHONE_AREA_CODE_127 = "437";
    public static final String VALID_PHONE_AREA_CODE_128 = "438";
    public static final String VALID_PHONE_AREA_CODE_129 = "440";
    public static final String VALID_PHONE_AREA_CODE_130 = "441";
    public static final String VALID_PHONE_AREA_CODE_131 = "442";
    public static final String VALID_PHONE_AREA_CODE_132 = "443";
    public static final String VALID_PHONE_AREA_CODE_133 = "445";
    public static final String VALID_PHONE_AREA_CODE_134 = "447";
    public static final String VALID_PHONE_AREA_CODE_135 = "448";
    public static final String VALID_PHONE_AREA_CODE_136 = "450";
    public static final String VALID_PHONE_AREA_CODE_137 = "458";
    public static final String VALID_PHONE_AREA_CODE_138 = "463";
    public static final String VALID_PHONE_AREA_CODE_139 = "464";
    public static final String VALID_PHONE_AREA_CODE_140 = "469";
    public static final String VALID_PHONE_AREA_CODE_141 = "470";
    public static final String VALID_PHONE_AREA_CODE_142 = "473";
    public static final String VALID_PHONE_AREA_CODE_143 = "474";
    public static final String VALID_PHONE_AREA_CODE_144 = "475";
    public static final String VALID_PHONE_AREA_CODE_145 = "478";
    public static final String VALID_PHONE_AREA_CODE_146 = "479";
    public static final String VALID_PHONE_AREA_CODE_147 = "480";
    public static final String VALID_PHONE_AREA_CODE_148 = "484";
    public static final String VALID_PHONE_AREA_CODE_149 = "501";
    public static final String VALID_PHONE_AREA_CODE_150 = "502";
    public static final String VALID_PHONE_AREA_CODE_151 = "503";
    public static final String VALID_PHONE_AREA_CODE_152 = "504";
    public static final String VALID_PHONE_AREA_CODE_153 = "505";
    public static final String VALID_PHONE_AREA_CODE_154 = "506";
    public static final String VALID_PHONE_AREA_CODE_155 = "507";
    public static final String VALID_PHONE_AREA_CODE_156 = "508";
    public static final String VALID_PHONE_AREA_CODE_157 = "509";
    public static final String VALID_PHONE_AREA_CODE_158 = "510";
    public static final String VALID_PHONE_AREA_CODE_159 = "512";
    public static final String VALID_PHONE_AREA_CODE_160 = "513";
    public static final String VALID_PHONE_AREA_CODE_161 = "514";
    public static final String VALID_PHONE_AREA_CODE_162 = "515";
    public static final String VALID_PHONE_AREA_CODE_163 = "516";
    public static final String VALID_PHONE_AREA_CODE_164 = "517";
    public static final String VALID_PHONE_AREA_CODE_165 = "518";
    public static final String VALID_PHONE_AREA_CODE_166 = "519";
    public static final String VALID_PHONE_AREA_CODE_167 = "520";
    public static final String VALID_PHONE_AREA_CODE_168 = "530";
    public static final String VALID_PHONE_AREA_CODE_169 = "531";
    public static final String VALID_PHONE_AREA_CODE_170 = "534";
    public static final String VALID_PHONE_AREA_CODE_171 = "539";
    public static final String VALID_PHONE_AREA_CODE_172 = "540";
    public static final String VALID_PHONE_AREA_CODE_173 = "541";
    public static final String VALID_PHONE_AREA_CODE_174 = "548";
    public static final String VALID_PHONE_AREA_CODE_175 = "551";
    public static final String VALID_PHONE_AREA_CODE_176 = "559";
    public static final String VALID_PHONE_AREA_CODE_177 = "561";
    public static final String VALID_PHONE_AREA_CODE_178 = "562";
    public static final String VALID_PHONE_AREA_CODE_179 = "563";
    public static final String VALID_PHONE_AREA_CODE_180 = "564";
    public static final String VALID_PHONE_AREA_CODE_181 = "567";
    public static final String VALID_PHONE_AREA_CODE_182 = "570";
    public static final String VALID_PHONE_AREA_CODE_183 = "571";
    public static final String VALID_PHONE_AREA_CODE_184 = "572";
    public static final String VALID_PHONE_AREA_CODE_185 = "573";
    public static final String VALID_PHONE_AREA_CODE_186 = "574";
    public static final String VALID_PHONE_AREA_CODE_187 = "575";
    public static final String VALID_PHONE_AREA_CODE_188 = "579";
    public static final String VALID_PHONE_AREA_CODE_189 = "580";
    public static final String VALID_PHONE_AREA_CODE_190 = "581";
    public static final String VALID_PHONE_AREA_CODE_191 = "582";
    public static final String VALID_PHONE_AREA_CODE_192 = "585";
    public static final String VALID_PHONE_AREA_CODE_193 = "586";
    public static final String VALID_PHONE_AREA_CODE_194 = "587";
    public static final String VALID_PHONE_AREA_CODE_195 = "601";
    public static final String VALID_PHONE_AREA_CODE_196 = "602";
    public static final String VALID_PHONE_AREA_CODE_197 = "603";
    public static final String VALID_PHONE_AREA_CODE_198 = "604";
    public static final String VALID_PHONE_AREA_CODE_199 = "605";
    public static final String VALID_PHONE_AREA_CODE_200 = "606";
    public static final String VALID_PHONE_AREA_CODE_201 = "607";
    public static final String VALID_PHONE_AREA_CODE_202 = "608";
    public static final String VALID_PHONE_AREA_CODE_203 = "609";
    public static final String VALID_PHONE_AREA_CODE_204 = "610";
    public static final String VALID_PHONE_AREA_CODE_205 = "612";
    public static final String VALID_PHONE_AREA_CODE_206 = "613";
    public static final String VALID_PHONE_AREA_CODE_207 = "614";
    public static final String VALID_PHONE_AREA_CODE_208 = "615";
    public static final String VALID_PHONE_AREA_CODE_209 = "616";
    public static final String VALID_PHONE_AREA_CODE_210 = "617";
    public static final String VALID_PHONE_AREA_CODE_211 = "618";
    public static final String VALID_PHONE_AREA_CODE_212 = "619";
    public static final String VALID_PHONE_AREA_CODE_213 = "620";
    public static final String VALID_PHONE_AREA_CODE_214 = "623";
    public static final String VALID_PHONE_AREA_CODE_215 = "626";
    public static final String VALID_PHONE_AREA_CODE_216 = "628";
    public static final String VALID_PHONE_AREA_CODE_217 = "629";
    public static final String VALID_PHONE_AREA_CODE_218 = "630";
    public static final String VALID_PHONE_AREA_CODE_219 = "631";
    public static final String VALID_PHONE_AREA_CODE_220 = "636";
    public static final String VALID_PHONE_AREA_CODE_221 = "639";
    public static final String VALID_PHONE_AREA_CODE_222 = "640";
    public static final String VALID_PHONE_AREA_CODE_223 = "641";
    public static final String VALID_PHONE_AREA_CODE_224 = "646";
    public static final String VALID_PHONE_AREA_CODE_225 = "647";
    public static final String VALID_PHONE_AREA_CODE_226 = "649";
    public static final String VALID_PHONE_AREA_CODE_227 = "650";
    public static final String VALID_PHONE_AREA_CODE_228 = "651";
    public static final String VALID_PHONE_AREA_CODE_229 = "656";
    public static final String VALID_PHONE_AREA_CODE_230 = "657";
    public static final String VALID_PHONE_AREA_CODE_231 = "658";
    public static final String VALID_PHONE_AREA_CODE_232 = "659";
    public static final String VALID_PHONE_AREA_CODE_233 = "660";
    public static final String VALID_PHONE_AREA_CODE_234 = "661";
    public static final String VALID_PHONE_AREA_CODE_235 = "662";
    public static final String VALID_PHONE_AREA_CODE_236 = "664";
    public static final String VALID_PHONE_AREA_CODE_237 = "667";
    public static final String VALID_PHONE_AREA_CODE_238 = "669";
    public static final String VALID_PHONE_AREA_CODE_239 = "670";
    public static final String VALID_PHONE_AREA_CODE_240 = "671";
    public static final String VALID_PHONE_AREA_CODE_241 = "672";
    public static final String VALID_PHONE_AREA_CODE_242 = "678";
    public static final String VALID_PHONE_AREA_CODE_243 = "680";
    public static final String VALID_PHONE_AREA_CODE_244 = "681";
    public static final String VALID_PHONE_AREA_CODE_245 = "682";
    public static final String VALID_PHONE_AREA_CODE_246 = "683";
    public static final String VALID_PHONE_AREA_CODE_247 = "684";
    public static final String VALID_PHONE_AREA_CODE_248 = "689";
    public static final String VALID_PHONE_AREA_CODE_249 = "701";
    public static final String VALID_PHONE_AREA_CODE_250 = "702";
    public static final String VALID_PHONE_AREA_CODE_251 = "703";
    public static final String VALID_PHONE_AREA_CODE_252 = "704";
    public static final String VALID_PHONE_AREA_CODE_253 = "705";
    public static final String VALID_PHONE_AREA_CODE_254 = "706";
    public static final String VALID_PHONE_AREA_CODE_255 = "707";
    public static final String VALID_PHONE_AREA_CODE_256 = "708";
    public static final String VALID_PHONE_AREA_CODE_257 = "709";
    public static final String VALID_PHONE_AREA_CODE_258 = "712";
    public static final String VALID_PHONE_AREA_CODE_259 = "713";
    public static final String VALID_PHONE_AREA_CODE_260 = "714";
    public static final String VALID_PHONE_AREA_CODE_261 = "715";
    public static final String VALID_PHONE_AREA_CODE_262 = "716";
    public static final String VALID_PHONE_AREA_CODE_263 = "717";
    public static final String VALID_PHONE_AREA_CODE_264 = "718";
    public static final String VALID_PHONE_AREA_CODE_265 = "719";
    public static final String VALID_PHONE_AREA_CODE_266 = "720";
    public static final String VALID_PHONE_AREA_CODE_267 = "721";
    public static final String VALID_PHONE_AREA_CODE_268 = "724";
    public static final String VALID_PHONE_AREA_CODE_269 = "725";
    public static final String VALID_PHONE_AREA_CODE_270 = "726";
    public static final String VALID_PHONE_AREA_CODE_271 = "727";
    public static final String VALID_PHONE_AREA_CODE_272 = "731";
    public static final String VALID_PHONE_AREA_CODE_273 = "732";
    public static final String VALID_PHONE_AREA_CODE_274 = "734";
    public static final String VALID_PHONE_AREA_CODE_275 = "737";
    public static final String VALID_PHONE_AREA_CODE_276 = "740";
    public static final String VALID_PHONE_AREA_CODE_277 = "742";
    public static final String VALID_PHONE_AREA_CODE_278 = "743";
    public static final String VALID_PHONE_AREA_CODE_279 = "747";
    public static final String VALID_PHONE_AREA_CODE_280 = "753";
    public static final String VALID_PHONE_AREA_CODE_281 = "754";
    public static final String VALID_PHONE_AREA_CODE_282 = "757";
    public static final String VALID_PHONE_AREA_CODE_283 = "758";
    public static final String VALID_PHONE_AREA_CODE_284 = "760";
    public static final String VALID_PHONE_AREA_CODE_285 = "762";
    public static final String VALID_PHONE_AREA_CODE_286 = "763";
    public static final String VALID_PHONE_AREA_CODE_287 = "765";
    public static final String VALID_PHONE_AREA_CODE_288 = "767";
    public static final String VALID_PHONE_AREA_CODE_289 = "769";
    public static final String VALID_PHONE_AREA_CODE_290 = "770";
    public static final String VALID_PHONE_AREA_CODE_291 = "771";
    public static final String VALID_PHONE_AREA_CODE_292 = "772";
    public static final String VALID_PHONE_AREA_CODE_293 = "773";
    public static final String VALID_PHONE_AREA_CODE_294 = "774";
    public static final String VALID_PHONE_AREA_CODE_295 = "775";
    public static final String VALID_PHONE_AREA_CODE_296 = "778";
    public static final String VALID_PHONE_AREA_CODE_297 = "779";
    public static final String VALID_PHONE_AREA_CODE_298 = "780";
    public static final String VALID_PHONE_AREA_CODE_299 = "781";
    public static final String VALID_PHONE_AREA_CODE_300 = "782";
    public static final String VALID_PHONE_AREA_CODE_301 = "784";
    public static final String VALID_PHONE_AREA_CODE_302 = "785";
    public static final String VALID_PHONE_AREA_CODE_303 = "786";
    public static final String VALID_PHONE_AREA_CODE_304 = "787";
    public static final String VALID_PHONE_AREA_CODE_305 = "801";
    public static final String VALID_PHONE_AREA_CODE_306 = "802";
    public static final String VALID_PHONE_AREA_CODE_307 = "803";
    public static final String VALID_PHONE_AREA_CODE_308 = "804";
    public static final String VALID_PHONE_AREA_CODE_309 = "805";
    public static final String VALID_PHONE_AREA_CODE_310 = "806";
    public static final String VALID_PHONE_AREA_CODE_311 = "807";
    public static final String VALID_PHONE_AREA_CODE_312 = "808";
    public static final String VALID_PHONE_AREA_CODE_313 = "809";
    public static final String VALID_PHONE_AREA_CODE_314 = "810";
    public static final String VALID_PHONE_AREA_CODE_315 = "812";
    public static final String VALID_PHONE_AREA_CODE_316 = "813";
    public static final String VALID_PHONE_AREA_CODE_317 = "814";
    public static final String VALID_PHONE_AREA_CODE_318 = "815";
    public static final String VALID_PHONE_AREA_CODE_319 = "816";
    public static final String VALID_PHONE_AREA_CODE_320 = "817";
    public static final String VALID_PHONE_AREA_CODE_321 = "818";
    public static final String VALID_PHONE_AREA_CODE_322 = "819";
    public static final String VALID_PHONE_AREA_CODE_323 = "820";
    public static final String VALID_PHONE_AREA_CODE_324 = "825";
    public static final String VALID_PHONE_AREA_CODE_325 = "826";
    public static final String VALID_PHONE_AREA_CODE_326 = "828";
    public static final String VALID_PHONE_AREA_CODE_327 = "829";
    public static final String VALID_PHONE_AREA_CODE_328 = "830";
    public static final String VALID_PHONE_AREA_CODE_329 = "831";
    public static final String VALID_PHONE_AREA_CODE_330 = "832";
    public static final String VALID_PHONE_AREA_CODE_331 = "838";
    public static final String VALID_PHONE_AREA_CODE_332 = "839";
    public static final String VALID_PHONE_AREA_CODE_333 = "840";
    public static final String VALID_PHONE_AREA_CODE_334 = "843";
    public static final String VALID_PHONE_AREA_CODE_335 = "845";
    public static final String VALID_PHONE_AREA_CODE_336 = "847";
    public static final String VALID_PHONE_AREA_CODE_337 = "848";
    public static final String VALID_PHONE_AREA_CODE_338 = "849";
    public static final String VALID_PHONE_AREA_CODE_339 = "850";
    public static final String VALID_PHONE_AREA_CODE_340 = "854";
    public static final String VALID_PHONE_AREA_CODE_341 = "856";
    public static final String VALID_PHONE_AREA_CODE_342 = "857";
    public static final String VALID_PHONE_AREA_CODE_343 = "858";
    public static final String VALID_PHONE_AREA_CODE_344 = "859";
    public static final String VALID_PHONE_AREA_CODE_345 = "860";
    public static final String VALID_PHONE_AREA_CODE_346 = "862";
    public static final String VALID_PHONE_AREA_CODE_347 = "863";
    public static final String VALID_PHONE_AREA_CODE_348 = "864";
    public static final String VALID_PHONE_AREA_CODE_349 = "865";
    public static final String VALID_PHONE_AREA_CODE_350 = "867";
    public static final String VALID_PHONE_AREA_CODE_351 = "868";
    public static final String VALID_PHONE_AREA_CODE_352 = "869";
    public static final String VALID_PHONE_AREA_CODE_353 = "870";
    public static final String VALID_PHONE_AREA_CODE_354 = "872";
    public static final String VALID_PHONE_AREA_CODE_355 = "873";
    public static final String VALID_PHONE_AREA_CODE_356 = "876";
    public static final String VALID_PHONE_AREA_CODE_357 = "878";
    public static final String VALID_PHONE_AREA_CODE_358 = "901";
    public static final String VALID_PHONE_AREA_CODE_359 = "902";
    public static final String VALID_PHONE_AREA_CODE_360 = "903";
    public static final String VALID_PHONE_AREA_CODE_361 = "904";
    public static final String VALID_PHONE_AREA_CODE_362 = "905";
    public static final String VALID_PHONE_AREA_CODE_363 = "906";
    public static final String VALID_PHONE_AREA_CODE_364 = "907";
    public static final String VALID_PHONE_AREA_CODE_365 = "908";
    public static final String VALID_PHONE_AREA_CODE_366 = "909";
    public static final String VALID_PHONE_AREA_CODE_367 = "910";
    public static final String VALID_PHONE_AREA_CODE_368 = "912";
    public static final String VALID_PHONE_AREA_CODE_369 = "913";
    public static final String VALID_PHONE_AREA_CODE_370 = "914";
    public static final String VALID_PHONE_AREA_CODE_371 = "915";
    public static final String VALID_PHONE_AREA_CODE_372 = "916";
    public static final String VALID_PHONE_AREA_CODE_373 = "917";
    public static final String VALID_PHONE_AREA_CODE_374 = "918";
    public static final String VALID_PHONE_AREA_CODE_375 = "919";
    public static final String VALID_PHONE_AREA_CODE_376 = "920";
    public static final String VALID_PHONE_AREA_CODE_377 = "925";
    public static final String VALID_PHONE_AREA_CODE_378 = "928";
    public static final String VALID_PHONE_AREA_CODE_379 = "929";
    public static final String VALID_PHONE_AREA_CODE_380 = "930";
    public static final String VALID_PHONE_AREA_CODE_381 = "931";
    public static final String VALID_PHONE_AREA_CODE_382 = "934";
    public static final String VALID_PHONE_AREA_CODE_383 = "936";
    public static final String VALID_PHONE_AREA_CODE_384 = "937";
    public static final String VALID_PHONE_AREA_CODE_385 = "938";
    public static final String VALID_PHONE_AREA_CODE_386 = "939";
    public static final String VALID_PHONE_AREA_CODE_387 = "940";
    public static final String VALID_PHONE_AREA_CODE_388 = "941";
    public static final String VALID_PHONE_AREA_CODE_389 = "943";
    public static final String VALID_PHONE_AREA_CODE_390 = "945";
    public static final String VALID_PHONE_AREA_CODE_391 = "947";
    public static final String VALID_PHONE_AREA_CODE_392 = "948";
    public static final String VALID_PHONE_AREA_CODE_393 = "949";
    public static final String VALID_PHONE_AREA_CODE_394 = "951";
    public static final String VALID_PHONE_AREA_CODE_395 = "952";
    public static final String VALID_PHONE_AREA_CODE_396 = "954";
    public static final String VALID_PHONE_AREA_CODE_397 = "956";
    public static final String VALID_PHONE_AREA_CODE_398 = "959";
    public static final String VALID_PHONE_AREA_CODE_399 = "970";
    public static final String VALID_PHONE_AREA_CODE_400 = "971";
    public static final String VALID_PHONE_AREA_CODE_401 = "972";
    public static final String VALID_PHONE_AREA_CODE_402 = "973";
    public static final String VALID_PHONE_AREA_CODE_403 = "978";
    public static final String VALID_PHONE_AREA_CODE_404 = "979";
    public static final String VALID_PHONE_AREA_CODE_405 = "980";
    public static final String VALID_PHONE_AREA_CODE_406 = "983";
    public static final String VALID_PHONE_AREA_CODE_407 = "984";
    public static final String VALID_PHONE_AREA_CODE_408 = "985";
    public static final String VALID_PHONE_AREA_CODE_409 = "986";
    public static final String VALID_PHONE_AREA_CODE_410 = "989";
    public static final String VALID_PHONE_AREA_CODE_411 = "200";
    public static final String VALID_PHONE_AREA_CODE_412 = "211";
    public static final String VALID_PHONE_AREA_CODE_413 = "222";
    public static final String VALID_PHONE_AREA_CODE_414 = "233";
    public static final String VALID_PHONE_AREA_CODE_415 = "244";
    public static final String VALID_PHONE_AREA_CODE_416 = "255";
    public static final String VALID_PHONE_AREA_CODE_417 = "266";
    public static final String VALID_PHONE_AREA_CODE_418 = "277";
    public static final String VALID_PHONE_AREA_CODE_419 = "288";
    public static final String VALID_PHONE_AREA_CODE_420 = "299";
    public static final String VALID_PHONE_AREA_CODE_421 = "300";
    public static final String VALID_PHONE_AREA_CODE_422 = "311";
    public static final String VALID_PHONE_AREA_CODE_423 = "322";
    public static final String VALID_PHONE_AREA_CODE_424 = "333";
    public static final String VALID_PHONE_AREA_CODE_425 = "344";
    public static final String VALID_PHONE_AREA_CODE_426 = "355";
    public static final String VALID_PHONE_AREA_CODE_427 = "366";
    public static final String VALID_PHONE_AREA_CODE_428 = "377";
    public static final String VALID_PHONE_AREA_CODE_429 = "388";
    public static final String VALID_PHONE_AREA_CODE_430 = "399";
    public static final String VALID_PHONE_AREA_CODE_431 = "400";
    public static final String VALID_PHONE_AREA_CODE_432 = "411";
    public static final String VALID_PHONE_AREA_CODE_433 = "422";
    public static final String VALID_PHONE_AREA_CODE_434 = "433";
    public static final String VALID_PHONE_AREA_CODE_435 = "444";
    public static final String VALID_PHONE_AREA_CODE_436 = "455";
    public static final String VALID_PHONE_AREA_CODE_437 = "466";
    public static final String VALID_PHONE_AREA_CODE_438 = "477";
    public static final String VALID_PHONE_AREA_CODE_439 = "488";
    public static final String VALID_PHONE_AREA_CODE_440 = "499";
    public static final String VALID_PHONE_AREA_CODE_441 = "500";
    public static final String VALID_PHONE_AREA_CODE_442 = "511";
    public static final String VALID_PHONE_AREA_CODE_443 = "522";
    public static final String VALID_PHONE_AREA_CODE_444 = "533";
    public static final String VALID_PHONE_AREA_CODE_445 = "544";
    public static final String VALID_PHONE_AREA_CODE_446 = "555";
    public static final String VALID_PHONE_AREA_CODE_447 = "566";
    public static final String VALID_PHONE_AREA_CODE_448 = "577";
    public static final String VALID_PHONE_AREA_CODE_449 = "588";
    public static final String VALID_PHONE_AREA_CODE_450 = "599";
    public static final String VALID_PHONE_AREA_CODE_451 = "600";
    public static final String VALID_PHONE_AREA_CODE_452 = "611";
    public static final String VALID_PHONE_AREA_CODE_453 = "622";
    public static final String VALID_PHONE_AREA_CODE_454 = "633";
    public static final String VALID_PHONE_AREA_CODE_455 = "644";
    public static final String VALID_PHONE_AREA_CODE_456 = "655";
    public static final String VALID_PHONE_AREA_CODE_457 = "666";
    public static final String VALID_PHONE_AREA_CODE_458 = "677";
    public static final String VALID_PHONE_AREA_CODE_459 = "688";
    public static final String VALID_PHONE_AREA_CODE_460 = "699";
    public static final String VALID_PHONE_AREA_CODE_461 = "700";
    public static final String VALID_PHONE_AREA_CODE_462 = "711";
    public static final String VALID_PHONE_AREA_CODE_463 = "722";
    public static final String VALID_PHONE_AREA_CODE_464 = "733";
    public static final String VALID_PHONE_AREA_CODE_465 = "744";
    public static final String VALID_PHONE_AREA_CODE_466 = "755";
    public static final String VALID_PHONE_AREA_CODE_467 = "766";
    public static final String VALID_PHONE_AREA_CODE_468 = "777";
    public static final String VALID_PHONE_AREA_CODE_469 = "788";
    public static final String VALID_PHONE_AREA_CODE_470 = "799";
    public static final String VALID_PHONE_AREA_CODE_471 = "800";
    public static final String VALID_PHONE_AREA_CODE_472 = "811";
    public static final String VALID_PHONE_AREA_CODE_473 = "822";
    public static final String VALID_PHONE_AREA_CODE_474 = "833";
    public static final String VALID_PHONE_AREA_CODE_475 = "844";
    public static final String VALID_PHONE_AREA_CODE_476 = "855";
    public static final String VALID_PHONE_AREA_CODE_477 = "866";
    public static final String VALID_PHONE_AREA_CODE_478 = "877";
    public static final String VALID_PHONE_AREA_CODE_479 = "888";
    public static final String VALID_PHONE_AREA_CODE_480 = "899";
    public static final String VALID_PHONE_AREA_CODE_481 = "900";
    public static final String VALID_PHONE_AREA_CODE_482 = "911";
    public static final String VALID_PHONE_AREA_CODE_483 = "922";
    public static final String VALID_PHONE_AREA_CODE_484 = "933";
    public static final String VALID_PHONE_AREA_CODE_485 = "944";
    public static final String VALID_PHONE_AREA_CODE_486 = "955";
    public static final String VALID_PHONE_AREA_CODE_487 = "966";
    public static final String VALID_PHONE_AREA_CODE_488 = "977";
    public static final String VALID_PHONE_AREA_CODE_489 = "988";
    public static final String VALID_PHONE_AREA_CODE_490 = "999";
    // *Easily recognizable codes begin here.                            
    // [T-Up#INFO][CSLKPCDY.cpy, LINE #522] VALID-GENERAL-PURP-CODE (level: 88)
    public static final String VALID_GENERAL_PURP_CODE_1 = "201";
    public static final String VALID_GENERAL_PURP_CODE_2 = "202";
    public static final String VALID_GENERAL_PURP_CODE_3 = "203";
    public static final String VALID_GENERAL_PURP_CODE_4 = "204";
    public static final String VALID_GENERAL_PURP_CODE_5 = "205";
    public static final String VALID_GENERAL_PURP_CODE_6 = "206";
    public static final String VALID_GENERAL_PURP_CODE_7 = "207";
    public static final String VALID_GENERAL_PURP_CODE_8 = "208";
    public static final String VALID_GENERAL_PURP_CODE_9 = "209";
    public static final String VALID_GENERAL_PURP_CODE_10 = "210";
    public static final String VALID_GENERAL_PURP_CODE_11 = "212";
    public static final String VALID_GENERAL_PURP_CODE_12 = "213";
    public static final String VALID_GENERAL_PURP_CODE_13 = "214";
    public static final String VALID_GENERAL_PURP_CODE_14 = "215";
    public static final String VALID_GENERAL_PURP_CODE_15 = "216";
    public static final String VALID_GENERAL_PURP_CODE_16 = "217";
    public static final String VALID_GENERAL_PURP_CODE_17 = "218";
    public static final String VALID_GENERAL_PURP_CODE_18 = "219";
    public static final String VALID_GENERAL_PURP_CODE_19 = "220";
    public static final String VALID_GENERAL_PURP_CODE_20 = "223";
    public static final String VALID_GENERAL_PURP_CODE_21 = "224";
    public static final String VALID_GENERAL_PURP_CODE_22 = "225";
    public static final String VALID_GENERAL_PURP_CODE_23 = "226";
    public static final String VALID_GENERAL_PURP_CODE_24 = "228";
    public static final String VALID_GENERAL_PURP_CODE_25 = "229";
    public static final String VALID_GENERAL_PURP_CODE_26 = "231";
    public static final String VALID_GENERAL_PURP_CODE_27 = "234";
    public static final String VALID_GENERAL_PURP_CODE_28 = "236";
    public static final String VALID_GENERAL_PURP_CODE_29 = "239";
    public static final String VALID_GENERAL_PURP_CODE_30 = "240";
    public static final String VALID_GENERAL_PURP_CODE_31 = "242";
    public static final String VALID_GENERAL_PURP_CODE_32 = "246";
    public static final String VALID_GENERAL_PURP_CODE_33 = "248";
    public static final String VALID_GENERAL_PURP_CODE_34 = "249";
    public static final String VALID_GENERAL_PURP_CODE_35 = "250";
    public static final String VALID_GENERAL_PURP_CODE_36 = "251";
    public static final String VALID_GENERAL_PURP_CODE_37 = "252";
    public static final String VALID_GENERAL_PURP_CODE_38 = "253";
    public static final String VALID_GENERAL_PURP_CODE_39 = "254";
    public static final String VALID_GENERAL_PURP_CODE_40 = "256";
    public static final String VALID_GENERAL_PURP_CODE_41 = "260";
    public static final String VALID_GENERAL_PURP_CODE_42 = "262";
    public static final String VALID_GENERAL_PURP_CODE_43 = "264";
    public static final String VALID_GENERAL_PURP_CODE_44 = "267";
    public static final String VALID_GENERAL_PURP_CODE_45 = "268";
    public static final String VALID_GENERAL_PURP_CODE_46 = "269";
    public static final String VALID_GENERAL_PURP_CODE_47 = "270";
    public static final String VALID_GENERAL_PURP_CODE_48 = "272";
    public static final String VALID_GENERAL_PURP_CODE_49 = "276";
    public static final String VALID_GENERAL_PURP_CODE_50 = "279";
    public static final String VALID_GENERAL_PURP_CODE_51 = "281";
    public static final String VALID_GENERAL_PURP_CODE_52 = "284";
    public static final String VALID_GENERAL_PURP_CODE_53 = "289";
    public static final String VALID_GENERAL_PURP_CODE_54 = "301";
    public static final String VALID_GENERAL_PURP_CODE_55 = "302";
    public static final String VALID_GENERAL_PURP_CODE_56 = "303";
    public static final String VALID_GENERAL_PURP_CODE_57 = "304";
    public static final String VALID_GENERAL_PURP_CODE_58 = "305";
    public static final String VALID_GENERAL_PURP_CODE_59 = "306";
    public static final String VALID_GENERAL_PURP_CODE_60 = "307";
    public static final String VALID_GENERAL_PURP_CODE_61 = "308";
    public static final String VALID_GENERAL_PURP_CODE_62 = "309";
    public static final String VALID_GENERAL_PURP_CODE_63 = "310";
    public static final String VALID_GENERAL_PURP_CODE_64 = "312";
    public static final String VALID_GENERAL_PURP_CODE_65 = "313";
    public static final String VALID_GENERAL_PURP_CODE_66 = "314";
    public static final String VALID_GENERAL_PURP_CODE_67 = "315";
    public static final String VALID_GENERAL_PURP_CODE_68 = "316";
    public static final String VALID_GENERAL_PURP_CODE_69 = "317";
    public static final String VALID_GENERAL_PURP_CODE_70 = "318";
    public static final String VALID_GENERAL_PURP_CODE_71 = "319";
    public static final String VALID_GENERAL_PURP_CODE_72 = "320";
    public static final String VALID_GENERAL_PURP_CODE_73 = "321";
    public static final String VALID_GENERAL_PURP_CODE_74 = "323";
    public static final String VALID_GENERAL_PURP_CODE_75 = "325";
    public static final String VALID_GENERAL_PURP_CODE_76 = "326";
    public static final String VALID_GENERAL_PURP_CODE_77 = "330";
    public static final String VALID_GENERAL_PURP_CODE_78 = "331";
    public static final String VALID_GENERAL_PURP_CODE_79 = "332";
    public static final String VALID_GENERAL_PURP_CODE_80 = "334";
    public static final String VALID_GENERAL_PURP_CODE_81 = "336";
    public static final String VALID_GENERAL_PURP_CODE_82 = "337";
    public static final String VALID_GENERAL_PURP_CODE_83 = "339";
    public static final String VALID_GENERAL_PURP_CODE_84 = "340";
    public static final String VALID_GENERAL_PURP_CODE_85 = "341";
    public static final String VALID_GENERAL_PURP_CODE_86 = "343";
    public static final String VALID_GENERAL_PURP_CODE_87 = "345";
    public static final String VALID_GENERAL_PURP_CODE_88 = "346";
    public static final String VALID_GENERAL_PURP_CODE_89 = "347";
    public static final String VALID_GENERAL_PURP_CODE_90 = "351";
    public static final String VALID_GENERAL_PURP_CODE_91 = "352";
    public static final String VALID_GENERAL_PURP_CODE_92 = "360";
    public static final String VALID_GENERAL_PURP_CODE_93 = "361";
    public static final String VALID_GENERAL_PURP_CODE_94 = "364";
    public static final String VALID_GENERAL_PURP_CODE_95 = "365";
    public static final String VALID_GENERAL_PURP_CODE_96 = "367";
    public static final String VALID_GENERAL_PURP_CODE_97 = "368";
    public static final String VALID_GENERAL_PURP_CODE_98 = "380";
    public static final String VALID_GENERAL_PURP_CODE_99 = "385";
    public static final String VALID_GENERAL_PURP_CODE_100 = "386";
    public static final String VALID_GENERAL_PURP_CODE_101 = "401";
    public static final String VALID_GENERAL_PURP_CODE_102 = "402";
    public static final String VALID_GENERAL_PURP_CODE_103 = "403";
    public static final String VALID_GENERAL_PURP_CODE_104 = "404";
    public static final String VALID_GENERAL_PURP_CODE_105 = "405";
    public static final String VALID_GENERAL_PURP_CODE_106 = "406";
    public static final String VALID_GENERAL_PURP_CODE_107 = "407";
    public static final String VALID_GENERAL_PURP_CODE_108 = "408";
    public static final String VALID_GENERAL_PURP_CODE_109 = "409";
    public static final String VALID_GENERAL_PURP_CODE_110 = "410";
    public static final String VALID_GENERAL_PURP_CODE_111 = "412";
    public static final String VALID_GENERAL_PURP_CODE_112 = "413";
    public static final String VALID_GENERAL_PURP_CODE_113 = "414";
    public static final String VALID_GENERAL_PURP_CODE_114 = "415";
    public static final String VALID_GENERAL_PURP_CODE_115 = "416";
    public static final String VALID_GENERAL_PURP_CODE_116 = "417";
    public static final String VALID_GENERAL_PURP_CODE_117 = "418";
    public static final String VALID_GENERAL_PURP_CODE_118 = "419";
    public static final String VALID_GENERAL_PURP_CODE_119 = "423";
    public static final String VALID_GENERAL_PURP_CODE_120 = "424";
    public static final String VALID_GENERAL_PURP_CODE_121 = "425";
    public static final String VALID_GENERAL_PURP_CODE_122 = "430";
    public static final String VALID_GENERAL_PURP_CODE_123 = "431";
    public static final String VALID_GENERAL_PURP_CODE_124 = "432";
    public static final String VALID_GENERAL_PURP_CODE_125 = "434";
    public static final String VALID_GENERAL_PURP_CODE_126 = "435";
    public static final String VALID_GENERAL_PURP_CODE_127 = "437";
    public static final String VALID_GENERAL_PURP_CODE_128 = "438";
    public static final String VALID_GENERAL_PURP_CODE_129 = "440";
    public static final String VALID_GENERAL_PURP_CODE_130 = "441";
    public static final String VALID_GENERAL_PURP_CODE_131 = "442";
    public static final String VALID_GENERAL_PURP_CODE_132 = "443";
    public static final String VALID_GENERAL_PURP_CODE_133 = "445";
    public static final String VALID_GENERAL_PURP_CODE_134 = "447";
    public static final String VALID_GENERAL_PURP_CODE_135 = "448";
    public static final String VALID_GENERAL_PURP_CODE_136 = "450";
    public static final String VALID_GENERAL_PURP_CODE_137 = "458";
    public static final String VALID_GENERAL_PURP_CODE_138 = "463";
    public static final String VALID_GENERAL_PURP_CODE_139 = "464";
    public static final String VALID_GENERAL_PURP_CODE_140 = "469";
    public static final String VALID_GENERAL_PURP_CODE_141 = "470";
    public static final String VALID_GENERAL_PURP_CODE_142 = "473";
    public static final String VALID_GENERAL_PURP_CODE_143 = "474";
    public static final String VALID_GENERAL_PURP_CODE_144 = "475";
    public static final String VALID_GENERAL_PURP_CODE_145 = "478";
    public static final String VALID_GENERAL_PURP_CODE_146 = "479";
    public static final String VALID_GENERAL_PURP_CODE_147 = "480";
    public static final String VALID_GENERAL_PURP_CODE_148 = "484";
    public static final String VALID_GENERAL_PURP_CODE_149 = "501";
    public static final String VALID_GENERAL_PURP_CODE_150 = "502";
    public static final String VALID_GENERAL_PURP_CODE_151 = "503";
    public static final String VALID_GENERAL_PURP_CODE_152 = "504";
    public static final String VALID_GENERAL_PURP_CODE_153 = "505";
    public static final String VALID_GENERAL_PURP_CODE_154 = "506";
    public static final String VALID_GENERAL_PURP_CODE_155 = "507";
    public static final String VALID_GENERAL_PURP_CODE_156 = "508";
    public static final String VALID_GENERAL_PURP_CODE_157 = "509";
    public static final String VALID_GENERAL_PURP_CODE_158 = "510";
    public static final String VALID_GENERAL_PURP_CODE_159 = "512";
    public static final String VALID_GENERAL_PURP_CODE_160 = "513";
    public static final String VALID_GENERAL_PURP_CODE_161 = "514";
    public static final String VALID_GENERAL_PURP_CODE_162 = "515";
    public static final String VALID_GENERAL_PURP_CODE_163 = "516";
    public static final String VALID_GENERAL_PURP_CODE_164 = "517";
    public static final String VALID_GENERAL_PURP_CODE_165 = "518";
    public static final String VALID_GENERAL_PURP_CODE_166 = "519";
    public static final String VALID_GENERAL_PURP_CODE_167 = "520";
    public static final String VALID_GENERAL_PURP_CODE_168 = "530";
    public static final String VALID_GENERAL_PURP_CODE_169 = "531";
    public static final String VALID_GENERAL_PURP_CODE_170 = "534";
    public static final String VALID_GENERAL_PURP_CODE_171 = "539";
    public static final String VALID_GENERAL_PURP_CODE_172 = "540";
    public static final String VALID_GENERAL_PURP_CODE_173 = "541";
    public static final String VALID_GENERAL_PURP_CODE_174 = "548";
    public static final String VALID_GENERAL_PURP_CODE_175 = "551";
    public static final String VALID_GENERAL_PURP_CODE_176 = "559";
    public static final String VALID_GENERAL_PURP_CODE_177 = "561";
    public static final String VALID_GENERAL_PURP_CODE_178 = "562";
    public static final String VALID_GENERAL_PURP_CODE_179 = "563";
    public static final String VALID_GENERAL_PURP_CODE_180 = "564";
    public static final String VALID_GENERAL_PURP_CODE_181 = "567";
    public static final String VALID_GENERAL_PURP_CODE_182 = "570";
    public static final String VALID_GENERAL_PURP_CODE_183 = "571";
    public static final String VALID_GENERAL_PURP_CODE_184 = "572";
    public static final String VALID_GENERAL_PURP_CODE_185 = "573";
    public static final String VALID_GENERAL_PURP_CODE_186 = "574";
    public static final String VALID_GENERAL_PURP_CODE_187 = "575";
    public static final String VALID_GENERAL_PURP_CODE_188 = "579";
    public static final String VALID_GENERAL_PURP_CODE_189 = "580";
    public static final String VALID_GENERAL_PURP_CODE_190 = "581";
    public static final String VALID_GENERAL_PURP_CODE_191 = "582";
    public static final String VALID_GENERAL_PURP_CODE_192 = "585";
    public static final String VALID_GENERAL_PURP_CODE_193 = "586";
    public static final String VALID_GENERAL_PURP_CODE_194 = "587";
    public static final String VALID_GENERAL_PURP_CODE_195 = "601";
    public static final String VALID_GENERAL_PURP_CODE_196 = "602";
    public static final String VALID_GENERAL_PURP_CODE_197 = "603";
    public static final String VALID_GENERAL_PURP_CODE_198 = "604";
    public static final String VALID_GENERAL_PURP_CODE_199 = "605";
    public static final String VALID_GENERAL_PURP_CODE_200 = "606";
    public static final String VALID_GENERAL_PURP_CODE_201 = "607";
    public static final String VALID_GENERAL_PURP_CODE_202 = "608";
    public static final String VALID_GENERAL_PURP_CODE_203 = "609";
    public static final String VALID_GENERAL_PURP_CODE_204 = "610";
    public static final String VALID_GENERAL_PURP_CODE_205 = "612";
    public static final String VALID_GENERAL_PURP_CODE_206 = "613";
    public static final String VALID_GENERAL_PURP_CODE_207 = "614";
    public static final String VALID_GENERAL_PURP_CODE_208 = "615";
    public static final String VALID_GENERAL_PURP_CODE_209 = "616";
    public static final String VALID_GENERAL_PURP_CODE_210 = "617";
    public static final String VALID_GENERAL_PURP_CODE_211 = "618";
    public static final String VALID_GENERAL_PURP_CODE_212 = "619";
    public static final String VALID_GENERAL_PURP_CODE_213 = "620";
    public static final String VALID_GENERAL_PURP_CODE_214 = "623";
    public static final String VALID_GENERAL_PURP_CODE_215 = "626";
    public static final String VALID_GENERAL_PURP_CODE_216 = "628";
    public static final String VALID_GENERAL_PURP_CODE_217 = "629";
    public static final String VALID_GENERAL_PURP_CODE_218 = "630";
    public static final String VALID_GENERAL_PURP_CODE_219 = "631";
    public static final String VALID_GENERAL_PURP_CODE_220 = "636";
    public static final String VALID_GENERAL_PURP_CODE_221 = "639";
    public static final String VALID_GENERAL_PURP_CODE_222 = "640";
    public static final String VALID_GENERAL_PURP_CODE_223 = "641";
    public static final String VALID_GENERAL_PURP_CODE_224 = "646";
    public static final String VALID_GENERAL_PURP_CODE_225 = "647";
    public static final String VALID_GENERAL_PURP_CODE_226 = "649";
    public static final String VALID_GENERAL_PURP_CODE_227 = "650";
    public static final String VALID_GENERAL_PURP_CODE_228 = "651";
    public static final String VALID_GENERAL_PURP_CODE_229 = "656";
    public static final String VALID_GENERAL_PURP_CODE_230 = "657";
    public static final String VALID_GENERAL_PURP_CODE_231 = "658";
    public static final String VALID_GENERAL_PURP_CODE_232 = "659";
    public static final String VALID_GENERAL_PURP_CODE_233 = "660";
    public static final String VALID_GENERAL_PURP_CODE_234 = "661";
    public static final String VALID_GENERAL_PURP_CODE_235 = "662";
    public static final String VALID_GENERAL_PURP_CODE_236 = "664";
    public static final String VALID_GENERAL_PURP_CODE_237 = "667";
    public static final String VALID_GENERAL_PURP_CODE_238 = "669";
    public static final String VALID_GENERAL_PURP_CODE_239 = "670";
    public static final String VALID_GENERAL_PURP_CODE_240 = "671";
    public static final String VALID_GENERAL_PURP_CODE_241 = "672";
    public static final String VALID_GENERAL_PURP_CODE_242 = "678";
    public static final String VALID_GENERAL_PURP_CODE_243 = "680";
    public static final String VALID_GENERAL_PURP_CODE_244 = "681";
    public static final String VALID_GENERAL_PURP_CODE_245 = "682";
    public static final String VALID_GENERAL_PURP_CODE_246 = "683";
    public static final String VALID_GENERAL_PURP_CODE_247 = "684";
    public static final String VALID_GENERAL_PURP_CODE_248 = "689";
    public static final String VALID_GENERAL_PURP_CODE_249 = "701";
    public static final String VALID_GENERAL_PURP_CODE_250 = "702";
    public static final String VALID_GENERAL_PURP_CODE_251 = "703";
    public static final String VALID_GENERAL_PURP_CODE_252 = "704";
    public static final String VALID_GENERAL_PURP_CODE_253 = "705";
    public static final String VALID_GENERAL_PURP_CODE_254 = "706";
    public static final String VALID_GENERAL_PURP_CODE_255 = "707";
    public static final String VALID_GENERAL_PURP_CODE_256 = "708";
    public static final String VALID_GENERAL_PURP_CODE_257 = "709";
    public static final String VALID_GENERAL_PURP_CODE_258 = "712";
    public static final String VALID_GENERAL_PURP_CODE_259 = "713";
    public static final String VALID_GENERAL_PURP_CODE_260 = "714";
    public static final String VALID_GENERAL_PURP_CODE_261 = "715";
    public static final String VALID_GENERAL_PURP_CODE_262 = "716";
    public static final String VALID_GENERAL_PURP_CODE_263 = "717";
    public static final String VALID_GENERAL_PURP_CODE_264 = "718";
    public static final String VALID_GENERAL_PURP_CODE_265 = "719";
    public static final String VALID_GENERAL_PURP_CODE_266 = "720";
    public static final String VALID_GENERAL_PURP_CODE_267 = "721";
    public static final String VALID_GENERAL_PURP_CODE_268 = "724";
    public static final String VALID_GENERAL_PURP_CODE_269 = "725";
    public static final String VALID_GENERAL_PURP_CODE_270 = "726";
    public static final String VALID_GENERAL_PURP_CODE_271 = "727";
    public static final String VALID_GENERAL_PURP_CODE_272 = "731";
    public static final String VALID_GENERAL_PURP_CODE_273 = "732";
    public static final String VALID_GENERAL_PURP_CODE_274 = "734";
    public static final String VALID_GENERAL_PURP_CODE_275 = "737";
    public static final String VALID_GENERAL_PURP_CODE_276 = "740";
    public static final String VALID_GENERAL_PURP_CODE_277 = "742";
    public static final String VALID_GENERAL_PURP_CODE_278 = "743";
    public static final String VALID_GENERAL_PURP_CODE_279 = "747";
    public static final String VALID_GENERAL_PURP_CODE_280 = "753";
    public static final String VALID_GENERAL_PURP_CODE_281 = "754";
    public static final String VALID_GENERAL_PURP_CODE_282 = "757";
    public static final String VALID_GENERAL_PURP_CODE_283 = "758";
    public static final String VALID_GENERAL_PURP_CODE_284 = "760";
    public static final String VALID_GENERAL_PURP_CODE_285 = "762";
    public static final String VALID_GENERAL_PURP_CODE_286 = "763";
    public static final String VALID_GENERAL_PURP_CODE_287 = "765";
    public static final String VALID_GENERAL_PURP_CODE_288 = "767";
    public static final String VALID_GENERAL_PURP_CODE_289 = "769";
    public static final String VALID_GENERAL_PURP_CODE_290 = "770";
    public static final String VALID_GENERAL_PURP_CODE_291 = "771";
    public static final String VALID_GENERAL_PURP_CODE_292 = "772";
    public static final String VALID_GENERAL_PURP_CODE_293 = "773";
    public static final String VALID_GENERAL_PURP_CODE_294 = "774";
    public static final String VALID_GENERAL_PURP_CODE_295 = "775";
    public static final String VALID_GENERAL_PURP_CODE_296 = "778";
    public static final String VALID_GENERAL_PURP_CODE_297 = "779";
    public static final String VALID_GENERAL_PURP_CODE_298 = "780";
    public static final String VALID_GENERAL_PURP_CODE_299 = "781";
    public static final String VALID_GENERAL_PURP_CODE_300 = "782";
    public static final String VALID_GENERAL_PURP_CODE_301 = "784";
    public static final String VALID_GENERAL_PURP_CODE_302 = "785";
    public static final String VALID_GENERAL_PURP_CODE_303 = "786";
    public static final String VALID_GENERAL_PURP_CODE_304 = "787";
    public static final String VALID_GENERAL_PURP_CODE_305 = "801";
    public static final String VALID_GENERAL_PURP_CODE_306 = "802";
    public static final String VALID_GENERAL_PURP_CODE_307 = "803";
    public static final String VALID_GENERAL_PURP_CODE_308 = "804";
    public static final String VALID_GENERAL_PURP_CODE_309 = "805";
    public static final String VALID_GENERAL_PURP_CODE_310 = "806";
    public static final String VALID_GENERAL_PURP_CODE_311 = "807";
    public static final String VALID_GENERAL_PURP_CODE_312 = "808";
    public static final String VALID_GENERAL_PURP_CODE_313 = "809";
    public static final String VALID_GENERAL_PURP_CODE_314 = "810";
    public static final String VALID_GENERAL_PURP_CODE_315 = "812";
    public static final String VALID_GENERAL_PURP_CODE_316 = "813";
    public static final String VALID_GENERAL_PURP_CODE_317 = "814";
    public static final String VALID_GENERAL_PURP_CODE_318 = "815";
    public static final String VALID_GENERAL_PURP_CODE_319 = "816";
    public static final String VALID_GENERAL_PURP_CODE_320 = "817";
    public static final String VALID_GENERAL_PURP_CODE_321 = "818";
    public static final String VALID_GENERAL_PURP_CODE_322 = "819";
    public static final String VALID_GENERAL_PURP_CODE_323 = "820";
    public static final String VALID_GENERAL_PURP_CODE_324 = "825";
    public static final String VALID_GENERAL_PURP_CODE_325 = "826";
    public static final String VALID_GENERAL_PURP_CODE_326 = "828";
    public static final String VALID_GENERAL_PURP_CODE_327 = "829";
    public static final String VALID_GENERAL_PURP_CODE_328 = "830";
    public static final String VALID_GENERAL_PURP_CODE_329 = "831";
    public static final String VALID_GENERAL_PURP_CODE_330 = "832";
    public static final String VALID_GENERAL_PURP_CODE_331 = "838";
    public static final String VALID_GENERAL_PURP_CODE_332 = "839";
    public static final String VALID_GENERAL_PURP_CODE_333 = "840";
    public static final String VALID_GENERAL_PURP_CODE_334 = "843";
    public static final String VALID_GENERAL_PURP_CODE_335 = "845";
    public static final String VALID_GENERAL_PURP_CODE_336 = "847";
    public static final String VALID_GENERAL_PURP_CODE_337 = "848";
    public static final String VALID_GENERAL_PURP_CODE_338 = "849";
    public static final String VALID_GENERAL_PURP_CODE_339 = "850";
    public static final String VALID_GENERAL_PURP_CODE_340 = "854";
    public static final String VALID_GENERAL_PURP_CODE_341 = "856";
    public static final String VALID_GENERAL_PURP_CODE_342 = "857";
    public static final String VALID_GENERAL_PURP_CODE_343 = "858";
    public static final String VALID_GENERAL_PURP_CODE_344 = "859";
    public static final String VALID_GENERAL_PURP_CODE_345 = "860";
    public static final String VALID_GENERAL_PURP_CODE_346 = "862";
    public static final String VALID_GENERAL_PURP_CODE_347 = "863";
    public static final String VALID_GENERAL_PURP_CODE_348 = "864";
    public static final String VALID_GENERAL_PURP_CODE_349 = "865";
    public static final String VALID_GENERAL_PURP_CODE_350 = "867";
    public static final String VALID_GENERAL_PURP_CODE_351 = "868";
    public static final String VALID_GENERAL_PURP_CODE_352 = "869";
    public static final String VALID_GENERAL_PURP_CODE_353 = "870";
    public static final String VALID_GENERAL_PURP_CODE_354 = "872";
    public static final String VALID_GENERAL_PURP_CODE_355 = "873";
    public static final String VALID_GENERAL_PURP_CODE_356 = "876";
    public static final String VALID_GENERAL_PURP_CODE_357 = "878";
    public static final String VALID_GENERAL_PURP_CODE_358 = "901";
    public static final String VALID_GENERAL_PURP_CODE_359 = "902";
    public static final String VALID_GENERAL_PURP_CODE_360 = "903";
    public static final String VALID_GENERAL_PURP_CODE_361 = "904";
    public static final String VALID_GENERAL_PURP_CODE_362 = "905";
    public static final String VALID_GENERAL_PURP_CODE_363 = "906";
    public static final String VALID_GENERAL_PURP_CODE_364 = "907";
    public static final String VALID_GENERAL_PURP_CODE_365 = "908";
    public static final String VALID_GENERAL_PURP_CODE_366 = "909";
    public static final String VALID_GENERAL_PURP_CODE_367 = "910";
    public static final String VALID_GENERAL_PURP_CODE_368 = "912";
    public static final String VALID_GENERAL_PURP_CODE_369 = "913";
    public static final String VALID_GENERAL_PURP_CODE_370 = "914";
    public static final String VALID_GENERAL_PURP_CODE_371 = "915";
    public static final String VALID_GENERAL_PURP_CODE_372 = "916";
    public static final String VALID_GENERAL_PURP_CODE_373 = "917";
    public static final String VALID_GENERAL_PURP_CODE_374 = "918";
    public static final String VALID_GENERAL_PURP_CODE_375 = "919";
    public static final String VALID_GENERAL_PURP_CODE_376 = "920";
    public static final String VALID_GENERAL_PURP_CODE_377 = "925";
    public static final String VALID_GENERAL_PURP_CODE_378 = "928";
    public static final String VALID_GENERAL_PURP_CODE_379 = "929";
    public static final String VALID_GENERAL_PURP_CODE_380 = "930";
    public static final String VALID_GENERAL_PURP_CODE_381 = "931";
    public static final String VALID_GENERAL_PURP_CODE_382 = "934";
    public static final String VALID_GENERAL_PURP_CODE_383 = "936";
    public static final String VALID_GENERAL_PURP_CODE_384 = "937";
    public static final String VALID_GENERAL_PURP_CODE_385 = "938";
    public static final String VALID_GENERAL_PURP_CODE_386 = "939";
    public static final String VALID_GENERAL_PURP_CODE_387 = "940";
    public static final String VALID_GENERAL_PURP_CODE_388 = "941";
    public static final String VALID_GENERAL_PURP_CODE_389 = "943";
    public static final String VALID_GENERAL_PURP_CODE_390 = "945";
    public static final String VALID_GENERAL_PURP_CODE_391 = "947";
    public static final String VALID_GENERAL_PURP_CODE_392 = "948";
    public static final String VALID_GENERAL_PURP_CODE_393 = "949";
    public static final String VALID_GENERAL_PURP_CODE_394 = "951";
    public static final String VALID_GENERAL_PURP_CODE_395 = "952";
    public static final String VALID_GENERAL_PURP_CODE_396 = "954";
    public static final String VALID_GENERAL_PURP_CODE_397 = "956";
    public static final String VALID_GENERAL_PURP_CODE_398 = "959";
    public static final String VALID_GENERAL_PURP_CODE_399 = "970";
    public static final String VALID_GENERAL_PURP_CODE_400 = "971";
    public static final String VALID_GENERAL_PURP_CODE_401 = "972";
    public static final String VALID_GENERAL_PURP_CODE_402 = "973";
    public static final String VALID_GENERAL_PURP_CODE_403 = "978";
    public static final String VALID_GENERAL_PURP_CODE_404 = "979";
    public static final String VALID_GENERAL_PURP_CODE_405 = "980";
    public static final String VALID_GENERAL_PURP_CODE_406 = "983";
    public static final String VALID_GENERAL_PURP_CODE_407 = "984";
    public static final String VALID_GENERAL_PURP_CODE_408 = "985";
    public static final String VALID_GENERAL_PURP_CODE_409 = "986";
    public static final String VALID_GENERAL_PURP_CODE_410 = "989";
    // [T-Up#INFO][CSLKPCDY.cpy, LINE #932] VALID-EASY-RECOG-AREA-CODE (level: 88)
    public static final String VALID_EASY_RECOG_AREA_CODE_1 = "200";
    public static final String VALID_EASY_RECOG_AREA_CODE_2 = "211";
    public static final String VALID_EASY_RECOG_AREA_CODE_3 = "222";
    public static final String VALID_EASY_RECOG_AREA_CODE_4 = "233";
    public static final String VALID_EASY_RECOG_AREA_CODE_5 = "244";
    public static final String VALID_EASY_RECOG_AREA_CODE_6 = "255";
    public static final String VALID_EASY_RECOG_AREA_CODE_7 = "266";
    public static final String VALID_EASY_RECOG_AREA_CODE_8 = "277";
    public static final String VALID_EASY_RECOG_AREA_CODE_9 = "288";
    public static final String VALID_EASY_RECOG_AREA_CODE_10 = "299";
    public static final String VALID_EASY_RECOG_AREA_CODE_11 = "300";
    public static final String VALID_EASY_RECOG_AREA_CODE_12 = "311";
    public static final String VALID_EASY_RECOG_AREA_CODE_13 = "322";
    public static final String VALID_EASY_RECOG_AREA_CODE_14 = "333";
    public static final String VALID_EASY_RECOG_AREA_CODE_15 = "344";
    public static final String VALID_EASY_RECOG_AREA_CODE_16 = "355";
    public static final String VALID_EASY_RECOG_AREA_CODE_17 = "366";
    public static final String VALID_EASY_RECOG_AREA_CODE_18 = "377";
    public static final String VALID_EASY_RECOG_AREA_CODE_19 = "388";
    public static final String VALID_EASY_RECOG_AREA_CODE_20 = "399";
    public static final String VALID_EASY_RECOG_AREA_CODE_21 = "400";
    public static final String VALID_EASY_RECOG_AREA_CODE_22 = "411";
    public static final String VALID_EASY_RECOG_AREA_CODE_23 = "422";
    public static final String VALID_EASY_RECOG_AREA_CODE_24 = "433";
    public static final String VALID_EASY_RECOG_AREA_CODE_25 = "444";
    public static final String VALID_EASY_RECOG_AREA_CODE_26 = "455";
    public static final String VALID_EASY_RECOG_AREA_CODE_27 = "466";
    public static final String VALID_EASY_RECOG_AREA_CODE_28 = "477";
    public static final String VALID_EASY_RECOG_AREA_CODE_29 = "488";
    public static final String VALID_EASY_RECOG_AREA_CODE_30 = "499";
    public static final String VALID_EASY_RECOG_AREA_CODE_31 = "500";
    public static final String VALID_EASY_RECOG_AREA_CODE_32 = "511";
    public static final String VALID_EASY_RECOG_AREA_CODE_33 = "522";
    public static final String VALID_EASY_RECOG_AREA_CODE_34 = "533";
    public static final String VALID_EASY_RECOG_AREA_CODE_35 = "544";
    public static final String VALID_EASY_RECOG_AREA_CODE_36 = "555";
    public static final String VALID_EASY_RECOG_AREA_CODE_37 = "566";
    public static final String VALID_EASY_RECOG_AREA_CODE_38 = "577";
    public static final String VALID_EASY_RECOG_AREA_CODE_39 = "588";
    public static final String VALID_EASY_RECOG_AREA_CODE_40 = "599";
    public static final String VALID_EASY_RECOG_AREA_CODE_41 = "600";
    public static final String VALID_EASY_RECOG_AREA_CODE_42 = "611";
    public static final String VALID_EASY_RECOG_AREA_CODE_43 = "622";
    public static final String VALID_EASY_RECOG_AREA_CODE_44 = "633";
    public static final String VALID_EASY_RECOG_AREA_CODE_45 = "644";
    public static final String VALID_EASY_RECOG_AREA_CODE_46 = "655";
    public static final String VALID_EASY_RECOG_AREA_CODE_47 = "666";
    public static final String VALID_EASY_RECOG_AREA_CODE_48 = "677";
    public static final String VALID_EASY_RECOG_AREA_CODE_49 = "688";
    public static final String VALID_EASY_RECOG_AREA_CODE_50 = "699";
    public static final String VALID_EASY_RECOG_AREA_CODE_51 = "700";
    public static final String VALID_EASY_RECOG_AREA_CODE_52 = "711";
    public static final String VALID_EASY_RECOG_AREA_CODE_53 = "722";
    public static final String VALID_EASY_RECOG_AREA_CODE_54 = "733";
    public static final String VALID_EASY_RECOG_AREA_CODE_55 = "744";
    public static final String VALID_EASY_RECOG_AREA_CODE_56 = "755";
    public static final String VALID_EASY_RECOG_AREA_CODE_57 = "766";
    public static final String VALID_EASY_RECOG_AREA_CODE_58 = "777";
    public static final String VALID_EASY_RECOG_AREA_CODE_59 = "788";
    public static final String VALID_EASY_RECOG_AREA_CODE_60 = "799";
    public static final String VALID_EASY_RECOG_AREA_CODE_61 = "800";
    public static final String VALID_EASY_RECOG_AREA_CODE_62 = "811";
    public static final String VALID_EASY_RECOG_AREA_CODE_63 = "822";
    public static final String VALID_EASY_RECOG_AREA_CODE_64 = "833";
    public static final String VALID_EASY_RECOG_AREA_CODE_65 = "844";
    public static final String VALID_EASY_RECOG_AREA_CODE_66 = "855";
    public static final String VALID_EASY_RECOG_AREA_CODE_67 = "866";
    public static final String VALID_EASY_RECOG_AREA_CODE_68 = "877";
    public static final String VALID_EASY_RECOG_AREA_CODE_69 = "888";
    public static final String VALID_EASY_RECOG_AREA_CODE_70 = "899";
    public static final String VALID_EASY_RECOG_AREA_CODE_71 = "900";
    public static final String VALID_EASY_RECOG_AREA_CODE_72 = "911";
    public static final String VALID_EASY_RECOG_AREA_CODE_73 = "922";
    public static final String VALID_EASY_RECOG_AREA_CODE_74 = "933";
    public static final String VALID_EASY_RECOG_AREA_CODE_75 = "944";
    public static final String VALID_EASY_RECOG_AREA_CODE_76 = "955";
    public static final String VALID_EASY_RECOG_AREA_CODE_77 = "966";
    public static final String VALID_EASY_RECOG_AREA_CODE_78 = "977";
    public static final String VALID_EASY_RECOG_AREA_CODE_79 = "988";
    public static final String VALID_EASY_RECOG_AREA_CODE_80 = "999";
    // *Search list of valid Phone area codes                            
    // [T-Up#INFO][CSLKPCDY.cpy, LINE #1013] US-STATE-CODE-TO-EDIT (level: 1)
    private @Getter String usStateCodeToEdit = StringUtils.repeat(' ', 2);
    // [T-Up#INFO][CSLKPCDY.cpy, LINE #1014] VALID-US-STATE-CODE (level: 88)
    public static final String VALID_US_STATE_CODE_1 = "AL";
    public static final String VALID_US_STATE_CODE_2 = "AK";
    public static final String VALID_US_STATE_CODE_3 = "AZ";
    public static final String VALID_US_STATE_CODE_4 = "AR";
    public static final String VALID_US_STATE_CODE_5 = "CA";
    public static final String VALID_US_STATE_CODE_6 = "CO";
    public static final String VALID_US_STATE_CODE_7 = "CT";
    public static final String VALID_US_STATE_CODE_8 = "DE";
    public static final String VALID_US_STATE_CODE_9 = "FL";
    public static final String VALID_US_STATE_CODE_10 = "GA";
    public static final String VALID_US_STATE_CODE_11 = "HI";
    public static final String VALID_US_STATE_CODE_12 = "ID";
    public static final String VALID_US_STATE_CODE_13 = "IL";
    public static final String VALID_US_STATE_CODE_14 = "IN";
    public static final String VALID_US_STATE_CODE_15 = "IA";
    public static final String VALID_US_STATE_CODE_16 = "KS";
    public static final String VALID_US_STATE_CODE_17 = "KY";
    public static final String VALID_US_STATE_CODE_18 = "LA";
    public static final String VALID_US_STATE_CODE_19 = "ME";
    public static final String VALID_US_STATE_CODE_20 = "MD";
    public static final String VALID_US_STATE_CODE_21 = "MA";
    public static final String VALID_US_STATE_CODE_22 = "MI";
    public static final String VALID_US_STATE_CODE_23 = "MN";
    public static final String VALID_US_STATE_CODE_24 = "MS";
    public static final String VALID_US_STATE_CODE_25 = "MO";
    public static final String VALID_US_STATE_CODE_26 = "MT";
    public static final String VALID_US_STATE_CODE_27 = "NE";
    public static final String VALID_US_STATE_CODE_28 = "NV";
    public static final String VALID_US_STATE_CODE_29 = "NH";
    public static final String VALID_US_STATE_CODE_30 = "NJ";
    public static final String VALID_US_STATE_CODE_31 = "NM";
    public static final String VALID_US_STATE_CODE_32 = "NY";
    public static final String VALID_US_STATE_CODE_33 = "NC";
    public static final String VALID_US_STATE_CODE_34 = "ND";
    public static final String VALID_US_STATE_CODE_35 = "OH";
    public static final String VALID_US_STATE_CODE_36 = "OK";
    public static final String VALID_US_STATE_CODE_37 = "OR";
    public static final String VALID_US_STATE_CODE_38 = "PA";
    public static final String VALID_US_STATE_CODE_39 = "RI";
    public static final String VALID_US_STATE_CODE_40 = "SC";
    public static final String VALID_US_STATE_CODE_41 = "SD";
    public static final String VALID_US_STATE_CODE_42 = "TN";
    public static final String VALID_US_STATE_CODE_43 = "TX";
    public static final String VALID_US_STATE_CODE_44 = "UT";
    public static final String VALID_US_STATE_CODE_45 = "VT";
    public static final String VALID_US_STATE_CODE_46 = "VA";
    public static final String VALID_US_STATE_CODE_47 = "WA";
    public static final String VALID_US_STATE_CODE_48 = "WV";
    public static final String VALID_US_STATE_CODE_49 = "WI";
    public static final String VALID_US_STATE_CODE_50 = "WY";
    public static final String VALID_US_STATE_CODE_51 = "DC";
    public static final String VALID_US_STATE_CODE_52 = "AS";
    public static final String VALID_US_STATE_CODE_53 = "GU";
    public static final String VALID_US_STATE_CODE_54 = "MP";
    public static final String VALID_US_STATE_CODE_55 = "PR";
    public static final String VALID_US_STATE_CODE_56 = "VI";
    // *State Zip Code Combinations                                      
    // [T-Up#INFO][CSLKPCDY.cpy, LINE #1072] US-STATE-ZIPCODE-TO-EDIT (level: 1)
    private @Getter @Setter CoactupcUsStateZipcodeToEdit usStateZipcodeToEdit = new CoactupcUsStateZipcodeToEdit();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT 
    // *                                                                 
    // ******************************************************************
    // * Variables for use in INSPECT statements                         
    // ******************************************************************
    // [T-Up#INFO][COACTUPC.cbl, LINE #608] LIT-ALL-ALPHA-FROM (level: 1)
    private @Getter String litAllAlphaFrom = StringUtils.repeat(' ', 52);
    // [T-Up#INFO][COACTUPC.cbl, LINE #609] LIT-ALL-ALPHANUM-FROM (level: 1)
    private @Getter String litAllAlphanumFrom = StringUtils.repeat(' ', 62);
    // [T-Up#INFO][COACTUPC.cbl, LINE #610] LIT-ALL-NUM-FROM (level: 1)
    private @Getter String litAllNumFrom = StringUtils.repeat(' ', 10);
    // [T-Up#INFO][COACTUPC.cbl, LINE #611] LIT-ALPHA-SPACES-TO (level: 77)
    private @Getter String litAlphaSpacesTo = StringUtils.repeat(' ', 52);
    // [T-Up#INFO][COACTUPC.cbl, LINE #612] LIT-ALPHANUM-SPACES-TO (level: 77)
    private @Getter String litAlphanumSpacesTo = StringUtils.repeat(' ', 62);
    // [T-Up#INFO][COACTUPC.cbl, LINE #613] LIT-NUM-SPACES-TO (level: 77)
    private @Getter String litNumSpacesTo = StringUtils.repeat(' ', 10);
    // *IBM SUPPLIED COPYBOOKS                                           
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter CoactupcDfhbmsca dfhbmsca = new CoactupcDfhbmsca();
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter CoactupcDfhaid dfhaid = new CoactupcDfhaid();
    // *COMMON COPYBOOKS                                                 
    // *Screen Titles                                                    
    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter CoactupcCcdaScreenTitle ccdaScreenTitle = new CoactupcCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Account Update Screen Layout                                     
    //       *COPY COACTUP.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COACTUP.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COACTUP.CPY, LINE #18] CACTUPAI (level: 1)
    private @Getter @Setter CoactupcCactupai cactupai = new CoactupcCactupai();

    public CoactupcCactupao getCactupao() {
        return new CoactupcCactupao().setOFFILLER1(getOFFILLER1())
                .setOFFILLER2(getOFFILLER2()).setTrnnamec(getTrnnamec())
                .setTrnnamep(getTrnnamep()).setTrnnameh(getTrnnameh())
                .setTrnnamev(getTrnnamev()).setTrnnameo(getTrnnameo())
                .setOFFILLER3(getOFFILLER3()).setTitle01c(getTitle01c())
                .setTitle01p(getTitle01p()).setTitle01h(getTitle01h())
                .setTitle01v(getTitle01v()).setTitle01o(getTitle01o())
                .setOFFILLER4(getOFFILLER4()).setCurdatec(getCurdatec())
                .setCurdatep(getCurdatep()).setCurdateh(getCurdateh())
                .setCurdatev(getCurdatev()).setCurdateo(getCurdateo())
                .setOFFILLER5(getOFFILLER5()).setPgmnamec(getPgmnamec())
                .setPgmnamep(getPgmnamep()).setPgmnameh(getPgmnameh())
                .setPgmnamev(getPgmnamev()).setPgmnameo(getPgmnameo())
                .setOFFILLER6(getOFFILLER6()).setTitle02c(getTitle02c())
                .setTitle02p(getTitle02p()).setTitle02h(getTitle02h())
                .setTitle02v(getTitle02v()).setTitle02o(getTitle02o())
                .setOFFILLER7(getOFFILLER7()).setCurtimec(getCurtimec())
                .setCurtimep(getCurtimep()).setCurtimeh(getCurtimeh())
                .setCurtimev(getCurtimev()).setCurtimeo(getCurtimeo())
                .setOFFILLER8(getOFFILLER8()).setAcctsidc(getAcctsidc())
                .setAcctsidp(getAcctsidp()).setAcctsidh(getAcctsidh())
                .setAcctsidv(getAcctsidv()).setAcctsido(getAcctsido())
                .setOFFILLER9(getOFFILLER9()).setAcsttusc(getAcsttusc())
                .setAcsttusp(getAcsttusp()).setAcsttush(getAcsttush())
                .setAcsttusv(getAcsttusv()).setAcsttuso(getAcsttuso())
                .setOFFILLER10(getOFFILLER10()).setOpnyearc(getOpnyearc())
                .setOpnyearp(getOpnyearp()).setOpnyearh(getOpnyearh())
                .setOpnyearv(getOpnyearv()).setOpnyearo(getOpnyearo())
                .setOFFILLER11(getOFFILLER11()).setOpnmonc(getOpnmonc())
                .setOpnmonp(getOpnmonp()).setOpnmonh(getOpnmonh())
                .setOpnmonv(getOpnmonv()).setOpnmono(getOpnmono())
                .setOFFILLER12(getOFFILLER12()).setOpndayc(getOpndayc())
                .setOpndayp(getOpndayp()).setOpndayh(getOpndayh())
                .setOpndayv(getOpndayv()).setOpndayo(getOpndayo())
                .setOFFILLER13(getOFFILLER13()).setAcrdlimc(getAcrdlimc())
                .setAcrdlimp(getAcrdlimp()).setAcrdlimh(getAcrdlimh())
                .setAcrdlimv(getAcrdlimv()).setAcrdlimo(getAcrdlimo())
                .setOFFILLER14(getOFFILLER14()).setExpyearc(getExpyearc())
                .setExpyearp(getExpyearp()).setExpyearh(getExpyearh())
                .setExpyearv(getExpyearv()).setExpyearo(getExpyearo())
                .setOFFILLER15(getOFFILLER15()).setExpmonc(getExpmonc())
                .setExpmonp(getExpmonp()).setExpmonh(getExpmonh())
                .setExpmonv(getExpmonv()).setExpmono(getExpmono())
                .setOFFILLER16(getOFFILLER16()).setExpdayc(getExpdayc())
                .setExpdayp(getExpdayp()).setExpdayh(getExpdayh())
                .setExpdayv(getExpdayv()).setExpdayo(getExpdayo())
                .setOFFILLER17(getOFFILLER17()).setAcshlimc(getAcshlimc())
                .setAcshlimp(getAcshlimp()).setAcshlimh(getAcshlimh())
                .setAcshlimv(getAcshlimv()).setAcshlimo(getAcshlimo())
                .setOFFILLER18(getOFFILLER18()).setRisyearc(getRisyearc())
                .setRisyearp(getRisyearp()).setRisyearh(getRisyearh())
                .setRisyearv(getRisyearv()).setRisyearo(getRisyearo())
                .setOFFILLER19(getOFFILLER19()).setRismonc(getRismonc())
                .setRismonp(getRismonp()).setRismonh(getRismonh())
                .setRismonv(getRismonv()).setRismono(getRismono())
                .setOFFILLER20(getOFFILLER20()).setRisdayc(getRisdayc())
                .setRisdayp(getRisdayp()).setRisdayh(getRisdayh())
                .setRisdayv(getRisdayv()).setRisdayo(getRisdayo())
                .setOFFILLER21(getOFFILLER21()).setAcurbalc(getAcurbalc())
                .setAcurbalp(getAcurbalp()).setAcurbalh(getAcurbalh())
                .setAcurbalv(getAcurbalv()).setAcurbalo(getAcurbalo())
                .setOFFILLER22(getOFFILLER22()).setAcrcycrc(getAcrcycrc())
                .setAcrcycrp(getAcrcycrp()).setAcrcycrh(getAcrcycrh())
                .setAcrcycrv(getAcrcycrv()).setAcrcycro(getAcrcycro())
                .setOFFILLER23(getOFFILLER23()).setAaddgrpc(getAaddgrpc())
                .setAaddgrpp(getAaddgrpp()).setAaddgrph(getAaddgrph())
                .setAaddgrpv(getAaddgrpv()).setAaddgrpo(getAaddgrpo())
                .setOFFILLER24(getOFFILLER24()).setAcrcydbc(getAcrcydbc())
                .setAcrcydbp(getAcrcydbp()).setAcrcydbh(getAcrcydbh())
                .setAcrcydbv(getAcrcydbv()).setAcrcydbo(getAcrcydbo())
                .setOFFILLER25(getOFFILLER25()).setAcstnumc(getAcstnumc())
                .setAcstnump(getAcstnump()).setAcstnumh(getAcstnumh())
                .setAcstnumv(getAcstnumv()).setAcstnumo(getAcstnumo())
                .setOFFILLER26(getOFFILLER26()).setActssn1c(getActssn1c())
                .setActssn1p(getActssn1p()).setActssn1h(getActssn1h())
                .setActssn1v(getActssn1v()).setActssn1o(getActssn1o())
                .setOFFILLER27(getOFFILLER27()).setActssn2c(getActssn2c())
                .setActssn2p(getActssn2p()).setActssn2h(getActssn2h())
                .setActssn2v(getActssn2v()).setActssn2o(getActssn2o())
                .setOFFILLER28(getOFFILLER28()).setActssn3c(getActssn3c())
                .setActssn3p(getActssn3p()).setActssn3h(getActssn3h())
                .setActssn3v(getActssn3v()).setActssn3o(getActssn3o())
                .setOFFILLER29(getOFFILLER29()).setDobyearc(getDobyearc())
                .setDobyearp(getDobyearp()).setDobyearh(getDobyearh())
                .setDobyearv(getDobyearv()).setDobyearo(getDobyearo())
                .setOFFILLER30(getOFFILLER30()).setDobmonc(getDobmonc())
                .setDobmonp(getDobmonp()).setDobmonh(getDobmonh())
                .setDobmonv(getDobmonv()).setDobmono(getDobmono())
                .setOFFILLER31(getOFFILLER31()).setDobdayc(getDobdayc())
                .setDobdayp(getDobdayp()).setDobdayh(getDobdayh())
                .setDobdayv(getDobdayv()).setDobdayo(getDobdayo())
                .setOFFILLER32(getOFFILLER32()).setAcstfcoc(getAcstfcoc())
                .setAcstfcop(getAcstfcop()).setAcstfcoh(getAcstfcoh())
                .setAcstfcov(getAcstfcov()).setAcstfcoo(getAcstfcoo())
                .setOFFILLER33(getOFFILLER33()).setAcsfnamc(getAcsfnamc())
                .setAcsfnamp(getAcsfnamp()).setAcsfnamh(getAcsfnamh())
                .setAcsfnamv(getAcsfnamv()).setAcsfnamo(getAcsfnamo())
                .setOFFILLER34(getOFFILLER34()).setAcsmnamc(getAcsmnamc())
                .setAcsmnamp(getAcsmnamp()).setAcsmnamh(getAcsmnamh())
                .setAcsmnamv(getAcsmnamv()).setAcsmnamo(getAcsmnamo())
                .setOFFILLER35(getOFFILLER35()).setAcslnamc(getAcslnamc())
                .setAcslnamp(getAcslnamp()).setAcslnamh(getAcslnamh())
                .setAcslnamv(getAcslnamv()).setAcslnamo(getAcslnamo())
                .setOFFILLER36(getOFFILLER36()).setAcsadl1c(getAcsadl1c())
                .setAcsadl1p(getAcsadl1p()).setAcsadl1h(getAcsadl1h())
                .setAcsadl1v(getAcsadl1v()).setAcsadl1o(getAcsadl1o())
                .setOFFILLER37(getOFFILLER37()).setAcssttec(getAcssttec())
                .setAcssttep(getAcssttep()).setAcsstteh(getAcsstteh())
                .setAcssttev(getAcssttev()).setAcsstteo(getAcsstteo())
                .setOFFILLER38(getOFFILLER38()).setAcsadl2c(getAcsadl2c())
                .setAcsadl2p(getAcsadl2p()).setAcsadl2h(getAcsadl2h())
                .setAcsadl2v(getAcsadl2v()).setAcsadl2o(getAcsadl2o())
                .setOFFILLER39(getOFFILLER39()).setAcszipcc(getAcszipcc())
                .setAcszipcp(getAcszipcp()).setAcszipch(getAcszipch())
                .setAcszipcv(getAcszipcv()).setAcszipco(getAcszipco())
                .setOFFILLER40(getOFFILLER40()).setAcscityc(getAcscityc())
                .setAcscityp(getAcscityp()).setAcscityh(getAcscityh())
                .setAcscityv(getAcscityv()).setAcscityo(getAcscityo())
                .setOFFILLER41(getOFFILLER41()).setAcsctryc(getAcsctryc())
                .setAcsctryp(getAcsctryp()).setAcsctryh(getAcsctryh())
                .setAcsctryv(getAcsctryv()).setAcsctryo(getAcsctryo())
                .setOFFILLER42(getOFFILLER42()).setAcsph1ac(getAcsph1ac())
                .setAcsph1ap(getAcsph1ap()).setAcsph1ah(getAcsph1ah())
                .setAcsph1av(getAcsph1av()).setAcsph1ao(getAcsph1ao())
                .setOFFILLER43(getOFFILLER43()).setAcsph1bc(getAcsph1bc())
                .setAcsph1bp(getAcsph1bp()).setAcsph1bh(getAcsph1bh())
                .setAcsph1bv(getAcsph1bv()).setAcsph1bo(getAcsph1bo())
                .setOFFILLER44(getOFFILLER44()).setAcsph1cc(getAcsph1cc())
                .setAcsph1cp(getAcsph1cp()).setAcsph1ch(getAcsph1ch())
                .setAcsph1cv(getAcsph1cv()).setAcsph1co(getAcsph1co())
                .setOFFILLER45(getOFFILLER45()).setAcsgovtc(getAcsgovtc())
                .setAcsgovtp(getAcsgovtp()).setAcsgovth(getAcsgovth())
                .setAcsgovtv(getAcsgovtv()).setAcsgovto(getAcsgovto())
                .setOFFILLER46(getOFFILLER46()).setAcsph2ac(getAcsph2ac())
                .setAcsph2ap(getAcsph2ap()).setAcsph2ah(getAcsph2ah())
                .setAcsph2av(getAcsph2av()).setAcsph2ao(getAcsph2ao())
                .setOFFILLER47(getOFFILLER47()).setAcsph2bc(getAcsph2bc())
                .setAcsph2bp(getAcsph2bp()).setAcsph2bh(getAcsph2bh())
                .setAcsph2bv(getAcsph2bv()).setAcsph2bo(getAcsph2bo())
                .setOFFILLER48(getOFFILLER48()).setAcsph2cc(getAcsph2cc())
                .setAcsph2cp(getAcsph2cp()).setAcsph2ch(getAcsph2ch())
                .setAcsph2cv(getAcsph2cv()).setAcsph2co(getAcsph2co())
                .setOFFILLER49(getOFFILLER49()).setAcseftcc(getAcseftcc())
                .setAcseftcp(getAcseftcp()).setAcseftch(getAcseftch())
                .setAcseftcv(getAcseftcv()).setAcseftco(getAcseftco())
                .setOFFILLER50(getOFFILLER50()).setAcspflgc(getAcspflgc())
                .setAcspflgp(getAcspflgp()).setAcspflgh(getAcspflgh())
                .setAcspflgv(getAcspflgv()).setAcspflgo(getAcspflgo())
                .setOFFILLER51(getOFFILLER51()).setInfomsgc(getInfomsgc())
                .setInfomsgp(getInfomsgp()).setInfomsgh(getInfomsgh())
                .setInfomsgv(getInfomsgv()).setInfomsgo(getInfomsgo())
                .setOFFILLER52(getOFFILLER52()).setErrmsgc(getErrmsgc())
                .setErrmsgp(getErrmsgp()).setErrmsgh(getErrmsgh())
                .setErrmsgv(getErrmsgv()).setErrmsgo(getErrmsgo())
                .setOFFILLER53(getOFFILLER53()).setFkeysc(getFkeysc())
                .setFkeysp(getFkeysp()).setFkeysh(getFkeysh())
                .setFkeysv(getFkeysv()).setFkeyso(getFkeyso())
                .setOFFILLER54(getOFFILLER54()).setFkey05c(getFkey05c())
                .setFkey05p(getFkey05p()).setFkey05h(getFkey05h())
                .setFkey05v(getFkey05v()).setFkey05o(getFkey05o())
                .setOFFILLER55(getOFFILLER55()).setFkey12c(getFkey12c())
                .setFkey12p(getFkey12p()).setFkey12h(getFkey12h())
                .setFkey12v(getFkey12v()).setFkey12o(getFkey12o());
    }

    public void setCactupao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setAcctsidc(source.substring(165, 166));
        setAcctsidp(source.substring(166, 167));
        setAcctsidh(source.substring(167, 168));
        setAcctsidv(source.substring(168, 169));
        setAcctsido(source.substring(169, 180));
        setOFFILLER9(source.substring(180, 183));
        setAcsttusc(source.substring(183, 184));
        setAcsttusp(source.substring(184, 185));
        setAcsttush(source.substring(185, 186));
        setAcsttusv(source.substring(186, 187));
        setAcsttuso(source.substring(187, 188));
        setOFFILLER10(source.substring(188, 191));
        setOpnyearc(source.substring(191, 192));
        setOpnyearp(source.substring(192, 193));
        setOpnyearh(source.substring(193, 194));
        setOpnyearv(source.substring(194, 195));
        setOpnyearo(source.substring(195, 199));
        setOFFILLER11(source.substring(199, 202));
        setOpnmonc(source.substring(202, 203));
        setOpnmonp(source.substring(203, 204));
        setOpnmonh(source.substring(204, 205));
        setOpnmonv(source.substring(205, 206));
        setOpnmono(source.substring(206, 208));
        setOFFILLER12(source.substring(208, 211));
        setOpndayc(source.substring(211, 212));
        setOpndayp(source.substring(212, 213));
        setOpndayh(source.substring(213, 214));
        setOpndayv(source.substring(214, 215));
        setOpndayo(source.substring(215, 217));
        setOFFILLER13(source.substring(217, 220));
        setAcrdlimc(source.substring(220, 221));
        setAcrdlimp(source.substring(221, 222));
        setAcrdlimh(source.substring(222, 223));
        setAcrdlimv(source.substring(223, 224));
        setAcrdlimo(source.substring(224, 239));
        setOFFILLER14(source.substring(239, 242));
        setExpyearc(source.substring(242, 243));
        setExpyearp(source.substring(243, 244));
        setExpyearh(source.substring(244, 245));
        setExpyearv(source.substring(245, 246));
        setExpyearo(source.substring(246, 250));
        setOFFILLER15(source.substring(250, 253));
        setExpmonc(source.substring(253, 254));
        setExpmonp(source.substring(254, 255));
        setExpmonh(source.substring(255, 256));
        setExpmonv(source.substring(256, 257));
        setExpmono(source.substring(257, 259));
        setOFFILLER16(source.substring(259, 262));
        setExpdayc(source.substring(262, 263));
        setExpdayp(source.substring(263, 264));
        setExpdayh(source.substring(264, 265));
        setExpdayv(source.substring(265, 266));
        setExpdayo(source.substring(266, 268));
        setOFFILLER17(source.substring(268, 271));
        setAcshlimc(source.substring(271, 272));
        setAcshlimp(source.substring(272, 273));
        setAcshlimh(source.substring(273, 274));
        setAcshlimv(source.substring(274, 275));
        setAcshlimo(source.substring(275, 290));
        setOFFILLER18(source.substring(290, 293));
        setRisyearc(source.substring(293, 294));
        setRisyearp(source.substring(294, 295));
        setRisyearh(source.substring(295, 296));
        setRisyearv(source.substring(296, 297));
        setRisyearo(source.substring(297, 301));
        setOFFILLER19(source.substring(301, 304));
        setRismonc(source.substring(304, 305));
        setRismonp(source.substring(305, 306));
        setRismonh(source.substring(306, 307));
        setRismonv(source.substring(307, 308));
        setRismono(source.substring(308, 310));
        setOFFILLER20(source.substring(310, 313));
        setRisdayc(source.substring(313, 314));
        setRisdayp(source.substring(314, 315));
        setRisdayh(source.substring(315, 316));
        setRisdayv(source.substring(316, 317));
        setRisdayo(source.substring(317, 319));
        setOFFILLER21(source.substring(319, 322));
        setAcurbalc(source.substring(322, 323));
        setAcurbalp(source.substring(323, 324));
        setAcurbalh(source.substring(324, 325));
        setAcurbalv(source.substring(325, 326));
        setAcurbalo(source.substring(326, 341));
        setOFFILLER22(source.substring(341, 344));
        setAcrcycrc(source.substring(344, 345));
        setAcrcycrp(source.substring(345, 346));
        setAcrcycrh(source.substring(346, 347));
        setAcrcycrv(source.substring(347, 348));
        setAcrcycro(source.substring(348, 363));
        setOFFILLER23(source.substring(363, 366));
        setAaddgrpc(source.substring(366, 367));
        setAaddgrpp(source.substring(367, 368));
        setAaddgrph(source.substring(368, 369));
        setAaddgrpv(source.substring(369, 370));
        setAaddgrpo(source.substring(370, 380));
        setOFFILLER24(source.substring(380, 383));
        setAcrcydbc(source.substring(383, 384));
        setAcrcydbp(source.substring(384, 385));
        setAcrcydbh(source.substring(385, 386));
        setAcrcydbv(source.substring(386, 387));
        setAcrcydbo(source.substring(387, 402));
        setOFFILLER25(source.substring(402, 405));
        setAcstnumc(source.substring(405, 406));
        setAcstnump(source.substring(406, 407));
        setAcstnumh(source.substring(407, 408));
        setAcstnumv(source.substring(408, 409));
        setAcstnumo(source.substring(409, 418));
        setOFFILLER26(source.substring(418, 421));
        setActssn1c(source.substring(421, 422));
        setActssn1p(source.substring(422, 423));
        setActssn1h(source.substring(423, 424));
        setActssn1v(source.substring(424, 425));
        setActssn1o(source.substring(425, 428));
        setOFFILLER27(source.substring(428, 431));
        setActssn2c(source.substring(431, 432));
        setActssn2p(source.substring(432, 433));
        setActssn2h(source.substring(433, 434));
        setActssn2v(source.substring(434, 435));
        setActssn2o(source.substring(435, 437));
        setOFFILLER28(source.substring(437, 440));
        setActssn3c(source.substring(440, 441));
        setActssn3p(source.substring(441, 442));
        setActssn3h(source.substring(442, 443));
        setActssn3v(source.substring(443, 444));
        setActssn3o(source.substring(444, 448));
        setOFFILLER29(source.substring(448, 451));
        setDobyearc(source.substring(451, 452));
        setDobyearp(source.substring(452, 453));
        setDobyearh(source.substring(453, 454));
        setDobyearv(source.substring(454, 455));
        setDobyearo(source.substring(455, 459));
        setOFFILLER30(source.substring(459, 462));
        setDobmonc(source.substring(462, 463));
        setDobmonp(source.substring(463, 464));
        setDobmonh(source.substring(464, 465));
        setDobmonv(source.substring(465, 466));
        setDobmono(source.substring(466, 468));
        setOFFILLER31(source.substring(468, 471));
        setDobdayc(source.substring(471, 472));
        setDobdayp(source.substring(472, 473));
        setDobdayh(source.substring(473, 474));
        setDobdayv(source.substring(474, 475));
        setDobdayo(source.substring(475, 477));
        setOFFILLER32(source.substring(477, 480));
        setAcstfcoc(source.substring(480, 481));
        setAcstfcop(source.substring(481, 482));
        setAcstfcoh(source.substring(482, 483));
        setAcstfcov(source.substring(483, 484));
        setAcstfcoo(source.substring(484, 487));
        setOFFILLER33(source.substring(487, 490));
        setAcsfnamc(source.substring(490, 491));
        setAcsfnamp(source.substring(491, 492));
        setAcsfnamh(source.substring(492, 493));
        setAcsfnamv(source.substring(493, 494));
        setAcsfnamo(source.substring(494, 519));
        setOFFILLER34(source.substring(519, 522));
        setAcsmnamc(source.substring(522, 523));
        setAcsmnamp(source.substring(523, 524));
        setAcsmnamh(source.substring(524, 525));
        setAcsmnamv(source.substring(525, 526));
        setAcsmnamo(source.substring(526, 551));
        setOFFILLER35(source.substring(551, 554));
        setAcslnamc(source.substring(554, 555));
        setAcslnamp(source.substring(555, 556));
        setAcslnamh(source.substring(556, 557));
        setAcslnamv(source.substring(557, 558));
        setAcslnamo(source.substring(558, 583));
        setOFFILLER36(source.substring(583, 586));
        setAcsadl1c(source.substring(586, 587));
        setAcsadl1p(source.substring(587, 588));
        setAcsadl1h(source.substring(588, 589));
        setAcsadl1v(source.substring(589, 590));
        setAcsadl1o(source.substring(590, 640));
        setOFFILLER37(source.substring(640, 643));
        setAcssttec(source.substring(643, 644));
        setAcssttep(source.substring(644, 645));
        setAcsstteh(source.substring(645, 646));
        setAcssttev(source.substring(646, 647));
        setAcsstteo(source.substring(647, 649));
        setOFFILLER38(source.substring(649, 652));
        setAcsadl2c(source.substring(652, 653));
        setAcsadl2p(source.substring(653, 654));
        setAcsadl2h(source.substring(654, 655));
        setAcsadl2v(source.substring(655, 656));
        setAcsadl2o(source.substring(656, 706));
        setOFFILLER39(source.substring(706, 709));
        setAcszipcc(source.substring(709, 710));
        setAcszipcp(source.substring(710, 711));
        setAcszipch(source.substring(711, 712));
        setAcszipcv(source.substring(712, 713));
        setAcszipco(source.substring(713, 718));
        setOFFILLER40(source.substring(718, 721));
        setAcscityc(source.substring(721, 722));
        setAcscityp(source.substring(722, 723));
        setAcscityh(source.substring(723, 724));
        setAcscityv(source.substring(724, 725));
        setAcscityo(source.substring(725, 775));
        setOFFILLER41(source.substring(775, 778));
        setAcsctryc(source.substring(778, 779));
        setAcsctryp(source.substring(779, 780));
        setAcsctryh(source.substring(780, 781));
        setAcsctryv(source.substring(781, 782));
        setAcsctryo(source.substring(782, 785));
        setOFFILLER42(source.substring(785, 788));
        setAcsph1ac(source.substring(788, 789));
        setAcsph1ap(source.substring(789, 790));
        setAcsph1ah(source.substring(790, 791));
        setAcsph1av(source.substring(791, 792));
        setAcsph1ao(source.substring(792, 795));
        setOFFILLER43(source.substring(795, 798));
        setAcsph1bc(source.substring(798, 799));
        setAcsph1bp(source.substring(799, 800));
        setAcsph1bh(source.substring(800, 801));
        setAcsph1bv(source.substring(801, 802));
        setAcsph1bo(source.substring(802, 805));
        setOFFILLER44(source.substring(805, 808));
        setAcsph1cc(source.substring(808, 809));
        setAcsph1cp(source.substring(809, 810));
        setAcsph1ch(source.substring(810, 811));
        setAcsph1cv(source.substring(811, 812));
        setAcsph1co(source.substring(812, 816));
        setOFFILLER45(source.substring(816, 819));
        setAcsgovtc(source.substring(819, 820));
        setAcsgovtp(source.substring(820, 821));
        setAcsgovth(source.substring(821, 822));
        setAcsgovtv(source.substring(822, 823));
        setAcsgovto(source.substring(823, 843));
        setOFFILLER46(source.substring(843, 846));
        setAcsph2ac(source.substring(846, 847));
        setAcsph2ap(source.substring(847, 848));
        setAcsph2ah(source.substring(848, 849));
        setAcsph2av(source.substring(849, 850));
        setAcsph2ao(source.substring(850, 853));
        setOFFILLER47(source.substring(853, 856));
        setAcsph2bc(source.substring(856, 857));
        setAcsph2bp(source.substring(857, 858));
        setAcsph2bh(source.substring(858, 859));
        setAcsph2bv(source.substring(859, 860));
        setAcsph2bo(source.substring(860, 863));
        setOFFILLER48(source.substring(863, 866));
        setAcsph2cc(source.substring(866, 867));
        setAcsph2cp(source.substring(867, 868));
        setAcsph2ch(source.substring(868, 869));
        setAcsph2cv(source.substring(869, 870));
        setAcsph2co(source.substring(870, 874));
        setOFFILLER49(source.substring(874, 877));
        setAcseftcc(source.substring(877, 878));
        setAcseftcp(source.substring(878, 879));
        setAcseftch(source.substring(879, 880));
        setAcseftcv(source.substring(880, 881));
        setAcseftco(source.substring(881, 891));
        setOFFILLER50(source.substring(891, 894));
        setAcspflgc(source.substring(894, 895));
        setAcspflgp(source.substring(895, 896));
        setAcspflgh(source.substring(896, 897));
        setAcspflgv(source.substring(897, 898));
        setAcspflgo(source.substring(898, 899));
        setOFFILLER51(source.substring(899, 902));
        setInfomsgc(source.substring(902, 903));
        setInfomsgp(source.substring(903, 904));
        setInfomsgh(source.substring(904, 905));
        setInfomsgv(source.substring(905, 906));
        setInfomsgo(source.substring(906, 951));
        setOFFILLER52(source.substring(951, 954));
        setErrmsgc(source.substring(954, 955));
        setErrmsgp(source.substring(955, 956));
        setErrmsgh(source.substring(956, 957));
        setErrmsgv(source.substring(957, 958));
        setErrmsgo(source.substring(958, 1036));
        setOFFILLER53(source.substring(1036, 1039));
        setFkeysc(source.substring(1039, 1040));
        setFkeysp(source.substring(1040, 1041));
        setFkeysh(source.substring(1041, 1042));
        setFkeysv(source.substring(1042, 1043));
        setFkeyso(source.substring(1043, 1064));
        setOFFILLER54(source.substring(1064, 1067));
        setFkey05c(source.substring(1067, 1068));
        setFkey05p(source.substring(1068, 1069));
        setFkey05h(source.substring(1069, 1070));
        setFkey05v(source.substring(1070, 1071));
        setFkey05o(source.substring(1071, 1078));
        setOFFILLER55(source.substring(1078, 1081));
        setFkey12c(source.substring(1081, 1082));
        setFkey12p(source.substring(1082, 1083));
        setFkey12h(source.substring(1083, 1084));
        setFkey12v(source.substring(1084, 1085));
        setFkey12o(source.substring(1085, 1095));
    }

    public void setCactupao(CoactupcCactupao source) {
        setCactupao(source.toString());
    }

    public String getOFFILLER1() {
        return getCactupai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCactupai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCactupai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCactupai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCactupai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactupai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCactupai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCactupai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactupai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCactupai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCactupai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactupai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCactupai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCactupai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactupai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCactupai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCactupai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCactupai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCactupai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCactupai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactupai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCactupai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCactupai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactupai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCactupai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCactupai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactupai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCactupai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCactupai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactupai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCactupai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCactupai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCactupai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCactupai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCactupai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactupai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCactupai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCactupai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactupai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCactupai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCactupai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactupai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCactupai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCactupai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactupai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCactupai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCactupai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCactupai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCactupai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCactupai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactupai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCactupai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCactupai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactupai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCactupai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCactupai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactupai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCactupai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCactupai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactupai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCactupai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCactupai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCactupai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCactupai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCactupai().setOFFILLER11(
                StringUtils
                        .overlay(getCactupai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCactupai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCactupai().setOFFILLER11(
                StringUtils
                        .overlay(getCactupai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCactupai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCactupai().setOFFILLER11(
                StringUtils
                        .overlay(getCactupai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCactupai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCactupai().setOFFILLER11(
                StringUtils
                        .overlay(getCactupai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCactupai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCactupai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCactupai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCactupai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCactupai().setOFFILLER13(
                StringUtils
                        .overlay(getCactupai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCactupai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCactupai().setOFFILLER13(
                StringUtils
                        .overlay(getCactupai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCactupai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCactupai().setOFFILLER13(
                StringUtils
                        .overlay(getCactupai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCactupai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCactupai().setOFFILLER13(
                StringUtils
                        .overlay(getCactupai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCactupai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCactupai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcctsidl());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCactupai().getAcctsidf();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcctsidl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcctsidl(0);
        }
    }

    public String getAcctsidc() {
        return getCactupai().getOFFILLER15().substring(0, 1);
    }

    public void setAcctsidc(String source) {
        getCactupai().setOFFILLER15(
                StringUtils
                        .overlay(getCactupai().getOFFILLER15(), source, 0, 1));
    }

    public String getAcctsidp() {
        return getCactupai().getOFFILLER15().substring(1, 2);
    }

    public void setAcctsidp(String source) {
        getCactupai().setOFFILLER15(
                StringUtils
                        .overlay(getCactupai().getOFFILLER15(), source, 1, 2));
    }

    public String getAcctsidh() {
        return getCactupai().getOFFILLER15().substring(2, 3);
    }

    public void setAcctsidh(String source) {
        getCactupai().setOFFILLER15(
                StringUtils
                        .overlay(getCactupai().getOFFILLER15(), source, 2, 3));
    }

    public String getAcctsidv() {
        return getCactupai().getOFFILLER15().substring(3);
    }

    public void setAcctsidv(String source) {
        getCactupai().setOFFILLER15(
                StringUtils
                        .overlay(getCactupai().getOFFILLER15(), source, 3, 4));
    }

    public String getAcctsido() {
        return getCactupai().getAcctsidi();
    }

    public void setAcctsido(String source) {
        getCactupai().setAcctsidi(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsttusl());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCactupai().getAcsttusf();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsttusl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsttusl(0);
        }
    }

    public String getAcsttusc() {
        return getCactupai().getOFFILLER17().substring(0, 1);
    }

    public void setAcsttusc(String source) {
        getCactupai().setOFFILLER17(
                StringUtils
                        .overlay(getCactupai().getOFFILLER17(), source, 0, 1));
    }

    public String getAcsttusp() {
        return getCactupai().getOFFILLER17().substring(1, 2);
    }

    public void setAcsttusp(String source) {
        getCactupai().setOFFILLER17(
                StringUtils
                        .overlay(getCactupai().getOFFILLER17(), source, 1, 2));
    }

    public String getAcsttush() {
        return getCactupai().getOFFILLER17().substring(2, 3);
    }

    public void setAcsttush(String source) {
        getCactupai().setOFFILLER17(
                StringUtils
                        .overlay(getCactupai().getOFFILLER17(), source, 2, 3));
    }

    public String getAcsttusv() {
        return getCactupai().getOFFILLER17().substring(3);
    }

    public void setAcsttusv(String source) {
        getCactupai().setOFFILLER17(
                StringUtils
                        .overlay(getCactupai().getOFFILLER17(), source, 3, 4));
    }

    public String getAcsttuso() {
        return getCactupai().getAcsttusi();
    }

    public void setAcsttuso(String source) {
        getCactupai().setAcsttusi(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getOpnyearl());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCactupai().getOpnyearf();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setOpnyearl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setOpnyearl(0);
        }
    }

    public String getOpnyearc() {
        return getCactupai().getOFFILLER19().substring(0, 1);
    }

    public void setOpnyearc(String source) {
        getCactupai().setOFFILLER19(
                StringUtils
                        .overlay(getCactupai().getOFFILLER19(), source, 0, 1));
    }

    public String getOpnyearp() {
        return getCactupai().getOFFILLER19().substring(1, 2);
    }

    public void setOpnyearp(String source) {
        getCactupai().setOFFILLER19(
                StringUtils
                        .overlay(getCactupai().getOFFILLER19(), source, 1, 2));
    }

    public String getOpnyearh() {
        return getCactupai().getOFFILLER19().substring(2, 3);
    }

    public void setOpnyearh(String source) {
        getCactupai().setOFFILLER19(
                StringUtils
                        .overlay(getCactupai().getOFFILLER19(), source, 2, 3));
    }

    public String getOpnyearv() {
        return getCactupai().getOFFILLER19().substring(3);
    }

    public void setOpnyearv(String source) {
        getCactupai().setOFFILLER19(
                StringUtils
                        .overlay(getCactupai().getOFFILLER19(), source, 3, 4));
    }

    public String getOpnyearo() {
        return getCactupai().getOpnyeari();
    }

    public void setOpnyearo(String source) {
        getCactupai().setOpnyeari(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getOpnmonl());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCactupai().getOpnmonf();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setOpnmonl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setOpnmonl(0);
        }
    }

    public String getOpnmonc() {
        return getCactupai().getOFFILLER21().substring(0, 1);
    }

    public void setOpnmonc(String source) {
        getCactupai().setOFFILLER21(
                StringUtils
                        .overlay(getCactupai().getOFFILLER21(), source, 0, 1));
    }

    public String getOpnmonp() {
        return getCactupai().getOFFILLER21().substring(1, 2);
    }

    public void setOpnmonp(String source) {
        getCactupai().setOFFILLER21(
                StringUtils
                        .overlay(getCactupai().getOFFILLER21(), source, 1, 2));
    }

    public String getOpnmonh() {
        return getCactupai().getOFFILLER21().substring(2, 3);
    }

    public void setOpnmonh(String source) {
        getCactupai().setOFFILLER21(
                StringUtils
                        .overlay(getCactupai().getOFFILLER21(), source, 2, 3));
    }

    public String getOpnmonv() {
        return getCactupai().getOFFILLER21().substring(3);
    }

    public void setOpnmonv(String source) {
        getCactupai().setOFFILLER21(
                StringUtils
                        .overlay(getCactupai().getOFFILLER21(), source, 3, 4));
    }

    public String getOpnmono() {
        return getCactupai().getOpnmoni();
    }

    public void setOpnmono(String source) {
        getCactupai().setOpnmoni(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getOpndayl());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCactupai().getOpndayf();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setOpndayl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setOpndayl(0);
        }
    }

    public String getOpndayc() {
        return getCactupai().getOFFILLER23().substring(0, 1);
    }

    public void setOpndayc(String source) {
        getCactupai().setOFFILLER23(
                StringUtils
                        .overlay(getCactupai().getOFFILLER23(), source, 0, 1));
    }

    public String getOpndayp() {
        return getCactupai().getOFFILLER23().substring(1, 2);
    }

    public void setOpndayp(String source) {
        getCactupai().setOFFILLER23(
                StringUtils
                        .overlay(getCactupai().getOFFILLER23(), source, 1, 2));
    }

    public String getOpndayh() {
        return getCactupai().getOFFILLER23().substring(2, 3);
    }

    public void setOpndayh(String source) {
        getCactupai().setOFFILLER23(
                StringUtils
                        .overlay(getCactupai().getOFFILLER23(), source, 2, 3));
    }

    public String getOpndayv() {
        return getCactupai().getOFFILLER23().substring(3);
    }

    public void setOpndayv(String source) {
        getCactupai().setOFFILLER23(
                StringUtils
                        .overlay(getCactupai().getOFFILLER23(), source, 3, 4));
    }

    public String getOpndayo() {
        return getCactupai().getOpndayi();
    }

    public void setOpndayo(String source) {
        getCactupai().setOpndayi(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcrdliml());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCactupai().getAcrdlimf();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcrdliml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcrdliml(0);
        }
    }

    public String getAcrdlimc() {
        return getCactupai().getOFFILLER25().substring(0, 1);
    }

    public void setAcrdlimc(String source) {
        getCactupai().setOFFILLER25(
                StringUtils
                        .overlay(getCactupai().getOFFILLER25(), source, 0, 1));
    }

    public String getAcrdlimp() {
        return getCactupai().getOFFILLER25().substring(1, 2);
    }

    public void setAcrdlimp(String source) {
        getCactupai().setOFFILLER25(
                StringUtils
                        .overlay(getCactupai().getOFFILLER25(), source, 1, 2));
    }

    public String getAcrdlimh() {
        return getCactupai().getOFFILLER25().substring(2, 3);
    }

    public void setAcrdlimh(String source) {
        getCactupai().setOFFILLER25(
                StringUtils
                        .overlay(getCactupai().getOFFILLER25(), source, 2, 3));
    }

    public String getAcrdlimv() {
        return getCactupai().getOFFILLER25().substring(3);
    }

    public void setAcrdlimv(String source) {
        getCactupai().setOFFILLER25(
                StringUtils
                        .overlay(getCactupai().getOFFILLER25(), source, 3, 4));
    }

    public String getAcrdlimo() {
        return getCactupai().getAcrdlimi();
    }

    public void setAcrdlimo(String source) {
        getCactupai().setAcrdlimi(source);
    }

    public String getOFFILLER14() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getExpyearl());
        tempByteBuffer1.flip();
        String temp13 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp13 + getCactupai().getExpyearf();
    }

    public void setOFFILLER14(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setExpyearl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setExpyearl(0);
        }
    }

    public String getExpyearc() {
        return getCactupai().getOFFILLER27().substring(0, 1);
    }

    public void setExpyearc(String source) {
        getCactupai().setOFFILLER27(
                StringUtils
                        .overlay(getCactupai().getOFFILLER27(), source, 0, 1));
    }

    public String getExpyearp() {
        return getCactupai().getOFFILLER27().substring(1, 2);
    }

    public void setExpyearp(String source) {
        getCactupai().setOFFILLER27(
                StringUtils
                        .overlay(getCactupai().getOFFILLER27(), source, 1, 2));
    }

    public String getExpyearh() {
        return getCactupai().getOFFILLER27().substring(2, 3);
    }

    public void setExpyearh(String source) {
        getCactupai().setOFFILLER27(
                StringUtils
                        .overlay(getCactupai().getOFFILLER27(), source, 2, 3));
    }

    public String getExpyearv() {
        return getCactupai().getOFFILLER27().substring(3);
    }

    public void setExpyearv(String source) {
        getCactupai().setOFFILLER27(
                StringUtils
                        .overlay(getCactupai().getOFFILLER27(), source, 3, 4));
    }

    public String getExpyearo() {
        return getCactupai().getExpyeari();
    }

    public void setExpyearo(String source) {
        getCactupai().setExpyeari(source);
    }

    public String getOFFILLER15() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getExpmonl());
        tempByteBuffer1.flip();
        String temp14 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp14 + getCactupai().getExpmonf();
    }

    public void setOFFILLER15(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setExpmonl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setExpmonl(0);
        }
    }

    public String getExpmonc() {
        return getCactupai().getOFFILLER29().substring(0, 1);
    }

    public void setExpmonc(String source) {
        getCactupai().setOFFILLER29(
                StringUtils
                        .overlay(getCactupai().getOFFILLER29(), source, 0, 1));
    }

    public String getExpmonp() {
        return getCactupai().getOFFILLER29().substring(1, 2);
    }

    public void setExpmonp(String source) {
        getCactupai().setOFFILLER29(
                StringUtils
                        .overlay(getCactupai().getOFFILLER29(), source, 1, 2));
    }

    public String getExpmonh() {
        return getCactupai().getOFFILLER29().substring(2, 3);
    }

    public void setExpmonh(String source) {
        getCactupai().setOFFILLER29(
                StringUtils
                        .overlay(getCactupai().getOFFILLER29(), source, 2, 3));
    }

    public String getExpmonv() {
        return getCactupai().getOFFILLER29().substring(3);
    }

    public void setExpmonv(String source) {
        getCactupai().setOFFILLER29(
                StringUtils
                        .overlay(getCactupai().getOFFILLER29(), source, 3, 4));
    }

    public String getExpmono() {
        return getCactupai().getExpmoni();
    }

    public void setExpmono(String source) {
        getCactupai().setExpmoni(source);
    }

    public String getOFFILLER16() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getExpdayl());
        tempByteBuffer1.flip();
        String temp15 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp15 + getCactupai().getExpdayf();
    }

    public void setOFFILLER16(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setExpdayl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setExpdayl(0);
        }
    }

    public String getExpdayc() {
        return getCactupai().getOFFILLER31().substring(0, 1);
    }

    public void setExpdayc(String source) {
        getCactupai().setOFFILLER31(
                StringUtils
                        .overlay(getCactupai().getOFFILLER31(), source, 0, 1));
    }

    public String getExpdayp() {
        return getCactupai().getOFFILLER31().substring(1, 2);
    }

    public void setExpdayp(String source) {
        getCactupai().setOFFILLER31(
                StringUtils
                        .overlay(getCactupai().getOFFILLER31(), source, 1, 2));
    }

    public String getExpdayh() {
        return getCactupai().getOFFILLER31().substring(2, 3);
    }

    public void setExpdayh(String source) {
        getCactupai().setOFFILLER31(
                StringUtils
                        .overlay(getCactupai().getOFFILLER31(), source, 2, 3));
    }

    public String getExpdayv() {
        return getCactupai().getOFFILLER31().substring(3);
    }

    public void setExpdayv(String source) {
        getCactupai().setOFFILLER31(
                StringUtils
                        .overlay(getCactupai().getOFFILLER31(), source, 3, 4));
    }

    public String getExpdayo() {
        return getCactupai().getExpdayi();
    }

    public void setExpdayo(String source) {
        getCactupai().setExpdayi(source);
    }

    public String getOFFILLER17() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcshliml());
        tempByteBuffer1.flip();
        String temp16 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp16 + getCactupai().getAcshlimf();
    }

    public void setOFFILLER17(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcshliml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcshliml(0);
        }
    }

    public String getAcshlimc() {
        return getCactupai().getOFFILLER33().substring(0, 1);
    }

    public void setAcshlimc(String source) {
        getCactupai().setOFFILLER33(
                StringUtils
                        .overlay(getCactupai().getOFFILLER33(), source, 0, 1));
    }

    public String getAcshlimp() {
        return getCactupai().getOFFILLER33().substring(1, 2);
    }

    public void setAcshlimp(String source) {
        getCactupai().setOFFILLER33(
                StringUtils
                        .overlay(getCactupai().getOFFILLER33(), source, 1, 2));
    }

    public String getAcshlimh() {
        return getCactupai().getOFFILLER33().substring(2, 3);
    }

    public void setAcshlimh(String source) {
        getCactupai().setOFFILLER33(
                StringUtils
                        .overlay(getCactupai().getOFFILLER33(), source, 2, 3));
    }

    public String getAcshlimv() {
        return getCactupai().getOFFILLER33().substring(3);
    }

    public void setAcshlimv(String source) {
        getCactupai().setOFFILLER33(
                StringUtils
                        .overlay(getCactupai().getOFFILLER33(), source, 3, 4));
    }

    public String getAcshlimo() {
        return getCactupai().getAcshlimi();
    }

    public void setAcshlimo(String source) {
        getCactupai().setAcshlimi(source);
    }

    public String getOFFILLER18() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getRisyearl());
        tempByteBuffer1.flip();
        String temp17 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp17 + getCactupai().getRisyearf();
    }

    public void setOFFILLER18(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setRisyearl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setRisyearl(0);
        }
    }

    public String getRisyearc() {
        return getCactupai().getOFFILLER35().substring(0, 1);
    }

    public void setRisyearc(String source) {
        getCactupai().setOFFILLER35(
                StringUtils
                        .overlay(getCactupai().getOFFILLER35(), source, 0, 1));
    }

    public String getRisyearp() {
        return getCactupai().getOFFILLER35().substring(1, 2);
    }

    public void setRisyearp(String source) {
        getCactupai().setOFFILLER35(
                StringUtils
                        .overlay(getCactupai().getOFFILLER35(), source, 1, 2));
    }

    public String getRisyearh() {
        return getCactupai().getOFFILLER35().substring(2, 3);
    }

    public void setRisyearh(String source) {
        getCactupai().setOFFILLER35(
                StringUtils
                        .overlay(getCactupai().getOFFILLER35(), source, 2, 3));
    }

    public String getRisyearv() {
        return getCactupai().getOFFILLER35().substring(3);
    }

    public void setRisyearv(String source) {
        getCactupai().setOFFILLER35(
                StringUtils
                        .overlay(getCactupai().getOFFILLER35(), source, 3, 4));
    }

    public String getRisyearo() {
        return getCactupai().getRisyeari();
    }

    public void setRisyearo(String source) {
        getCactupai().setRisyeari(source);
    }

    public String getOFFILLER19() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getRismonl());
        tempByteBuffer1.flip();
        String temp18 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp18 + getCactupai().getRismonf();
    }

    public void setOFFILLER19(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setRismonl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setRismonl(0);
        }
    }

    public String getRismonc() {
        return getCactupai().getOFFILLER37().substring(0, 1);
    }

    public void setRismonc(String source) {
        getCactupai().setOFFILLER37(
                StringUtils
                        .overlay(getCactupai().getOFFILLER37(), source, 0, 1));
    }

    public String getRismonp() {
        return getCactupai().getOFFILLER37().substring(1, 2);
    }

    public void setRismonp(String source) {
        getCactupai().setOFFILLER37(
                StringUtils
                        .overlay(getCactupai().getOFFILLER37(), source, 1, 2));
    }

    public String getRismonh() {
        return getCactupai().getOFFILLER37().substring(2, 3);
    }

    public void setRismonh(String source) {
        getCactupai().setOFFILLER37(
                StringUtils
                        .overlay(getCactupai().getOFFILLER37(), source, 2, 3));
    }

    public String getRismonv() {
        return getCactupai().getOFFILLER37().substring(3);
    }

    public void setRismonv(String source) {
        getCactupai().setOFFILLER37(
                StringUtils
                        .overlay(getCactupai().getOFFILLER37(), source, 3, 4));
    }

    public String getRismono() {
        return getCactupai().getRismoni();
    }

    public void setRismono(String source) {
        getCactupai().setRismoni(source);
    }

    public String getOFFILLER20() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getRisdayl());
        tempByteBuffer1.flip();
        String temp19 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp19 + getCactupai().getRisdayf();
    }

    public void setOFFILLER20(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setRisdayl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setRisdayl(0);
        }
    }

    public String getRisdayc() {
        return getCactupai().getOFFILLER39().substring(0, 1);
    }

    public void setRisdayc(String source) {
        getCactupai().setOFFILLER39(
                StringUtils
                        .overlay(getCactupai().getOFFILLER39(), source, 0, 1));
    }

    public String getRisdayp() {
        return getCactupai().getOFFILLER39().substring(1, 2);
    }

    public void setRisdayp(String source) {
        getCactupai().setOFFILLER39(
                StringUtils
                        .overlay(getCactupai().getOFFILLER39(), source, 1, 2));
    }

    public String getRisdayh() {
        return getCactupai().getOFFILLER39().substring(2, 3);
    }

    public void setRisdayh(String source) {
        getCactupai().setOFFILLER39(
                StringUtils
                        .overlay(getCactupai().getOFFILLER39(), source, 2, 3));
    }

    public String getRisdayv() {
        return getCactupai().getOFFILLER39().substring(3);
    }

    public void setRisdayv(String source) {
        getCactupai().setOFFILLER39(
                StringUtils
                        .overlay(getCactupai().getOFFILLER39(), source, 3, 4));
    }

    public String getRisdayo() {
        return getCactupai().getRisdayi();
    }

    public void setRisdayo(String source) {
        getCactupai().setRisdayi(source);
    }

    public String getOFFILLER21() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcurball());
        tempByteBuffer1.flip();
        String temp20 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp20 + getCactupai().getAcurbalf();
    }

    public void setOFFILLER21(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcurball(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcurball(0);
        }
    }

    public String getAcurbalc() {
        return getCactupai().getOFFILLER41().substring(0, 1);
    }

    public void setAcurbalc(String source) {
        getCactupai().setOFFILLER41(
                StringUtils
                        .overlay(getCactupai().getOFFILLER41(), source, 0, 1));
    }

    public String getAcurbalp() {
        return getCactupai().getOFFILLER41().substring(1, 2);
    }

    public void setAcurbalp(String source) {
        getCactupai().setOFFILLER41(
                StringUtils
                        .overlay(getCactupai().getOFFILLER41(), source, 1, 2));
    }

    public String getAcurbalh() {
        return getCactupai().getOFFILLER41().substring(2, 3);
    }

    public void setAcurbalh(String source) {
        getCactupai().setOFFILLER41(
                StringUtils
                        .overlay(getCactupai().getOFFILLER41(), source, 2, 3));
    }

    public String getAcurbalv() {
        return getCactupai().getOFFILLER41().substring(3);
    }

    public void setAcurbalv(String source) {
        getCactupai().setOFFILLER41(
                StringUtils
                        .overlay(getCactupai().getOFFILLER41(), source, 3, 4));
    }

    public String getAcurbalo() {
        return getCactupai().getAcurbali();
    }

    public void setAcurbalo(String source) {
        getCactupai().setAcurbali(source);
    }

    public String getOFFILLER22() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcrcycrl());
        tempByteBuffer1.flip();
        String temp21 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp21 + getCactupai().getAcrcycrf();
    }

    public void setOFFILLER22(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcrcycrl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcrcycrl(0);
        }
    }

    public String getAcrcycrc() {
        return getCactupai().getOFFILLER43().substring(0, 1);
    }

    public void setAcrcycrc(String source) {
        getCactupai().setOFFILLER43(
                StringUtils
                        .overlay(getCactupai().getOFFILLER43(), source, 0, 1));
    }

    public String getAcrcycrp() {
        return getCactupai().getOFFILLER43().substring(1, 2);
    }

    public void setAcrcycrp(String source) {
        getCactupai().setOFFILLER43(
                StringUtils
                        .overlay(getCactupai().getOFFILLER43(), source, 1, 2));
    }

    public String getAcrcycrh() {
        return getCactupai().getOFFILLER43().substring(2, 3);
    }

    public void setAcrcycrh(String source) {
        getCactupai().setOFFILLER43(
                StringUtils
                        .overlay(getCactupai().getOFFILLER43(), source, 2, 3));
    }

    public String getAcrcycrv() {
        return getCactupai().getOFFILLER43().substring(3);
    }

    public void setAcrcycrv(String source) {
        getCactupai().setOFFILLER43(
                StringUtils
                        .overlay(getCactupai().getOFFILLER43(), source, 3, 4));
    }

    public String getAcrcycro() {
        return getCactupai().getAcrcycri();
    }

    public void setAcrcycro(String source) {
        getCactupai().setAcrcycri(source);
    }

    public String getOFFILLER23() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAaddgrpl());
        tempByteBuffer1.flip();
        String temp22 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp22 + getCactupai().getAaddgrpf();
    }

    public void setOFFILLER23(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAaddgrpl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAaddgrpl(0);
        }
    }

    public String getAaddgrpc() {
        return getCactupai().getOFFILLER45().substring(0, 1);
    }

    public void setAaddgrpc(String source) {
        getCactupai().setOFFILLER45(
                StringUtils
                        .overlay(getCactupai().getOFFILLER45(), source, 0, 1));
    }

    public String getAaddgrpp() {
        return getCactupai().getOFFILLER45().substring(1, 2);
    }

    public void setAaddgrpp(String source) {
        getCactupai().setOFFILLER45(
                StringUtils
                        .overlay(getCactupai().getOFFILLER45(), source, 1, 2));
    }

    public String getAaddgrph() {
        return getCactupai().getOFFILLER45().substring(2, 3);
    }

    public void setAaddgrph(String source) {
        getCactupai().setOFFILLER45(
                StringUtils
                        .overlay(getCactupai().getOFFILLER45(), source, 2, 3));
    }

    public String getAaddgrpv() {
        return getCactupai().getOFFILLER45().substring(3);
    }

    public void setAaddgrpv(String source) {
        getCactupai().setOFFILLER45(
                StringUtils
                        .overlay(getCactupai().getOFFILLER45(), source, 3, 4));
    }

    public String getAaddgrpo() {
        return getCactupai().getAaddgrpi();
    }

    public void setAaddgrpo(String source) {
        getCactupai().setAaddgrpi(source);
    }

    public String getOFFILLER24() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcrcydbl());
        tempByteBuffer1.flip();
        String temp23 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp23 + getCactupai().getAcrcydbf();
    }

    public void setOFFILLER24(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcrcydbl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcrcydbl(0);
        }
    }

    public String getAcrcydbc() {
        return getCactupai().getOFFILLER47().substring(0, 1);
    }

    public void setAcrcydbc(String source) {
        getCactupai().setOFFILLER47(
                StringUtils
                        .overlay(getCactupai().getOFFILLER47(), source, 0, 1));
    }

    public String getAcrcydbp() {
        return getCactupai().getOFFILLER47().substring(1, 2);
    }

    public void setAcrcydbp(String source) {
        getCactupai().setOFFILLER47(
                StringUtils
                        .overlay(getCactupai().getOFFILLER47(), source, 1, 2));
    }

    public String getAcrcydbh() {
        return getCactupai().getOFFILLER47().substring(2, 3);
    }

    public void setAcrcydbh(String source) {
        getCactupai().setOFFILLER47(
                StringUtils
                        .overlay(getCactupai().getOFFILLER47(), source, 2, 3));
    }

    public String getAcrcydbv() {
        return getCactupai().getOFFILLER47().substring(3);
    }

    public void setAcrcydbv(String source) {
        getCactupai().setOFFILLER47(
                StringUtils
                        .overlay(getCactupai().getOFFILLER47(), source, 3, 4));
    }

    public String getAcrcydbo() {
        return getCactupai().getAcrcydbi();
    }

    public void setAcrcydbo(String source) {
        getCactupai().setAcrcydbi(source);
    }

    public String getOFFILLER25() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcstnuml());
        tempByteBuffer1.flip();
        String temp24 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp24 + getCactupai().getAcstnumf();
    }

    public void setOFFILLER25(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcstnuml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcstnuml(0);
        }
    }

    public String getAcstnumc() {
        return getCactupai().getOFFILLER49().substring(0, 1);
    }

    public void setAcstnumc(String source) {
        getCactupai().setOFFILLER49(
                StringUtils
                        .overlay(getCactupai().getOFFILLER49(), source, 0, 1));
    }

    public String getAcstnump() {
        return getCactupai().getOFFILLER49().substring(1, 2);
    }

    public void setAcstnump(String source) {
        getCactupai().setOFFILLER49(
                StringUtils
                        .overlay(getCactupai().getOFFILLER49(), source, 1, 2));
    }

    public String getAcstnumh() {
        return getCactupai().getOFFILLER49().substring(2, 3);
    }

    public void setAcstnumh(String source) {
        getCactupai().setOFFILLER49(
                StringUtils
                        .overlay(getCactupai().getOFFILLER49(), source, 2, 3));
    }

    public String getAcstnumv() {
        return getCactupai().getOFFILLER49().substring(3);
    }

    public void setAcstnumv(String source) {
        getCactupai().setOFFILLER49(
                StringUtils
                        .overlay(getCactupai().getOFFILLER49(), source, 3, 4));
    }

    public String getAcstnumo() {
        return getCactupai().getAcstnumi();
    }

    public void setAcstnumo(String source) {
        getCactupai().setAcstnumi(source);
    }

    public String getOFFILLER26() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getActssn1l());
        tempByteBuffer1.flip();
        String temp25 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp25 + getCactupai().getActssn1f();
    }

    public void setOFFILLER26(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setActssn1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setActssn1l(0);
        }
    }

    public String getActssn1c() {
        return getCactupai().getOFFILLER51().substring(0, 1);
    }

    public void setActssn1c(String source) {
        getCactupai().setOFFILLER51(
                StringUtils
                        .overlay(getCactupai().getOFFILLER51(), source, 0, 1));
    }

    public String getActssn1p() {
        return getCactupai().getOFFILLER51().substring(1, 2);
    }

    public void setActssn1p(String source) {
        getCactupai().setOFFILLER51(
                StringUtils
                        .overlay(getCactupai().getOFFILLER51(), source, 1, 2));
    }

    public String getActssn1h() {
        return getCactupai().getOFFILLER51().substring(2, 3);
    }

    public void setActssn1h(String source) {
        getCactupai().setOFFILLER51(
                StringUtils
                        .overlay(getCactupai().getOFFILLER51(), source, 2, 3));
    }

    public String getActssn1v() {
        return getCactupai().getOFFILLER51().substring(3);
    }

    public void setActssn1v(String source) {
        getCactupai().setOFFILLER51(
                StringUtils
                        .overlay(getCactupai().getOFFILLER51(), source, 3, 4));
    }

    public String getActssn1o() {
        return getCactupai().getActssn1i();
    }

    public void setActssn1o(String source) {
        getCactupai().setActssn1i(source);
    }

    public String getOFFILLER27() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getActssn2l());
        tempByteBuffer1.flip();
        String temp26 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp26 + getCactupai().getActssn2f();
    }

    public void setOFFILLER27(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setActssn2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setActssn2l(0);
        }
    }

    public String getActssn2c() {
        return getCactupai().getOFFILLER53().substring(0, 1);
    }

    public void setActssn2c(String source) {
        getCactupai().setOFFILLER53(
                StringUtils
                        .overlay(getCactupai().getOFFILLER53(), source, 0, 1));
    }

    public String getActssn2p() {
        return getCactupai().getOFFILLER53().substring(1, 2);
    }

    public void setActssn2p(String source) {
        getCactupai().setOFFILLER53(
                StringUtils
                        .overlay(getCactupai().getOFFILLER53(), source, 1, 2));
    }

    public String getActssn2h() {
        return getCactupai().getOFFILLER53().substring(2, 3);
    }

    public void setActssn2h(String source) {
        getCactupai().setOFFILLER53(
                StringUtils
                        .overlay(getCactupai().getOFFILLER53(), source, 2, 3));
    }

    public String getActssn2v() {
        return getCactupai().getOFFILLER53().substring(3);
    }

    public void setActssn2v(String source) {
        getCactupai().setOFFILLER53(
                StringUtils
                        .overlay(getCactupai().getOFFILLER53(), source, 3, 4));
    }

    public String getActssn2o() {
        return getCactupai().getActssn2i();
    }

    public void setActssn2o(String source) {
        getCactupai().setActssn2i(source);
    }

    public String getOFFILLER28() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getActssn3l());
        tempByteBuffer1.flip();
        String temp27 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp27 + getCactupai().getActssn3f();
    }

    public void setOFFILLER28(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setActssn3l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setActssn3l(0);
        }
    }

    public String getActssn3c() {
        return getCactupai().getOFFILLER55().substring(0, 1);
    }

    public void setActssn3c(String source) {
        getCactupai().setOFFILLER55(
                StringUtils
                        .overlay(getCactupai().getOFFILLER55(), source, 0, 1));
    }

    public String getActssn3p() {
        return getCactupai().getOFFILLER55().substring(1, 2);
    }

    public void setActssn3p(String source) {
        getCactupai().setOFFILLER55(
                StringUtils
                        .overlay(getCactupai().getOFFILLER55(), source, 1, 2));
    }

    public String getActssn3h() {
        return getCactupai().getOFFILLER55().substring(2, 3);
    }

    public void setActssn3h(String source) {
        getCactupai().setOFFILLER55(
                StringUtils
                        .overlay(getCactupai().getOFFILLER55(), source, 2, 3));
    }

    public String getActssn3v() {
        return getCactupai().getOFFILLER55().substring(3);
    }

    public void setActssn3v(String source) {
        getCactupai().setOFFILLER55(
                StringUtils
                        .overlay(getCactupai().getOFFILLER55(), source, 3, 4));
    }

    public String getActssn3o() {
        return getCactupai().getActssn3i();
    }

    public void setActssn3o(String source) {
        getCactupai().setActssn3i(source);
    }

    public String getOFFILLER29() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getDobyearl());
        tempByteBuffer1.flip();
        String temp28 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp28 + getCactupai().getDobyearf();
    }

    public void setOFFILLER29(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setDobyearl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setDobyearl(0);
        }
    }

    public String getDobyearc() {
        return getCactupai().getOFFILLER57().substring(0, 1);
    }

    public void setDobyearc(String source) {
        getCactupai().setOFFILLER57(
                StringUtils
                        .overlay(getCactupai().getOFFILLER57(), source, 0, 1));
    }

    public String getDobyearp() {
        return getCactupai().getOFFILLER57().substring(1, 2);
    }

    public void setDobyearp(String source) {
        getCactupai().setOFFILLER57(
                StringUtils
                        .overlay(getCactupai().getOFFILLER57(), source, 1, 2));
    }

    public String getDobyearh() {
        return getCactupai().getOFFILLER57().substring(2, 3);
    }

    public void setDobyearh(String source) {
        getCactupai().setOFFILLER57(
                StringUtils
                        .overlay(getCactupai().getOFFILLER57(), source, 2, 3));
    }

    public String getDobyearv() {
        return getCactupai().getOFFILLER57().substring(3);
    }

    public void setDobyearv(String source) {
        getCactupai().setOFFILLER57(
                StringUtils
                        .overlay(getCactupai().getOFFILLER57(), source, 3, 4));
    }

    public String getDobyearo() {
        return getCactupai().getDobyeari();
    }

    public void setDobyearo(String source) {
        getCactupai().setDobyeari(source);
    }

    public String getOFFILLER30() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getDobmonl());
        tempByteBuffer1.flip();
        String temp29 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp29 + getCactupai().getDobmonf();
    }

    public void setOFFILLER30(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setDobmonl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setDobmonl(0);
        }
    }

    public String getDobmonc() {
        return getCactupai().getOFFILLER59().substring(0, 1);
    }

    public void setDobmonc(String source) {
        getCactupai().setOFFILLER59(
                StringUtils
                        .overlay(getCactupai().getOFFILLER59(), source, 0, 1));
    }

    public String getDobmonp() {
        return getCactupai().getOFFILLER59().substring(1, 2);
    }

    public void setDobmonp(String source) {
        getCactupai().setOFFILLER59(
                StringUtils
                        .overlay(getCactupai().getOFFILLER59(), source, 1, 2));
    }

    public String getDobmonh() {
        return getCactupai().getOFFILLER59().substring(2, 3);
    }

    public void setDobmonh(String source) {
        getCactupai().setOFFILLER59(
                StringUtils
                        .overlay(getCactupai().getOFFILLER59(), source, 2, 3));
    }

    public String getDobmonv() {
        return getCactupai().getOFFILLER59().substring(3);
    }

    public void setDobmonv(String source) {
        getCactupai().setOFFILLER59(
                StringUtils
                        .overlay(getCactupai().getOFFILLER59(), source, 3, 4));
    }

    public String getDobmono() {
        return getCactupai().getDobmoni();
    }

    public void setDobmono(String source) {
        getCactupai().setDobmoni(source);
    }

    public String getOFFILLER31() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getDobdayl());
        tempByteBuffer1.flip();
        String temp30 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp30 + getCactupai().getDobdayf();
    }

    public void setOFFILLER31(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setDobdayl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setDobdayl(0);
        }
    }

    public String getDobdayc() {
        return getCactupai().getOFFILLER61().substring(0, 1);
    }

    public void setDobdayc(String source) {
        getCactupai().setOFFILLER61(
                StringUtils
                        .overlay(getCactupai().getOFFILLER61(), source, 0, 1));
    }

    public String getDobdayp() {
        return getCactupai().getOFFILLER61().substring(1, 2);
    }

    public void setDobdayp(String source) {
        getCactupai().setOFFILLER61(
                StringUtils
                        .overlay(getCactupai().getOFFILLER61(), source, 1, 2));
    }

    public String getDobdayh() {
        return getCactupai().getOFFILLER61().substring(2, 3);
    }

    public void setDobdayh(String source) {
        getCactupai().setOFFILLER61(
                StringUtils
                        .overlay(getCactupai().getOFFILLER61(), source, 2, 3));
    }

    public String getDobdayv() {
        return getCactupai().getOFFILLER61().substring(3);
    }

    public void setDobdayv(String source) {
        getCactupai().setOFFILLER61(
                StringUtils
                        .overlay(getCactupai().getOFFILLER61(), source, 3, 4));
    }

    public String getDobdayo() {
        return getCactupai().getDobdayi();
    }

    public void setDobdayo(String source) {
        getCactupai().setDobdayi(source);
    }

    public String getOFFILLER32() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcstfcol());
        tempByteBuffer1.flip();
        String temp31 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp31 + getCactupai().getAcstfcof();
    }

    public void setOFFILLER32(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcstfcol(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcstfcol(0);
        }
    }

    public String getAcstfcoc() {
        return getCactupai().getOFFILLER63().substring(0, 1);
    }

    public void setAcstfcoc(String source) {
        getCactupai().setOFFILLER63(
                StringUtils
                        .overlay(getCactupai().getOFFILLER63(), source, 0, 1));
    }

    public String getAcstfcop() {
        return getCactupai().getOFFILLER63().substring(1, 2);
    }

    public void setAcstfcop(String source) {
        getCactupai().setOFFILLER63(
                StringUtils
                        .overlay(getCactupai().getOFFILLER63(), source, 1, 2));
    }

    public String getAcstfcoh() {
        return getCactupai().getOFFILLER63().substring(2, 3);
    }

    public void setAcstfcoh(String source) {
        getCactupai().setOFFILLER63(
                StringUtils
                        .overlay(getCactupai().getOFFILLER63(), source, 2, 3));
    }

    public String getAcstfcov() {
        return getCactupai().getOFFILLER63().substring(3);
    }

    public void setAcstfcov(String source) {
        getCactupai().setOFFILLER63(
                StringUtils
                        .overlay(getCactupai().getOFFILLER63(), source, 3, 4));
    }

    public String getAcstfcoo() {
        return getCactupai().getAcstfcoi();
    }

    public void setAcstfcoo(String source) {
        getCactupai().setAcstfcoi(source);
    }

    public String getOFFILLER33() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsfnaml());
        tempByteBuffer1.flip();
        String temp32 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp32 + getCactupai().getAcsfnamf();
    }

    public void setOFFILLER33(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsfnaml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsfnaml(0);
        }
    }

    public String getAcsfnamc() {
        return getCactupai().getOFFILLER65().substring(0, 1);
    }

    public void setAcsfnamc(String source) {
        getCactupai().setOFFILLER65(
                StringUtils
                        .overlay(getCactupai().getOFFILLER65(), source, 0, 1));
    }

    public String getAcsfnamp() {
        return getCactupai().getOFFILLER65().substring(1, 2);
    }

    public void setAcsfnamp(String source) {
        getCactupai().setOFFILLER65(
                StringUtils
                        .overlay(getCactupai().getOFFILLER65(), source, 1, 2));
    }

    public String getAcsfnamh() {
        return getCactupai().getOFFILLER65().substring(2, 3);
    }

    public void setAcsfnamh(String source) {
        getCactupai().setOFFILLER65(
                StringUtils
                        .overlay(getCactupai().getOFFILLER65(), source, 2, 3));
    }

    public String getAcsfnamv() {
        return getCactupai().getOFFILLER65().substring(3);
    }

    public void setAcsfnamv(String source) {
        getCactupai().setOFFILLER65(
                StringUtils
                        .overlay(getCactupai().getOFFILLER65(), source, 3, 4));
    }

    public String getAcsfnamo() {
        return getCactupai().getAcsfnami();
    }

    public void setAcsfnamo(String source) {
        getCactupai().setAcsfnami(source);
    }

    public String getOFFILLER34() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsmnaml());
        tempByteBuffer1.flip();
        String temp33 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp33 + getCactupai().getAcsmnamf();
    }

    public void setOFFILLER34(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsmnaml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsmnaml(0);
        }
    }

    public String getAcsmnamc() {
        return getCactupai().getOFFILLER67().substring(0, 1);
    }

    public void setAcsmnamc(String source) {
        getCactupai().setOFFILLER67(
                StringUtils
                        .overlay(getCactupai().getOFFILLER67(), source, 0, 1));
    }

    public String getAcsmnamp() {
        return getCactupai().getOFFILLER67().substring(1, 2);
    }

    public void setAcsmnamp(String source) {
        getCactupai().setOFFILLER67(
                StringUtils
                        .overlay(getCactupai().getOFFILLER67(), source, 1, 2));
    }

    public String getAcsmnamh() {
        return getCactupai().getOFFILLER67().substring(2, 3);
    }

    public void setAcsmnamh(String source) {
        getCactupai().setOFFILLER67(
                StringUtils
                        .overlay(getCactupai().getOFFILLER67(), source, 2, 3));
    }

    public String getAcsmnamv() {
        return getCactupai().getOFFILLER67().substring(3);
    }

    public void setAcsmnamv(String source) {
        getCactupai().setOFFILLER67(
                StringUtils
                        .overlay(getCactupai().getOFFILLER67(), source, 3, 4));
    }

    public String getAcsmnamo() {
        return getCactupai().getAcsmnami();
    }

    public void setAcsmnamo(String source) {
        getCactupai().setAcsmnami(source);
    }

    public String getOFFILLER35() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcslnaml());
        tempByteBuffer1.flip();
        String temp34 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp34 + getCactupai().getAcslnamf();
    }

    public void setOFFILLER35(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcslnaml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcslnaml(0);
        }
    }

    public String getAcslnamc() {
        return getCactupai().getOFFILLER69().substring(0, 1);
    }

    public void setAcslnamc(String source) {
        getCactupai().setOFFILLER69(
                StringUtils
                        .overlay(getCactupai().getOFFILLER69(), source, 0, 1));
    }

    public String getAcslnamp() {
        return getCactupai().getOFFILLER69().substring(1, 2);
    }

    public void setAcslnamp(String source) {
        getCactupai().setOFFILLER69(
                StringUtils
                        .overlay(getCactupai().getOFFILLER69(), source, 1, 2));
    }

    public String getAcslnamh() {
        return getCactupai().getOFFILLER69().substring(2, 3);
    }

    public void setAcslnamh(String source) {
        getCactupai().setOFFILLER69(
                StringUtils
                        .overlay(getCactupai().getOFFILLER69(), source, 2, 3));
    }

    public String getAcslnamv() {
        return getCactupai().getOFFILLER69().substring(3);
    }

    public void setAcslnamv(String source) {
        getCactupai().setOFFILLER69(
                StringUtils
                        .overlay(getCactupai().getOFFILLER69(), source, 3, 4));
    }

    public String getAcslnamo() {
        return getCactupai().getAcslnami();
    }

    public void setAcslnamo(String source) {
        getCactupai().setAcslnami(source);
    }

    public String getOFFILLER36() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsadl1l());
        tempByteBuffer1.flip();
        String temp35 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp35 + getCactupai().getAcsadl1f();
    }

    public void setOFFILLER36(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsadl1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsadl1l(0);
        }
    }

    public String getAcsadl1c() {
        return getCactupai().getOFFILLER71().substring(0, 1);
    }

    public void setAcsadl1c(String source) {
        getCactupai().setOFFILLER71(
                StringUtils
                        .overlay(getCactupai().getOFFILLER71(), source, 0, 1));
    }

    public String getAcsadl1p() {
        return getCactupai().getOFFILLER71().substring(1, 2);
    }

    public void setAcsadl1p(String source) {
        getCactupai().setOFFILLER71(
                StringUtils
                        .overlay(getCactupai().getOFFILLER71(), source, 1, 2));
    }

    public String getAcsadl1h() {
        return getCactupai().getOFFILLER71().substring(2, 3);
    }

    public void setAcsadl1h(String source) {
        getCactupai().setOFFILLER71(
                StringUtils
                        .overlay(getCactupai().getOFFILLER71(), source, 2, 3));
    }

    public String getAcsadl1v() {
        return getCactupai().getOFFILLER71().substring(3);
    }

    public void setAcsadl1v(String source) {
        getCactupai().setOFFILLER71(
                StringUtils
                        .overlay(getCactupai().getOFFILLER71(), source, 3, 4));
    }

    public String getAcsadl1o() {
        return getCactupai().getAcsadl1i();
    }

    public void setAcsadl1o(String source) {
        getCactupai().setAcsadl1i(source);
    }

    public String getOFFILLER37() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcssttel());
        tempByteBuffer1.flip();
        String temp36 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp36 + getCactupai().getAcssttef();
    }

    public void setOFFILLER37(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcssttel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcssttel(0);
        }
    }

    public String getAcssttec() {
        return getCactupai().getOFFILLER73().substring(0, 1);
    }

    public void setAcssttec(String source) {
        getCactupai().setOFFILLER73(
                StringUtils
                        .overlay(getCactupai().getOFFILLER73(), source, 0, 1));
    }

    public String getAcssttep() {
        return getCactupai().getOFFILLER73().substring(1, 2);
    }

    public void setAcssttep(String source) {
        getCactupai().setOFFILLER73(
                StringUtils
                        .overlay(getCactupai().getOFFILLER73(), source, 1, 2));
    }

    public String getAcsstteh() {
        return getCactupai().getOFFILLER73().substring(2, 3);
    }

    public void setAcsstteh(String source) {
        getCactupai().setOFFILLER73(
                StringUtils
                        .overlay(getCactupai().getOFFILLER73(), source, 2, 3));
    }

    public String getAcssttev() {
        return getCactupai().getOFFILLER73().substring(3);
    }

    public void setAcssttev(String source) {
        getCactupai().setOFFILLER73(
                StringUtils
                        .overlay(getCactupai().getOFFILLER73(), source, 3, 4));
    }

    public String getAcsstteo() {
        return getCactupai().getAcssttei();
    }

    public void setAcsstteo(String source) {
        getCactupai().setAcssttei(source);
    }

    public String getOFFILLER38() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsadl2l());
        tempByteBuffer1.flip();
        String temp37 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp37 + getCactupai().getAcsadl2f();
    }

    public void setOFFILLER38(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsadl2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsadl2l(0);
        }
    }

    public String getAcsadl2c() {
        return getCactupai().getOFFILLER75().substring(0, 1);
    }

    public void setAcsadl2c(String source) {
        getCactupai().setOFFILLER75(
                StringUtils
                        .overlay(getCactupai().getOFFILLER75(), source, 0, 1));
    }

    public String getAcsadl2p() {
        return getCactupai().getOFFILLER75().substring(1, 2);
    }

    public void setAcsadl2p(String source) {
        getCactupai().setOFFILLER75(
                StringUtils
                        .overlay(getCactupai().getOFFILLER75(), source, 1, 2));
    }

    public String getAcsadl2h() {
        return getCactupai().getOFFILLER75().substring(2, 3);
    }

    public void setAcsadl2h(String source) {
        getCactupai().setOFFILLER75(
                StringUtils
                        .overlay(getCactupai().getOFFILLER75(), source, 2, 3));
    }

    public String getAcsadl2v() {
        return getCactupai().getOFFILLER75().substring(3);
    }

    public void setAcsadl2v(String source) {
        getCactupai().setOFFILLER75(
                StringUtils
                        .overlay(getCactupai().getOFFILLER75(), source, 3, 4));
    }

    public String getAcsadl2o() {
        return getCactupai().getAcsadl2i();
    }

    public void setAcsadl2o(String source) {
        getCactupai().setAcsadl2i(source);
    }

    public String getOFFILLER39() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcszipcl());
        tempByteBuffer1.flip();
        String temp38 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp38 + getCactupai().getAcszipcf();
    }

    public void setOFFILLER39(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcszipcl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcszipcl(0);
        }
    }

    public String getAcszipcc() {
        return getCactupai().getOFFILLER77().substring(0, 1);
    }

    public void setAcszipcc(String source) {
        getCactupai().setOFFILLER77(
                StringUtils
                        .overlay(getCactupai().getOFFILLER77(), source, 0, 1));
    }

    public String getAcszipcp() {
        return getCactupai().getOFFILLER77().substring(1, 2);
    }

    public void setAcszipcp(String source) {
        getCactupai().setOFFILLER77(
                StringUtils
                        .overlay(getCactupai().getOFFILLER77(), source, 1, 2));
    }

    public String getAcszipch() {
        return getCactupai().getOFFILLER77().substring(2, 3);
    }

    public void setAcszipch(String source) {
        getCactupai().setOFFILLER77(
                StringUtils
                        .overlay(getCactupai().getOFFILLER77(), source, 2, 3));
    }

    public String getAcszipcv() {
        return getCactupai().getOFFILLER77().substring(3);
    }

    public void setAcszipcv(String source) {
        getCactupai().setOFFILLER77(
                StringUtils
                        .overlay(getCactupai().getOFFILLER77(), source, 3, 4));
    }

    public String getAcszipco() {
        return getCactupai().getAcszipci();
    }

    public void setAcszipco(String source) {
        getCactupai().setAcszipci(source);
    }

    public String getOFFILLER40() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcscityl());
        tempByteBuffer1.flip();
        String temp39 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp39 + getCactupai().getAcscityf();
    }

    public void setOFFILLER40(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcscityl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcscityl(0);
        }
    }

    public String getAcscityc() {
        return getCactupai().getOFFILLER79().substring(0, 1);
    }

    public void setAcscityc(String source) {
        getCactupai().setOFFILLER79(
                StringUtils
                        .overlay(getCactupai().getOFFILLER79(), source, 0, 1));
    }

    public String getAcscityp() {
        return getCactupai().getOFFILLER79().substring(1, 2);
    }

    public void setAcscityp(String source) {
        getCactupai().setOFFILLER79(
                StringUtils
                        .overlay(getCactupai().getOFFILLER79(), source, 1, 2));
    }

    public String getAcscityh() {
        return getCactupai().getOFFILLER79().substring(2, 3);
    }

    public void setAcscityh(String source) {
        getCactupai().setOFFILLER79(
                StringUtils
                        .overlay(getCactupai().getOFFILLER79(), source, 2, 3));
    }

    public String getAcscityv() {
        return getCactupai().getOFFILLER79().substring(3);
    }

    public void setAcscityv(String source) {
        getCactupai().setOFFILLER79(
                StringUtils
                        .overlay(getCactupai().getOFFILLER79(), source, 3, 4));
    }

    public String getAcscityo() {
        return getCactupai().getAcscityi();
    }

    public void setAcscityo(String source) {
        getCactupai().setAcscityi(source);
    }

    public String getOFFILLER41() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsctryl());
        tempByteBuffer1.flip();
        String temp40 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp40 + getCactupai().getAcsctryf();
    }

    public void setOFFILLER41(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsctryl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsctryl(0);
        }
    }

    public String getAcsctryc() {
        return getCactupai().getOFFILLER81().substring(0, 1);
    }

    public void setAcsctryc(String source) {
        getCactupai().setOFFILLER81(
                StringUtils
                        .overlay(getCactupai().getOFFILLER81(), source, 0, 1));
    }

    public String getAcsctryp() {
        return getCactupai().getOFFILLER81().substring(1, 2);
    }

    public void setAcsctryp(String source) {
        getCactupai().setOFFILLER81(
                StringUtils
                        .overlay(getCactupai().getOFFILLER81(), source, 1, 2));
    }

    public String getAcsctryh() {
        return getCactupai().getOFFILLER81().substring(2, 3);
    }

    public void setAcsctryh(String source) {
        getCactupai().setOFFILLER81(
                StringUtils
                        .overlay(getCactupai().getOFFILLER81(), source, 2, 3));
    }

    public String getAcsctryv() {
        return getCactupai().getOFFILLER81().substring(3);
    }

    public void setAcsctryv(String source) {
        getCactupai().setOFFILLER81(
                StringUtils
                        .overlay(getCactupai().getOFFILLER81(), source, 3, 4));
    }

    public String getAcsctryo() {
        return getCactupai().getAcsctryi();
    }

    public void setAcsctryo(String source) {
        getCactupai().setAcsctryi(source);
    }

    public String getOFFILLER42() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsph1al());
        tempByteBuffer1.flip();
        String temp41 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp41 + getCactupai().getAcsph1af();
    }

    public void setOFFILLER42(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsph1al(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsph1al(0);
        }
    }

    public String getAcsph1ac() {
        return getCactupai().getOFFILLER83().substring(0, 1);
    }

    public void setAcsph1ac(String source) {
        getCactupai().setOFFILLER83(
                StringUtils
                        .overlay(getCactupai().getOFFILLER83(), source, 0, 1));
    }

    public String getAcsph1ap() {
        return getCactupai().getOFFILLER83().substring(1, 2);
    }

    public void setAcsph1ap(String source) {
        getCactupai().setOFFILLER83(
                StringUtils
                        .overlay(getCactupai().getOFFILLER83(), source, 1, 2));
    }

    public String getAcsph1ah() {
        return getCactupai().getOFFILLER83().substring(2, 3);
    }

    public void setAcsph1ah(String source) {
        getCactupai().setOFFILLER83(
                StringUtils
                        .overlay(getCactupai().getOFFILLER83(), source, 2, 3));
    }

    public String getAcsph1av() {
        return getCactupai().getOFFILLER83().substring(3);
    }

    public void setAcsph1av(String source) {
        getCactupai().setOFFILLER83(
                StringUtils
                        .overlay(getCactupai().getOFFILLER83(), source, 3, 4));
    }

    public String getAcsph1ao() {
        return getCactupai().getAcsph1ai();
    }

    public void setAcsph1ao(String source) {
        getCactupai().setAcsph1ai(source);
    }

    public String getOFFILLER43() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsph1bl());
        tempByteBuffer1.flip();
        String temp42 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp42 + getCactupai().getAcsph1bf();
    }

    public void setOFFILLER43(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsph1bl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsph1bl(0);
        }
    }

    public String getAcsph1bc() {
        return getCactupai().getOFFILLER85().substring(0, 1);
    }

    public void setAcsph1bc(String source) {
        getCactupai().setOFFILLER85(
                StringUtils
                        .overlay(getCactupai().getOFFILLER85(), source, 0, 1));
    }

    public String getAcsph1bp() {
        return getCactupai().getOFFILLER85().substring(1, 2);
    }

    public void setAcsph1bp(String source) {
        getCactupai().setOFFILLER85(
                StringUtils
                        .overlay(getCactupai().getOFFILLER85(), source, 1, 2));
    }

    public String getAcsph1bh() {
        return getCactupai().getOFFILLER85().substring(2, 3);
    }

    public void setAcsph1bh(String source) {
        getCactupai().setOFFILLER85(
                StringUtils
                        .overlay(getCactupai().getOFFILLER85(), source, 2, 3));
    }

    public String getAcsph1bv() {
        return getCactupai().getOFFILLER85().substring(3);
    }

    public void setAcsph1bv(String source) {
        getCactupai().setOFFILLER85(
                StringUtils
                        .overlay(getCactupai().getOFFILLER85(), source, 3, 4));
    }

    public String getAcsph1bo() {
        return getCactupai().getAcsph1bi();
    }

    public void setAcsph1bo(String source) {
        getCactupai().setAcsph1bi(source);
    }

    public String getOFFILLER44() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsph1cl());
        tempByteBuffer1.flip();
        String temp43 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp43 + getCactupai().getAcsph1cf();
    }

    public void setOFFILLER44(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsph1cl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsph1cl(0);
        }
    }

    public String getAcsph1cc() {
        return getCactupai().getOFFILLER87().substring(0, 1);
    }

    public void setAcsph1cc(String source) {
        getCactupai().setOFFILLER87(
                StringUtils
                        .overlay(getCactupai().getOFFILLER87(), source, 0, 1));
    }

    public String getAcsph1cp() {
        return getCactupai().getOFFILLER87().substring(1, 2);
    }

    public void setAcsph1cp(String source) {
        getCactupai().setOFFILLER87(
                StringUtils
                        .overlay(getCactupai().getOFFILLER87(), source, 1, 2));
    }

    public String getAcsph1ch() {
        return getCactupai().getOFFILLER87().substring(2, 3);
    }

    public void setAcsph1ch(String source) {
        getCactupai().setOFFILLER87(
                StringUtils
                        .overlay(getCactupai().getOFFILLER87(), source, 2, 3));
    }

    public String getAcsph1cv() {
        return getCactupai().getOFFILLER87().substring(3);
    }

    public void setAcsph1cv(String source) {
        getCactupai().setOFFILLER87(
                StringUtils
                        .overlay(getCactupai().getOFFILLER87(), source, 3, 4));
    }

    public String getAcsph1co() {
        return getCactupai().getAcsph1ci();
    }

    public void setAcsph1co(String source) {
        getCactupai().setAcsph1ci(source);
    }

    public String getOFFILLER45() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsgovtl());
        tempByteBuffer1.flip();
        String temp44 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp44 + getCactupai().getAcsgovtf();
    }

    public void setOFFILLER45(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsgovtl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsgovtl(0);
        }
    }

    public String getAcsgovtc() {
        return getCactupai().getOFFILLER89().substring(0, 1);
    }

    public void setAcsgovtc(String source) {
        getCactupai().setOFFILLER89(
                StringUtils
                        .overlay(getCactupai().getOFFILLER89(), source, 0, 1));
    }

    public String getAcsgovtp() {
        return getCactupai().getOFFILLER89().substring(1, 2);
    }

    public void setAcsgovtp(String source) {
        getCactupai().setOFFILLER89(
                StringUtils
                        .overlay(getCactupai().getOFFILLER89(), source, 1, 2));
    }

    public String getAcsgovth() {
        return getCactupai().getOFFILLER89().substring(2, 3);
    }

    public void setAcsgovth(String source) {
        getCactupai().setOFFILLER89(
                StringUtils
                        .overlay(getCactupai().getOFFILLER89(), source, 2, 3));
    }

    public String getAcsgovtv() {
        return getCactupai().getOFFILLER89().substring(3);
    }

    public void setAcsgovtv(String source) {
        getCactupai().setOFFILLER89(
                StringUtils
                        .overlay(getCactupai().getOFFILLER89(), source, 3, 4));
    }

    public String getAcsgovto() {
        return getCactupai().getAcsgovti();
    }

    public void setAcsgovto(String source) {
        getCactupai().setAcsgovti(source);
    }

    public String getOFFILLER46() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsph2al());
        tempByteBuffer1.flip();
        String temp45 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp45 + getCactupai().getAcsph2af();
    }

    public void setOFFILLER46(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsph2al(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsph2al(0);
        }
    }

    public String getAcsph2ac() {
        return getCactupai().getOFFILLER91().substring(0, 1);
    }

    public void setAcsph2ac(String source) {
        getCactupai().setOFFILLER91(
                StringUtils
                        .overlay(getCactupai().getOFFILLER91(), source, 0, 1));
    }

    public String getAcsph2ap() {
        return getCactupai().getOFFILLER91().substring(1, 2);
    }

    public void setAcsph2ap(String source) {
        getCactupai().setOFFILLER91(
                StringUtils
                        .overlay(getCactupai().getOFFILLER91(), source, 1, 2));
    }

    public String getAcsph2ah() {
        return getCactupai().getOFFILLER91().substring(2, 3);
    }

    public void setAcsph2ah(String source) {
        getCactupai().setOFFILLER91(
                StringUtils
                        .overlay(getCactupai().getOFFILLER91(), source, 2, 3));
    }

    public String getAcsph2av() {
        return getCactupai().getOFFILLER91().substring(3);
    }

    public void setAcsph2av(String source) {
        getCactupai().setOFFILLER91(
                StringUtils
                        .overlay(getCactupai().getOFFILLER91(), source, 3, 4));
    }

    public String getAcsph2ao() {
        return getCactupai().getAcsph2ai();
    }

    public void setAcsph2ao(String source) {
        getCactupai().setAcsph2ai(source);
    }

    public String getOFFILLER47() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsph2bl());
        tempByteBuffer1.flip();
        String temp46 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp46 + getCactupai().getAcsph2bf();
    }

    public void setOFFILLER47(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsph2bl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsph2bl(0);
        }
    }

    public String getAcsph2bc() {
        return getCactupai().getOFFILLER93().substring(0, 1);
    }

    public void setAcsph2bc(String source) {
        getCactupai().setOFFILLER93(
                StringUtils
                        .overlay(getCactupai().getOFFILLER93(), source, 0, 1));
    }

    public String getAcsph2bp() {
        return getCactupai().getOFFILLER93().substring(1, 2);
    }

    public void setAcsph2bp(String source) {
        getCactupai().setOFFILLER93(
                StringUtils
                        .overlay(getCactupai().getOFFILLER93(), source, 1, 2));
    }

    public String getAcsph2bh() {
        return getCactupai().getOFFILLER93().substring(2, 3);
    }

    public void setAcsph2bh(String source) {
        getCactupai().setOFFILLER93(
                StringUtils
                        .overlay(getCactupai().getOFFILLER93(), source, 2, 3));
    }

    public String getAcsph2bv() {
        return getCactupai().getOFFILLER93().substring(3);
    }

    public void setAcsph2bv(String source) {
        getCactupai().setOFFILLER93(
                StringUtils
                        .overlay(getCactupai().getOFFILLER93(), source, 3, 4));
    }

    public String getAcsph2bo() {
        return getCactupai().getAcsph2bi();
    }

    public void setAcsph2bo(String source) {
        getCactupai().setAcsph2bi(source);
    }

    public String getOFFILLER48() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcsph2cl());
        tempByteBuffer1.flip();
        String temp47 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp47 + getCactupai().getAcsph2cf();
    }

    public void setOFFILLER48(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcsph2cl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcsph2cl(0);
        }
    }

    public String getAcsph2cc() {
        return getCactupai().getOFFILLER95().substring(0, 1);
    }

    public void setAcsph2cc(String source) {
        getCactupai().setOFFILLER95(
                StringUtils
                        .overlay(getCactupai().getOFFILLER95(), source, 0, 1));
    }

    public String getAcsph2cp() {
        return getCactupai().getOFFILLER95().substring(1, 2);
    }

    public void setAcsph2cp(String source) {
        getCactupai().setOFFILLER95(
                StringUtils
                        .overlay(getCactupai().getOFFILLER95(), source, 1, 2));
    }

    public String getAcsph2ch() {
        return getCactupai().getOFFILLER95().substring(2, 3);
    }

    public void setAcsph2ch(String source) {
        getCactupai().setOFFILLER95(
                StringUtils
                        .overlay(getCactupai().getOFFILLER95(), source, 2, 3));
    }

    public String getAcsph2cv() {
        return getCactupai().getOFFILLER95().substring(3);
    }

    public void setAcsph2cv(String source) {
        getCactupai().setOFFILLER95(
                StringUtils
                        .overlay(getCactupai().getOFFILLER95(), source, 3, 4));
    }

    public String getAcsph2co() {
        return getCactupai().getAcsph2ci();
    }

    public void setAcsph2co(String source) {
        getCactupai().setAcsph2ci(source);
    }

    public String getOFFILLER49() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcseftcl());
        tempByteBuffer1.flip();
        String temp48 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp48 + getCactupai().getAcseftcf();
    }

    public void setOFFILLER49(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcseftcl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcseftcl(0);
        }
    }

    public String getAcseftcc() {
        return getCactupai().getOFFILLER97().substring(0, 1);
    }

    public void setAcseftcc(String source) {
        getCactupai().setOFFILLER97(
                StringUtils
                        .overlay(getCactupai().getOFFILLER97(), source, 0, 1));
    }

    public String getAcseftcp() {
        return getCactupai().getOFFILLER97().substring(1, 2);
    }

    public void setAcseftcp(String source) {
        getCactupai().setOFFILLER97(
                StringUtils
                        .overlay(getCactupai().getOFFILLER97(), source, 1, 2));
    }

    public String getAcseftch() {
        return getCactupai().getOFFILLER97().substring(2, 3);
    }

    public void setAcseftch(String source) {
        getCactupai().setOFFILLER97(
                StringUtils
                        .overlay(getCactupai().getOFFILLER97(), source, 2, 3));
    }

    public String getAcseftcv() {
        return getCactupai().getOFFILLER97().substring(3);
    }

    public void setAcseftcv(String source) {
        getCactupai().setOFFILLER97(
                StringUtils
                        .overlay(getCactupai().getOFFILLER97(), source, 3, 4));
    }

    public String getAcseftco() {
        return getCactupai().getAcseftci();
    }

    public void setAcseftco(String source) {
        getCactupai().setAcseftci(source);
    }

    public String getOFFILLER50() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getAcspflgl());
        tempByteBuffer1.flip();
        String temp49 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp49 + getCactupai().getAcspflgf();
    }

    public void setOFFILLER50(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setAcspflgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setAcspflgl(0);
        }
    }

    public String getAcspflgc() {
        return getCactupai().getOFFILLER99().substring(0, 1);
    }

    public void setAcspflgc(String source) {
        getCactupai().setOFFILLER99(
                StringUtils
                        .overlay(getCactupai().getOFFILLER99(), source, 0, 1));
    }

    public String getAcspflgp() {
        return getCactupai().getOFFILLER99().substring(1, 2);
    }

    public void setAcspflgp(String source) {
        getCactupai().setOFFILLER99(
                StringUtils
                        .overlay(getCactupai().getOFFILLER99(), source, 1, 2));
    }

    public String getAcspflgh() {
        return getCactupai().getOFFILLER99().substring(2, 3);
    }

    public void setAcspflgh(String source) {
        getCactupai().setOFFILLER99(
                StringUtils
                        .overlay(getCactupai().getOFFILLER99(), source, 2, 3));
    }

    public String getAcspflgv() {
        return getCactupai().getOFFILLER99().substring(3);
    }

    public void setAcspflgv(String source) {
        getCactupai().setOFFILLER99(
                StringUtils
                        .overlay(getCactupai().getOFFILLER99(), source, 3, 4));
    }

    public String getAcspflgo() {
        return getCactupai().getAcspflgi();
    }

    public void setAcspflgo(String source) {
        getCactupai().setAcspflgi(source);
    }

    public String getOFFILLER51() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getInfomsgl());
        tempByteBuffer1.flip();
        String temp50 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp50 + getCactupai().getInfomsgf();
    }

    public void setOFFILLER51(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setInfomsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setInfomsgl(0);
        }
    }

    public String getInfomsgc() {
        return getCactupai().getOFFILLER101().substring(0, 1);
    }

    public void setInfomsgc(String source) {
        getCactupai().setOFFILLER101(
                StringUtils.overlay(getCactupai().getOFFILLER101(), source, 0,
                        1));
    }

    public String getInfomsgp() {
        return getCactupai().getOFFILLER101().substring(1, 2);
    }

    public void setInfomsgp(String source) {
        getCactupai().setOFFILLER101(
                StringUtils.overlay(getCactupai().getOFFILLER101(), source, 1,
                        2));
    }

    public String getInfomsgh() {
        return getCactupai().getOFFILLER101().substring(2, 3);
    }

    public void setInfomsgh(String source) {
        getCactupai().setOFFILLER101(
                StringUtils.overlay(getCactupai().getOFFILLER101(), source, 2,
                        3));
    }

    public String getInfomsgv() {
        return getCactupai().getOFFILLER101().substring(3);
    }

    public void setInfomsgv(String source) {
        getCactupai().setOFFILLER101(
                StringUtils.overlay(getCactupai().getOFFILLER101(), source, 3,
                        4));
    }

    public String getInfomsgo() {
        return getCactupai().getInfomsgi();
    }

    public void setInfomsgo(String source) {
        getCactupai().setInfomsgi(source);
    }

    public String getOFFILLER52() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp51 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp51 + getCactupai().getErrmsgf();
    }

    public void setOFFILLER52(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCactupai().getOFFILLER103().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCactupai().setOFFILLER103(
                StringUtils.overlay(getCactupai().getOFFILLER103(), source, 0,
                        1));
    }

    public String getErrmsgp() {
        return getCactupai().getOFFILLER103().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCactupai().setOFFILLER103(
                StringUtils.overlay(getCactupai().getOFFILLER103(), source, 1,
                        2));
    }

    public String getErrmsgh() {
        return getCactupai().getOFFILLER103().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCactupai().setOFFILLER103(
                StringUtils.overlay(getCactupai().getOFFILLER103(), source, 2,
                        3));
    }

    public String getErrmsgv() {
        return getCactupai().getOFFILLER103().substring(3);
    }

    public void setErrmsgv(String source) {
        getCactupai().setOFFILLER103(
                StringUtils.overlay(getCactupai().getOFFILLER103(), source, 3,
                        4));
    }

    public String getErrmsgo() {
        return getCactupai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCactupai().setErrmsgi(source);
    }

    public String getOFFILLER53() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getFkeysl());
        tempByteBuffer1.flip();
        String temp52 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp52 + getCactupai().getFkeysf();
    }

    public void setOFFILLER53(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setFkeysl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setFkeysl(0);
        }
    }

    public String getFkeysc() {
        return getCactupai().getOFFILLER105().substring(0, 1);
    }

    public void setFkeysc(String source) {
        getCactupai().setOFFILLER105(
                StringUtils.overlay(getCactupai().getOFFILLER105(), source, 0,
                        1));
    }

    public String getFkeysp() {
        return getCactupai().getOFFILLER105().substring(1, 2);
    }

    public void setFkeysp(String source) {
        getCactupai().setOFFILLER105(
                StringUtils.overlay(getCactupai().getOFFILLER105(), source, 1,
                        2));
    }

    public String getFkeysh() {
        return getCactupai().getOFFILLER105().substring(2, 3);
    }

    public void setFkeysh(String source) {
        getCactupai().setOFFILLER105(
                StringUtils.overlay(getCactupai().getOFFILLER105(), source, 2,
                        3));
    }

    public String getFkeysv() {
        return getCactupai().getOFFILLER105().substring(3);
    }

    public void setFkeysv(String source) {
        getCactupai().setOFFILLER105(
                StringUtils.overlay(getCactupai().getOFFILLER105(), source, 3,
                        4));
    }

    public String getFkeyso() {
        return getCactupai().getFkeysi();
    }

    public void setFkeyso(String source) {
        getCactupai().setFkeysi(source);
    }

    public String getOFFILLER54() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getFkey05l());
        tempByteBuffer1.flip();
        String temp53 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp53 + getCactupai().getFkey05f();
    }

    public void setOFFILLER54(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setFkey05l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setFkey05l(0);
        }
    }

    public String getFkey05c() {
        return getCactupai().getOFFILLER107().substring(0, 1);
    }

    public void setFkey05c(String source) {
        getCactupai().setOFFILLER107(
                StringUtils.overlay(getCactupai().getOFFILLER107(), source, 0,
                        1));
    }

    public String getFkey05p() {
        return getCactupai().getOFFILLER107().substring(1, 2);
    }

    public void setFkey05p(String source) {
        getCactupai().setOFFILLER107(
                StringUtils.overlay(getCactupai().getOFFILLER107(), source, 1,
                        2));
    }

    public String getFkey05h() {
        return getCactupai().getOFFILLER107().substring(2, 3);
    }

    public void setFkey05h(String source) {
        getCactupai().setOFFILLER107(
                StringUtils.overlay(getCactupai().getOFFILLER107(), source, 2,
                        3));
    }

    public String getFkey05v() {
        return getCactupai().getOFFILLER107().substring(3);
    }

    public void setFkey05v(String source) {
        getCactupai().setOFFILLER107(
                StringUtils.overlay(getCactupai().getOFFILLER107(), source, 3,
                        4));
    }

    public String getFkey05o() {
        return getCactupai().getFkey05i();
    }

    public void setFkey05o(String source) {
        getCactupai().setFkey05i(source);
    }

    public String getOFFILLER55() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactupai().getFkey12l());
        tempByteBuffer1.flip();
        String temp54 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp54 + getCactupai().getFkey12f();
    }

    public void setOFFILLER55(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactupai().setFkey12l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactupai().setFkey12l(0);
        }
    }

    public String getFkey12c() {
        return getCactupai().getOFFILLER109().substring(0, 1);
    }

    public void setFkey12c(String source) {
        getCactupai().setOFFILLER109(
                StringUtils.overlay(getCactupai().getOFFILLER109(), source, 0,
                        1));
    }

    public String getFkey12p() {
        return getCactupai().getOFFILLER109().substring(1, 2);
    }

    public void setFkey12p(String source) {
        getCactupai().setOFFILLER109(
                StringUtils.overlay(getCactupai().getOFFILLER109(), source, 1,
                        2));
    }

    public String getFkey12h() {
        return getCactupai().getOFFILLER109().substring(2, 3);
    }

    public void setFkey12h(String source) {
        getCactupai().setOFFILLER109(
                StringUtils.overlay(getCactupai().getOFFILLER109(), source, 2,
                        3));
    }

    public String getFkey12v() {
        return getCactupai().getOFFILLER109().substring(3);
    }

    public void setFkey12v(String source) {
        getCactupai().setOFFILLER109(
                StringUtils.overlay(getCactupai().getOFFILLER109(), source, 3,
                        4));
    }

    public String getFkey12o() {
        return getCactupai().getFkey12i();
    }

    public void setFkey12o(String source) {
        getCactupai().setFkey12i(source);
    }

    // *Current Date                                                     
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter CoactupcWsDateTime wsDateTime = new CoactupcWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Common Messages                                                  
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter CoactupcCcdaCommonMessages ccdaCommonMessages = new CoactupcCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Abend Variables                                                  
    //       *COPY CSMSG02Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG02Y.cpy)
    // ***************************************************************** 
    // * CABENDD.CPY                                                   * 
    // *---------------------------------------------------------------* 
    // * Work areas for abend routine                                  * 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG02Y.cpy, LINE #22] ABEND-DATA (level: 1)
    private @Getter @Setter CoactupcAbendData abendData = new CoactupcAbendData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Signed on user data                                              
    //       *COPY CSUSR01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSUSR01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSUSR01Y.cpy, LINE #18] SEC-USER-DATA (level: 1)
    private @Getter @Setter CoactupcSecUserData secUserData = new CoactupcSecUserData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    // *Dataset layouts                                                  
    // *ACCT RECORD LAYOUT                                               
    //       *COPY CVACT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for  account entity (RECLN 300)               
    // ***************************************************************** 
    // [T-Up#INFO][CVACT01Y.cpy, LINE #5] ACCOUNT-RECORD (level: 1)
    private @Getter @Setter CoactupcAccountRecord accountRecord = new CoactupcAccountRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    // *CARD XREF LAYOUT                                                 
    //       *COPY CVACT03Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT03Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for card xref (RECLN 50)                      
    // ***************************************************************** 
    // [T-Up#INFO][CVACT03Y.cpy, LINE #5] CARD-XREF-RECORD (level: 1)
    private @Getter @Setter CoactupcCardXrefRecord cardXrefRecord = new CoactupcCardXrefRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // *CUSTOMER LAYOUT                                                  
    //       *COPY CVCUS01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCUS01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for Customer entity (RECLN 500)               
    // ***************************************************************** 
    // [T-Up#INFO][CVCUS01Y.cpy, LINE #5] CUSTOMER-RECORD (level: 1)
    private @Getter @Setter CoactupcCustomerRecord customerRecord = new CoactupcCustomerRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // ******************************************************************
    // *Application Commmarea Copybook                                   
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter CoactupcCarddemoCommarea carddemoCommarea = new CoactupcCarddemoCommarea();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT 
    // *                                                                 
    // [T-Up#INFO][COACTUPC.cbl, LINE #653] WS-THIS-PROGCOMMAREA (level: 1)
    private @Getter @Setter CoactupcWsThisProgcommarea wsThisProgcommarea = new CoactupcWsThisProgcommarea();
    // [T-Up#INFO][COACTUPC.cbl, LINE #851] WS-COMMAREA (level: 1)
    private @Getter String wsCommarea = StringUtils.repeat(' ', 2000);
    // [T-Up#INFO][COACTUPC.cbl, LINE #855] DFHCOMMAREA (level: 1)
    private @Getter @Setter CoactupcDfhcommarea dfhcommarea = new CoactupcDfhcommarea();

    public static @Setter(AccessLevel.PRIVATE) @Accessors(chain = true) class CoactupcCactupao {
        // [T-Up#INFO][COACTUP.CPY, LINE #345] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COACTUP.CPY, LINE #346] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #347] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #348] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #349] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #350] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #351] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #352] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #353] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #354] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #355] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #356] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #357] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COACTUP.CPY, LINE #358] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #359] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #360] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #361] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #362] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #363] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COACTUP.CPY, LINE #364] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #365] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #366] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #367] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #368] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #369] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COACTUP.CPY, LINE #370] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #371] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #372] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #373] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #374] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #375] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COACTUP.CPY, LINE #376] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #377] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #378] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #379] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #380] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #381] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COACTUP.CPY, LINE #382] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #383] ACCTSIDC (level: 2)
        private @Getter String acctsidc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #384] ACCTSIDP (level: 2)
        private @Getter String acctsidp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #385] ACCTSIDH (level: 2)
        private @Getter String acctsidh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #386] ACCTSIDV (level: 2)
        private @Getter String acctsidv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #387] ACCTSIDO (level: 2)
        private @Getter String acctsido = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COACTUP.CPY, LINE #388] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #389] ACSTTUSC (level: 2)
        private @Getter String acsttusc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #390] ACSTTUSP (level: 2)
        private @Getter String acsttusp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #391] ACSTTUSH (level: 2)
        private @Getter String acsttush = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #392] ACSTTUSV (level: 2)
        private @Getter String acsttusv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #393] ACSTTUSO (level: 2)
        private @Getter String acsttuso = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #394] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #395] OPNYEARC (level: 2)
        private @Getter String opnyearc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #396] OPNYEARP (level: 2)
        private @Getter String opnyearp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #397] OPNYEARH (level: 2)
        private @Getter String opnyearh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #398] OPNYEARV (level: 2)
        private @Getter String opnyearv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #399] OPNYEARO (level: 2)
        private @Getter String opnyearo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #400] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #401] OPNMONC (level: 2)
        private @Getter String opnmonc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #402] OPNMONP (level: 2)
        private @Getter String opnmonp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #403] OPNMONH (level: 2)
        private @Getter String opnmonh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #404] OPNMONV (level: 2)
        private @Getter String opnmonv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #405] OPNMONO (level: 2)
        private @Getter String opnmono = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #406] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #407] OPNDAYC (level: 2)
        private @Getter String opndayc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #408] OPNDAYP (level: 2)
        private @Getter String opndayp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #409] OPNDAYH (level: 2)
        private @Getter String opndayh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #410] OPNDAYV (level: 2)
        private @Getter String opndayv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #411] OPNDAYO (level: 2)
        private @Getter String opndayo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #412] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #413] ACRDLIMC (level: 2)
        private @Getter String acrdlimc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #414] ACRDLIMP (level: 2)
        private @Getter String acrdlimp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #415] ACRDLIMH (level: 2)
        private @Getter String acrdlimh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #416] ACRDLIMV (level: 2)
        private @Getter String acrdlimv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #417] ACRDLIMO (level: 2)
        private @Getter String acrdlimo = StringUtils.repeat(' ', 15);
        // [T-Up#INFO][COACTUP.CPY, LINE #418] FILLER (level: 2)
        private @Getter String OFFILLER14 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #419] EXPYEARC (level: 2)
        private @Getter String expyearc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #420] EXPYEARP (level: 2)
        private @Getter String expyearp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #421] EXPYEARH (level: 2)
        private @Getter String expyearh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #422] EXPYEARV (level: 2)
        private @Getter String expyearv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #423] EXPYEARO (level: 2)
        private @Getter String expyearo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #424] FILLER (level: 2)
        private @Getter String OFFILLER15 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #425] EXPMONC (level: 2)
        private @Getter String expmonc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #426] EXPMONP (level: 2)
        private @Getter String expmonp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #427] EXPMONH (level: 2)
        private @Getter String expmonh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #428] EXPMONV (level: 2)
        private @Getter String expmonv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #429] EXPMONO (level: 2)
        private @Getter String expmono = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #430] FILLER (level: 2)
        private @Getter String OFFILLER16 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #431] EXPDAYC (level: 2)
        private @Getter String expdayc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #432] EXPDAYP (level: 2)
        private @Getter String expdayp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #433] EXPDAYH (level: 2)
        private @Getter String expdayh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #434] EXPDAYV (level: 2)
        private @Getter String expdayv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #435] EXPDAYO (level: 2)
        private @Getter String expdayo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #436] FILLER (level: 2)
        private @Getter String OFFILLER17 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #437] ACSHLIMC (level: 2)
        private @Getter String acshlimc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #438] ACSHLIMP (level: 2)
        private @Getter String acshlimp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #439] ACSHLIMH (level: 2)
        private @Getter String acshlimh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #440] ACSHLIMV (level: 2)
        private @Getter String acshlimv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #441] ACSHLIMO (level: 2)
        private @Getter String acshlimo = StringUtils.repeat(' ', 15);
        // [T-Up#INFO][COACTUP.CPY, LINE #442] FILLER (level: 2)
        private @Getter String OFFILLER18 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #443] RISYEARC (level: 2)
        private @Getter String risyearc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #444] RISYEARP (level: 2)
        private @Getter String risyearp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #445] RISYEARH (level: 2)
        private @Getter String risyearh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #446] RISYEARV (level: 2)
        private @Getter String risyearv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #447] RISYEARO (level: 2)
        private @Getter String risyearo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #448] FILLER (level: 2)
        private @Getter String OFFILLER19 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #449] RISMONC (level: 2)
        private @Getter String rismonc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #450] RISMONP (level: 2)
        private @Getter String rismonp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #451] RISMONH (level: 2)
        private @Getter String rismonh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #452] RISMONV (level: 2)
        private @Getter String rismonv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #453] RISMONO (level: 2)
        private @Getter String rismono = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #454] FILLER (level: 2)
        private @Getter String OFFILLER20 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #455] RISDAYC (level: 2)
        private @Getter String risdayc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #456] RISDAYP (level: 2)
        private @Getter String risdayp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #457] RISDAYH (level: 2)
        private @Getter String risdayh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #458] RISDAYV (level: 2)
        private @Getter String risdayv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #459] RISDAYO (level: 2)
        private @Getter String risdayo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #460] FILLER (level: 2)
        private @Getter String OFFILLER21 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #461] ACURBALC (level: 2)
        private @Getter String acurbalc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #462] ACURBALP (level: 2)
        private @Getter String acurbalp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #463] ACURBALH (level: 2)
        private @Getter String acurbalh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #464] ACURBALV (level: 2)
        private @Getter String acurbalv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #465] ACURBALO (level: 2)
        private @Getter String acurbalo = StringUtils.repeat(' ', 15);
        // [T-Up#INFO][COACTUP.CPY, LINE #466] FILLER (level: 2)
        private @Getter String OFFILLER22 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #467] ACRCYCRC (level: 2)
        private @Getter String acrcycrc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #468] ACRCYCRP (level: 2)
        private @Getter String acrcycrp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #469] ACRCYCRH (level: 2)
        private @Getter String acrcycrh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #470] ACRCYCRV (level: 2)
        private @Getter String acrcycrv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #471] ACRCYCRO (level: 2)
        private @Getter String acrcycro = StringUtils.repeat(' ', 15);
        // [T-Up#INFO][COACTUP.CPY, LINE #472] FILLER (level: 2)
        private @Getter String OFFILLER23 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #473] AADDGRPC (level: 2)
        private @Getter String aaddgrpc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #474] AADDGRPP (level: 2)
        private @Getter String aaddgrpp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #475] AADDGRPH (level: 2)
        private @Getter String aaddgrph = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #476] AADDGRPV (level: 2)
        private @Getter String aaddgrpv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #477] AADDGRPO (level: 2)
        private @Getter String aaddgrpo = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTUP.CPY, LINE #478] FILLER (level: 2)
        private @Getter String OFFILLER24 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #479] ACRCYDBC (level: 2)
        private @Getter String acrcydbc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #480] ACRCYDBP (level: 2)
        private @Getter String acrcydbp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #481] ACRCYDBH (level: 2)
        private @Getter String acrcydbh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #482] ACRCYDBV (level: 2)
        private @Getter String acrcydbv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #483] ACRCYDBO (level: 2)
        private @Getter String acrcydbo = StringUtils.repeat(' ', 15);
        // [T-Up#INFO][COACTUP.CPY, LINE #484] FILLER (level: 2)
        private @Getter String OFFILLER25 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #485] ACSTNUMC (level: 2)
        private @Getter String acstnumc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #486] ACSTNUMP (level: 2)
        private @Getter String acstnump = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #487] ACSTNUMH (level: 2)
        private @Getter String acstnumh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #488] ACSTNUMV (level: 2)
        private @Getter String acstnumv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #489] ACSTNUMO (level: 2)
        private @Getter String acstnumo = StringUtils.repeat(' ', 9);
        // [T-Up#INFO][COACTUP.CPY, LINE #490] FILLER (level: 2)
        private @Getter String OFFILLER26 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #491] ACTSSN1C (level: 2)
        private @Getter String actssn1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #492] ACTSSN1P (level: 2)
        private @Getter String actssn1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #493] ACTSSN1H (level: 2)
        private @Getter String actssn1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #494] ACTSSN1V (level: 2)
        private @Getter String actssn1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #495] ACTSSN1O (level: 2)
        private @Getter String actssn1o = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #496] FILLER (level: 2)
        private @Getter String OFFILLER27 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #497] ACTSSN2C (level: 2)
        private @Getter String actssn2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #498] ACTSSN2P (level: 2)
        private @Getter String actssn2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #499] ACTSSN2H (level: 2)
        private @Getter String actssn2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #500] ACTSSN2V (level: 2)
        private @Getter String actssn2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #501] ACTSSN2O (level: 2)
        private @Getter String actssn2o = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #502] FILLER (level: 2)
        private @Getter String OFFILLER28 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #503] ACTSSN3C (level: 2)
        private @Getter String actssn3c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #504] ACTSSN3P (level: 2)
        private @Getter String actssn3p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #505] ACTSSN3H (level: 2)
        private @Getter String actssn3h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #506] ACTSSN3V (level: 2)
        private @Getter String actssn3v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #507] ACTSSN3O (level: 2)
        private @Getter String actssn3o = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #508] FILLER (level: 2)
        private @Getter String OFFILLER29 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #509] DOBYEARC (level: 2)
        private @Getter String dobyearc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #510] DOBYEARP (level: 2)
        private @Getter String dobyearp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #511] DOBYEARH (level: 2)
        private @Getter String dobyearh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #512] DOBYEARV (level: 2)
        private @Getter String dobyearv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #513] DOBYEARO (level: 2)
        private @Getter String dobyearo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #514] FILLER (level: 2)
        private @Getter String OFFILLER30 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #515] DOBMONC (level: 2)
        private @Getter String dobmonc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #516] DOBMONP (level: 2)
        private @Getter String dobmonp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #517] DOBMONH (level: 2)
        private @Getter String dobmonh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #518] DOBMONV (level: 2)
        private @Getter String dobmonv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #519] DOBMONO (level: 2)
        private @Getter String dobmono = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #520] FILLER (level: 2)
        private @Getter String OFFILLER31 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #521] DOBDAYC (level: 2)
        private @Getter String dobdayc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #522] DOBDAYP (level: 2)
        private @Getter String dobdayp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #523] DOBDAYH (level: 2)
        private @Getter String dobdayh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #524] DOBDAYV (level: 2)
        private @Getter String dobdayv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #525] DOBDAYO (level: 2)
        private @Getter String dobdayo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #526] FILLER (level: 2)
        private @Getter String OFFILLER32 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #527] ACSTFCOC (level: 2)
        private @Getter String acstfcoc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #528] ACSTFCOP (level: 2)
        private @Getter String acstfcop = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #529] ACSTFCOH (level: 2)
        private @Getter String acstfcoh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #530] ACSTFCOV (level: 2)
        private @Getter String acstfcov = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #531] ACSTFCOO (level: 2)
        private @Getter String acstfcoo = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #532] FILLER (level: 2)
        private @Getter String OFFILLER33 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #533] ACSFNAMC (level: 2)
        private @Getter String acsfnamc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #534] ACSFNAMP (level: 2)
        private @Getter String acsfnamp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #535] ACSFNAMH (level: 2)
        private @Getter String acsfnamh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #536] ACSFNAMV (level: 2)
        private @Getter String acsfnamv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #537] ACSFNAMO (level: 2)
        private @Getter String acsfnamo = StringUtils.repeat(' ', 25);
        // [T-Up#INFO][COACTUP.CPY, LINE #538] FILLER (level: 2)
        private @Getter String OFFILLER34 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #539] ACSMNAMC (level: 2)
        private @Getter String acsmnamc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #540] ACSMNAMP (level: 2)
        private @Getter String acsmnamp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #541] ACSMNAMH (level: 2)
        private @Getter String acsmnamh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #542] ACSMNAMV (level: 2)
        private @Getter String acsmnamv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #543] ACSMNAMO (level: 2)
        private @Getter String acsmnamo = StringUtils.repeat(' ', 25);
        // [T-Up#INFO][COACTUP.CPY, LINE #544] FILLER (level: 2)
        private @Getter String OFFILLER35 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #545] ACSLNAMC (level: 2)
        private @Getter String acslnamc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #546] ACSLNAMP (level: 2)
        private @Getter String acslnamp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #547] ACSLNAMH (level: 2)
        private @Getter String acslnamh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #548] ACSLNAMV (level: 2)
        private @Getter String acslnamv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #549] ACSLNAMO (level: 2)
        private @Getter String acslnamo = StringUtils.repeat(' ', 25);
        // [T-Up#INFO][COACTUP.CPY, LINE #550] FILLER (level: 2)
        private @Getter String OFFILLER36 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #551] ACSADL1C (level: 2)
        private @Getter String acsadl1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #552] ACSADL1P (level: 2)
        private @Getter String acsadl1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #553] ACSADL1H (level: 2)
        private @Getter String acsadl1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #554] ACSADL1V (level: 2)
        private @Getter String acsadl1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #555] ACSADL1O (level: 2)
        private @Getter String acsadl1o = StringUtils.repeat(' ', 50);
        // [T-Up#INFO][COACTUP.CPY, LINE #556] FILLER (level: 2)
        private @Getter String OFFILLER37 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #557] ACSSTTEC (level: 2)
        private @Getter String acssttec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #558] ACSSTTEP (level: 2)
        private @Getter String acssttep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #559] ACSSTTEH (level: 2)
        private @Getter String acsstteh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #560] ACSSTTEV (level: 2)
        private @Getter String acssttev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #561] ACSSTTEO (level: 2)
        private @Getter String acsstteo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTUP.CPY, LINE #562] FILLER (level: 2)
        private @Getter String OFFILLER38 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #563] ACSADL2C (level: 2)
        private @Getter String acsadl2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #564] ACSADL2P (level: 2)
        private @Getter String acsadl2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #565] ACSADL2H (level: 2)
        private @Getter String acsadl2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #566] ACSADL2V (level: 2)
        private @Getter String acsadl2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #567] ACSADL2O (level: 2)
        private @Getter String acsadl2o = StringUtils.repeat(' ', 50);
        // [T-Up#INFO][COACTUP.CPY, LINE #568] FILLER (level: 2)
        private @Getter String OFFILLER39 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #569] ACSZIPCC (level: 2)
        private @Getter String acszipcc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #570] ACSZIPCP (level: 2)
        private @Getter String acszipcp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #571] ACSZIPCH (level: 2)
        private @Getter String acszipch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #572] ACSZIPCV (level: 2)
        private @Getter String acszipcv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #573] ACSZIPCO (level: 2)
        private @Getter String acszipco = StringUtils.repeat(' ', 5);
        // [T-Up#INFO][COACTUP.CPY, LINE #574] FILLER (level: 2)
        private @Getter String OFFILLER40 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #575] ACSCITYC (level: 2)
        private @Getter String acscityc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #576] ACSCITYP (level: 2)
        private @Getter String acscityp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #577] ACSCITYH (level: 2)
        private @Getter String acscityh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #578] ACSCITYV (level: 2)
        private @Getter String acscityv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #579] ACSCITYO (level: 2)
        private @Getter String acscityo = StringUtils.repeat(' ', 50);
        // [T-Up#INFO][COACTUP.CPY, LINE #580] FILLER (level: 2)
        private @Getter String OFFILLER41 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #581] ACSCTRYC (level: 2)
        private @Getter String acsctryc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #582] ACSCTRYP (level: 2)
        private @Getter String acsctryp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #583] ACSCTRYH (level: 2)
        private @Getter String acsctryh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #584] ACSCTRYV (level: 2)
        private @Getter String acsctryv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #585] ACSCTRYO (level: 2)
        private @Getter String acsctryo = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #586] FILLER (level: 2)
        private @Getter String OFFILLER42 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #587] ACSPH1AC (level: 2)
        private @Getter String acsph1ac = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #588] ACSPH1AP (level: 2)
        private @Getter String acsph1ap = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #589] ACSPH1AH (level: 2)
        private @Getter String acsph1ah = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #590] ACSPH1AV (level: 2)
        private @Getter String acsph1av = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #591] ACSPH1AO (level: 2)
        private @Getter String acsph1ao = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #592] FILLER (level: 2)
        private @Getter String OFFILLER43 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #593] ACSPH1BC (level: 2)
        private @Getter String acsph1bc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #594] ACSPH1BP (level: 2)
        private @Getter String acsph1bp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #595] ACSPH1BH (level: 2)
        private @Getter String acsph1bh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #596] ACSPH1BV (level: 2)
        private @Getter String acsph1bv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #597] ACSPH1BO (level: 2)
        private @Getter String acsph1bo = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #598] FILLER (level: 2)
        private @Getter String OFFILLER44 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #599] ACSPH1CC (level: 2)
        private @Getter String acsph1cc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #600] ACSPH1CP (level: 2)
        private @Getter String acsph1cp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #601] ACSPH1CH (level: 2)
        private @Getter String acsph1ch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #602] ACSPH1CV (level: 2)
        private @Getter String acsph1cv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #603] ACSPH1CO (level: 2)
        private @Getter String acsph1co = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #604] FILLER (level: 2)
        private @Getter String OFFILLER45 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #605] ACSGOVTC (level: 2)
        private @Getter String acsgovtc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #606] ACSGOVTP (level: 2)
        private @Getter String acsgovtp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #607] ACSGOVTH (level: 2)
        private @Getter String acsgovth = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #608] ACSGOVTV (level: 2)
        private @Getter String acsgovtv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #609] ACSGOVTO (level: 2)
        private @Getter String acsgovto = StringUtils.repeat(' ', 20);
        // [T-Up#INFO][COACTUP.CPY, LINE #610] FILLER (level: 2)
        private @Getter String OFFILLER46 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #611] ACSPH2AC (level: 2)
        private @Getter String acsph2ac = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #612] ACSPH2AP (level: 2)
        private @Getter String acsph2ap = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #613] ACSPH2AH (level: 2)
        private @Getter String acsph2ah = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #614] ACSPH2AV (level: 2)
        private @Getter String acsph2av = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #615] ACSPH2AO (level: 2)
        private @Getter String acsph2ao = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #616] FILLER (level: 2)
        private @Getter String OFFILLER47 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #617] ACSPH2BC (level: 2)
        private @Getter String acsph2bc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #618] ACSPH2BP (level: 2)
        private @Getter String acsph2bp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #619] ACSPH2BH (level: 2)
        private @Getter String acsph2bh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #620] ACSPH2BV (level: 2)
        private @Getter String acsph2bv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #621] ACSPH2BO (level: 2)
        private @Getter String acsph2bo = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #622] FILLER (level: 2)
        private @Getter String OFFILLER48 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #623] ACSPH2CC (level: 2)
        private @Getter String acsph2cc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #624] ACSPH2CP (level: 2)
        private @Getter String acsph2cp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #625] ACSPH2CH (level: 2)
        private @Getter String acsph2ch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #626] ACSPH2CV (level: 2)
        private @Getter String acsph2cv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #627] ACSPH2CO (level: 2)
        private @Getter String acsph2co = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTUP.CPY, LINE #628] FILLER (level: 2)
        private @Getter String OFFILLER49 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #629] ACSEFTCC (level: 2)
        private @Getter String acseftcc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #630] ACSEFTCP (level: 2)
        private @Getter String acseftcp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #631] ACSEFTCH (level: 2)
        private @Getter String acseftch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #632] ACSEFTCV (level: 2)
        private @Getter String acseftcv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #633] ACSEFTCO (level: 2)
        private @Getter String acseftco = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTUP.CPY, LINE #634] FILLER (level: 2)
        private @Getter String OFFILLER50 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #635] ACSPFLGC (level: 2)
        private @Getter String acspflgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #636] ACSPFLGP (level: 2)
        private @Getter String acspflgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #637] ACSPFLGH (level: 2)
        private @Getter String acspflgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #638] ACSPFLGV (level: 2)
        private @Getter String acspflgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #639] ACSPFLGO (level: 2)
        private @Getter String acspflgo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #640] FILLER (level: 2)
        private @Getter String OFFILLER51 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #641] INFOMSGC (level: 2)
        private @Getter String infomsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #642] INFOMSGP (level: 2)
        private @Getter String infomsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #643] INFOMSGH (level: 2)
        private @Getter String infomsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #644] INFOMSGV (level: 2)
        private @Getter String infomsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #645] INFOMSGO (level: 2)
        private @Getter String infomsgo = StringUtils.repeat(' ', 45);
        // [T-Up#INFO][COACTUP.CPY, LINE #646] FILLER (level: 2)
        private @Getter String OFFILLER52 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #647] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #648] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #649] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #650] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #651] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);
        // [T-Up#INFO][COACTUP.CPY, LINE #652] FILLER (level: 2)
        private @Getter String OFFILLER53 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #653] FKEYSC (level: 2)
        private @Getter String fkeysc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #654] FKEYSP (level: 2)
        private @Getter String fkeysp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #655] FKEYSH (level: 2)
        private @Getter String fkeysh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #656] FKEYSV (level: 2)
        private @Getter String fkeysv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #657] FKEYSO (level: 2)
        private @Getter String fkeyso = StringUtils.repeat(' ', 21);
        // [T-Up#INFO][COACTUP.CPY, LINE #658] FILLER (level: 2)
        private @Getter String OFFILLER54 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #659] FKEY05C (level: 2)
        private @Getter String fkey05c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #660] FKEY05P (level: 2)
        private @Getter String fkey05p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #661] FKEY05H (level: 2)
        private @Getter String fkey05h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #662] FKEY05V (level: 2)
        private @Getter String fkey05v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #663] FKEY05O (level: 2)
        private @Getter String fkey05o = StringUtils.repeat(' ', 7);
        // [T-Up#INFO][COACTUP.CPY, LINE #664] FILLER (level: 2)
        private @Getter String OFFILLER55 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTUP.CPY, LINE #665] FKEY12C (level: 2)
        private @Getter String fkey12c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #666] FKEY12P (level: 2)
        private @Getter String fkey12p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #667] FKEY12H (level: 2)
        private @Getter String fkey12h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #668] FKEY12V (level: 2)
        private @Getter String fkey12v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTUP.CPY, LINE #669] FKEY12O (level: 2)
        private @Getter String fkey12o = StringUtils.repeat(' ', 10);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER9);
            sb.append(acsttusc);
            sb.append(acsttusp);
            sb.append(acsttush);
            sb.append(acsttusv);
            sb.append(acsttuso);
            sb.append(OFFILLER10);
            sb.append(opnyearc);
            sb.append(opnyearp);
            sb.append(opnyearh);
            sb.append(opnyearv);
            sb.append(opnyearo);
            sb.append(OFFILLER11);
            sb.append(opnmonc);
            sb.append(opnmonp);
            sb.append(opnmonh);
            sb.append(opnmonv);
            sb.append(opnmono);
            sb.append(OFFILLER12);
            sb.append(opndayc);
            sb.append(opndayp);
            sb.append(opndayh);
            sb.append(opndayv);
            sb.append(opndayo);
            sb.append(OFFILLER13);
            sb.append(acrdlimc);
            sb.append(acrdlimp);
            sb.append(acrdlimh);
            sb.append(acrdlimv);
            sb.append(acrdlimo);
            sb.append(OFFILLER14);
            sb.append(expyearc);
            sb.append(expyearp);
            sb.append(expyearh);
            sb.append(expyearv);
            sb.append(expyearo);
            sb.append(OFFILLER15);
            sb.append(expmonc);
            sb.append(expmonp);
            sb.append(expmonh);
            sb.append(expmonv);
            sb.append(expmono);
            sb.append(OFFILLER16);
            sb.append(expdayc);
            sb.append(expdayp);
            sb.append(expdayh);
            sb.append(expdayv);
            sb.append(expdayo);
            sb.append(OFFILLER17);
            sb.append(acshlimc);
            sb.append(acshlimp);
            sb.append(acshlimh);
            sb.append(acshlimv);
            sb.append(acshlimo);
            sb.append(OFFILLER18);
            sb.append(risyearc);
            sb.append(risyearp);
            sb.append(risyearh);
            sb.append(risyearv);
            sb.append(risyearo);
            sb.append(OFFILLER19);
            sb.append(rismonc);
            sb.append(rismonp);
            sb.append(rismonh);
            sb.append(rismonv);
            sb.append(rismono);
            sb.append(OFFILLER20);
            sb.append(risdayc);
            sb.append(risdayp);
            sb.append(risdayh);
            sb.append(risdayv);
            sb.append(risdayo);
            sb.append(OFFILLER21);
            sb.append(acurbalc);
            sb.append(acurbalp);
            sb.append(acurbalh);
            sb.append(acurbalv);
            sb.append(acurbalo);
            sb.append(OFFILLER22);
            sb.append(acrcycrc);
            sb.append(acrcycrp);
            sb.append(acrcycrh);
            sb.append(acrcycrv);
            sb.append(acrcycro);
            sb.append(OFFILLER23);
            sb.append(aaddgrpc);
            sb.append(aaddgrpp);
            sb.append(aaddgrph);
            sb.append(aaddgrpv);
            sb.append(aaddgrpo);
            sb.append(OFFILLER24);
            sb.append(acrcydbc);
            sb.append(acrcydbp);
            sb.append(acrcydbh);
            sb.append(acrcydbv);
            sb.append(acrcydbo);
            sb.append(OFFILLER25);
            sb.append(acstnumc);
            sb.append(acstnump);
            sb.append(acstnumh);
            sb.append(acstnumv);
            sb.append(acstnumo);
            sb.append(OFFILLER26);
            sb.append(actssn1c);
            sb.append(actssn1p);
            sb.append(actssn1h);
            sb.append(actssn1v);
            sb.append(actssn1o);
            sb.append(OFFILLER27);
            sb.append(actssn2c);
            sb.append(actssn2p);
            sb.append(actssn2h);
            sb.append(actssn2v);
            sb.append(actssn2o);
            sb.append(OFFILLER28);
            sb.append(actssn3c);
            sb.append(actssn3p);
            sb.append(actssn3h);
            sb.append(actssn3v);
            sb.append(actssn3o);
            sb.append(OFFILLER29);
            sb.append(dobyearc);
            sb.append(dobyearp);
            sb.append(dobyearh);
            sb.append(dobyearv);
            sb.append(dobyearo);
            sb.append(OFFILLER30);
            sb.append(dobmonc);
            sb.append(dobmonp);
            sb.append(dobmonh);
            sb.append(dobmonv);
            sb.append(dobmono);
            sb.append(OFFILLER31);
            sb.append(dobdayc);
            sb.append(dobdayp);
            sb.append(dobdayh);
            sb.append(dobdayv);
            sb.append(dobdayo);
            sb.append(OFFILLER32);
            sb.append(acstfcoc);
            sb.append(acstfcop);
            sb.append(acstfcoh);
            sb.append(acstfcov);
            sb.append(acstfcoo);
            sb.append(OFFILLER33);
            sb.append(acsfnamc);
            sb.append(acsfnamp);
            sb.append(acsfnamh);
            sb.append(acsfnamv);
            sb.append(acsfnamo);
            sb.append(OFFILLER34);
            sb.append(acsmnamc);
            sb.append(acsmnamp);
            sb.append(acsmnamh);
            sb.append(acsmnamv);
            sb.append(acsmnamo);
            sb.append(OFFILLER35);
            sb.append(acslnamc);
            sb.append(acslnamp);
            sb.append(acslnamh);
            sb.append(acslnamv);
            sb.append(acslnamo);
            sb.append(OFFILLER36);
            sb.append(acsadl1c);
            sb.append(acsadl1p);
            sb.append(acsadl1h);
            sb.append(acsadl1v);
            sb.append(acsadl1o);
            sb.append(OFFILLER37);
            sb.append(acssttec);
            sb.append(acssttep);
            sb.append(acsstteh);
            sb.append(acssttev);
            sb.append(acsstteo);
            sb.append(OFFILLER38);
            sb.append(acsadl2c);
            sb.append(acsadl2p);
            sb.append(acsadl2h);
            sb.append(acsadl2v);
            sb.append(acsadl2o);
            sb.append(OFFILLER39);
            sb.append(acszipcc);
            sb.append(acszipcp);
            sb.append(acszipch);
            sb.append(acszipcv);
            sb.append(acszipco);
            sb.append(OFFILLER40);
            sb.append(acscityc);
            sb.append(acscityp);
            sb.append(acscityh);
            sb.append(acscityv);
            sb.append(acscityo);
            sb.append(OFFILLER41);
            sb.append(acsctryc);
            sb.append(acsctryp);
            sb.append(acsctryh);
            sb.append(acsctryv);
            sb.append(acsctryo);
            sb.append(OFFILLER42);
            sb.append(acsph1ac);
            sb.append(acsph1ap);
            sb.append(acsph1ah);
            sb.append(acsph1av);
            sb.append(acsph1ao);
            sb.append(OFFILLER43);
            sb.append(acsph1bc);
            sb.append(acsph1bp);
            sb.append(acsph1bh);
            sb.append(acsph1bv);
            sb.append(acsph1bo);
            sb.append(OFFILLER44);
            sb.append(acsph1cc);
            sb.append(acsph1cp);
            sb.append(acsph1ch);
            sb.append(acsph1cv);
            sb.append(acsph1co);
            sb.append(OFFILLER45);
            sb.append(acsgovtc);
            sb.append(acsgovtp);
            sb.append(acsgovth);
            sb.append(acsgovtv);
            sb.append(acsgovto);
            sb.append(OFFILLER46);
            sb.append(acsph2ac);
            sb.append(acsph2ap);
            sb.append(acsph2ah);
            sb.append(acsph2av);
            sb.append(acsph2ao);
            sb.append(OFFILLER47);
            sb.append(acsph2bc);
            sb.append(acsph2bp);
            sb.append(acsph2bh);
            sb.append(acsph2bv);
            sb.append(acsph2bo);
            sb.append(OFFILLER48);
            sb.append(acsph2cc);
            sb.append(acsph2cp);
            sb.append(acsph2ch);
            sb.append(acsph2cv);
            sb.append(acsph2co);
            sb.append(OFFILLER49);
            sb.append(acseftcc);
            sb.append(acseftcp);
            sb.append(acseftch);
            sb.append(acseftcv);
            sb.append(acseftco);
            sb.append(OFFILLER50);
            sb.append(acspflgc);
            sb.append(acspflgp);
            sb.append(acspflgh);
            sb.append(acspflgv);
            sb.append(acspflgo);
            sb.append(OFFILLER51);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER52);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            sb.append(OFFILLER53);
            sb.append(fkeysc);
            sb.append(fkeysp);
            sb.append(fkeysh);
            sb.append(fkeysv);
            sb.append(fkeyso);
            sb.append(OFFILLER54);
            sb.append(fkey05c);
            sb.append(fkey05p);
            sb.append(fkey05h);
            sb.append(fkey05v);
            sb.append(fkey05o);
            sb.append(OFFILLER55);
            sb.append(fkey12c);
            sb.append(fkey12p);
            sb.append(fkey12h);
            sb.append(fkey12v);
            sb.append(fkey12o);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER9);
            sb.append(acsttusc);
            sb.append(acsttusp);
            sb.append(acsttush);
            sb.append(acsttusv);
            sb.append(acsttuso);
            sb.append(OFFILLER10);
            sb.append(opnyearc);
            sb.append(opnyearp);
            sb.append(opnyearh);
            sb.append(opnyearv);
            sb.append(opnyearo);
            sb.append(OFFILLER11);
            sb.append(opnmonc);
            sb.append(opnmonp);
            sb.append(opnmonh);
            sb.append(opnmonv);
            sb.append(opnmono);
            sb.append(OFFILLER12);
            sb.append(opndayc);
            sb.append(opndayp);
            sb.append(opndayh);
            sb.append(opndayv);
            sb.append(opndayo);
            sb.append(OFFILLER13);
            sb.append(acrdlimc);
            sb.append(acrdlimp);
            sb.append(acrdlimh);
            sb.append(acrdlimv);
            sb.append(acrdlimo);
            sb.append(OFFILLER14);
            sb.append(expyearc);
            sb.append(expyearp);
            sb.append(expyearh);
            sb.append(expyearv);
            sb.append(expyearo);
            sb.append(OFFILLER15);
            sb.append(expmonc);
            sb.append(expmonp);
            sb.append(expmonh);
            sb.append(expmonv);
            sb.append(expmono);
            sb.append(OFFILLER16);
            sb.append(expdayc);
            sb.append(expdayp);
            sb.append(expdayh);
            sb.append(expdayv);
            sb.append(expdayo);
            sb.append(OFFILLER17);
            sb.append(acshlimc);
            sb.append(acshlimp);
            sb.append(acshlimh);
            sb.append(acshlimv);
            sb.append(acshlimo);
            sb.append(OFFILLER18);
            sb.append(risyearc);
            sb.append(risyearp);
            sb.append(risyearh);
            sb.append(risyearv);
            sb.append(risyearo);
            sb.append(OFFILLER19);
            sb.append(rismonc);
            sb.append(rismonp);
            sb.append(rismonh);
            sb.append(rismonv);
            sb.append(rismono);
            sb.append(OFFILLER20);
            sb.append(risdayc);
            sb.append(risdayp);
            sb.append(risdayh);
            sb.append(risdayv);
            sb.append(risdayo);
            sb.append(OFFILLER21);
            sb.append(acurbalc);
            sb.append(acurbalp);
            sb.append(acurbalh);
            sb.append(acurbalv);
            sb.append(acurbalo);
            sb.append(OFFILLER22);
            sb.append(acrcycrc);
            sb.append(acrcycrp);
            sb.append(acrcycrh);
            sb.append(acrcycrv);
            sb.append(acrcycro);
            sb.append(OFFILLER23);
            sb.append(aaddgrpc);
            sb.append(aaddgrpp);
            sb.append(aaddgrph);
            sb.append(aaddgrpv);
            sb.append(aaddgrpo);
            sb.append(OFFILLER24);
            sb.append(acrcydbc);
            sb.append(acrcydbp);
            sb.append(acrcydbh);
            sb.append(acrcydbv);
            sb.append(acrcydbo);
            sb.append(OFFILLER25);
            sb.append(acstnumc);
            sb.append(acstnump);
            sb.append(acstnumh);
            sb.append(acstnumv);
            sb.append(acstnumo);
            sb.append(OFFILLER26);
            sb.append(actssn1c);
            sb.append(actssn1p);
            sb.append(actssn1h);
            sb.append(actssn1v);
            sb.append(actssn1o);
            sb.append(OFFILLER27);
            sb.append(actssn2c);
            sb.append(actssn2p);
            sb.append(actssn2h);
            sb.append(actssn2v);
            sb.append(actssn2o);
            sb.append(OFFILLER28);
            sb.append(actssn3c);
            sb.append(actssn3p);
            sb.append(actssn3h);
            sb.append(actssn3v);
            sb.append(actssn3o);
            sb.append(OFFILLER29);
            sb.append(dobyearc);
            sb.append(dobyearp);
            sb.append(dobyearh);
            sb.append(dobyearv);
            sb.append(dobyearo);
            sb.append(OFFILLER30);
            sb.append(dobmonc);
            sb.append(dobmonp);
            sb.append(dobmonh);
            sb.append(dobmonv);
            sb.append(dobmono);
            sb.append(OFFILLER31);
            sb.append(dobdayc);
            sb.append(dobdayp);
            sb.append(dobdayh);
            sb.append(dobdayv);
            sb.append(dobdayo);
            sb.append(OFFILLER32);
            sb.append(acstfcoc);
            sb.append(acstfcop);
            sb.append(acstfcoh);
            sb.append(acstfcov);
            sb.append(acstfcoo);
            sb.append(OFFILLER33);
            sb.append(acsfnamc);
            sb.append(acsfnamp);
            sb.append(acsfnamh);
            sb.append(acsfnamv);
            sb.append(acsfnamo);
            sb.append(OFFILLER34);
            sb.append(acsmnamc);
            sb.append(acsmnamp);
            sb.append(acsmnamh);
            sb.append(acsmnamv);
            sb.append(acsmnamo);
            sb.append(OFFILLER35);
            sb.append(acslnamc);
            sb.append(acslnamp);
            sb.append(acslnamh);
            sb.append(acslnamv);
            sb.append(acslnamo);
            sb.append(OFFILLER36);
            sb.append(acsadl1c);
            sb.append(acsadl1p);
            sb.append(acsadl1h);
            sb.append(acsadl1v);
            sb.append(acsadl1o);
            sb.append(OFFILLER37);
            sb.append(acssttec);
            sb.append(acssttep);
            sb.append(acsstteh);
            sb.append(acssttev);
            sb.append(acsstteo);
            sb.append(OFFILLER38);
            sb.append(acsadl2c);
            sb.append(acsadl2p);
            sb.append(acsadl2h);
            sb.append(acsadl2v);
            sb.append(acsadl2o);
            sb.append(OFFILLER39);
            sb.append(acszipcc);
            sb.append(acszipcp);
            sb.append(acszipch);
            sb.append(acszipcv);
            sb.append(acszipco);
            sb.append(OFFILLER40);
            sb.append(acscityc);
            sb.append(acscityp);
            sb.append(acscityh);
            sb.append(acscityv);
            sb.append(acscityo);
            sb.append(OFFILLER41);
            sb.append(acsctryc);
            sb.append(acsctryp);
            sb.append(acsctryh);
            sb.append(acsctryv);
            sb.append(acsctryo);
            sb.append(OFFILLER42);
            sb.append(acsph1ac);
            sb.append(acsph1ap);
            sb.append(acsph1ah);
            sb.append(acsph1av);
            sb.append(acsph1ao);
            sb.append(OFFILLER43);
            sb.append(acsph1bc);
            sb.append(acsph1bp);
            sb.append(acsph1bh);
            sb.append(acsph1bv);
            sb.append(acsph1bo);
            sb.append(OFFILLER44);
            sb.append(acsph1cc);
            sb.append(acsph1cp);
            sb.append(acsph1ch);
            sb.append(acsph1cv);
            sb.append(acsph1co);
            sb.append(OFFILLER45);
            sb.append(acsgovtc);
            sb.append(acsgovtp);
            sb.append(acsgovth);
            sb.append(acsgovtv);
            sb.append(acsgovto);
            sb.append(OFFILLER46);
            sb.append(acsph2ac);
            sb.append(acsph2ap);
            sb.append(acsph2ah);
            sb.append(acsph2av);
            sb.append(acsph2ao);
            sb.append(OFFILLER47);
            sb.append(acsph2bc);
            sb.append(acsph2bp);
            sb.append(acsph2bh);
            sb.append(acsph2bv);
            sb.append(acsph2bo);
            sb.append(OFFILLER48);
            sb.append(acsph2cc);
            sb.append(acsph2cp);
            sb.append(acsph2ch);
            sb.append(acsph2cv);
            sb.append(acsph2co);
            sb.append(OFFILLER49);
            sb.append(acseftcc);
            sb.append(acseftcp);
            sb.append(acseftch);
            sb.append(acseftcv);
            sb.append(acseftco);
            sb.append(OFFILLER50);
            sb.append(acspflgc);
            sb.append(acspflgp);
            sb.append(acspflgh);
            sb.append(acspflgv);
            sb.append(acspflgo);
            sb.append(OFFILLER51);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER52);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            sb.append(OFFILLER53);
            sb.append(fkeysc);
            sb.append(fkeysp);
            sb.append(fkeysh);
            sb.append(fkeysv);
            sb.append(fkeyso);
            sb.append(OFFILLER54);
            sb.append(fkey05c);
            sb.append(fkey05p);
            sb.append(fkey05h);
            sb.append(fkey05v);
            sb.append(fkey05o);
            sb.append(OFFILLER55);
            sb.append(fkey12c);
            sb.append(fkey12p);
            sb.append(fkey12h);
            sb.append(fkey12v);
            sb.append(fkey12o);
            return sb.toString();
        }
    }

    public void setWsUsPhoneAreaCodeToEdit(String source) {
        wsUsPhoneAreaCodeToEdit = StringUtils.truncate(
                StringUtils.rightPad(source, 3), 3);
    }

    public void setUsStateCodeToEdit(String source) {
        usStateCodeToEdit = StringUtils.truncate(
                StringUtils.rightPad(source, 2), 2);
    }

    public void setLitAllAlphaFrom(String source) {
        litAllAlphaFrom = StringUtils.truncate(
                StringUtils.rightPad(source, 52), 52);
    }

    public void setLitAllAlphanumFrom(String source) {
        litAllAlphanumFrom = StringUtils.truncate(
                StringUtils.rightPad(source, 62), 62);
    }

    public void setLitAllNumFrom(String source) {
        litAllNumFrom = StringUtils.truncate(StringUtils.rightPad(source, 10),
                10);
    }

    public void setLitAlphaSpacesTo(String source) {
        litAlphaSpacesTo = StringUtils.truncate(
                StringUtils.rightPad(source, 52), 52);
    }

    public void setLitAlphanumSpacesTo(String source) {
        litAlphanumSpacesTo = StringUtils.truncate(
                StringUtils.rightPad(source, 62), 62);
    }

    public void setLitNumSpacesTo(String source) {
        litNumSpacesTo = StringUtils.truncate(StringUtils.rightPad(source, 10),
                10);
    }

    public void setWsCommarea(String source) {
        wsCommarea = StringUtils.truncate(StringUtils.rightPad(source, 2000),
                2000);
    }
}
