package aws.carddemo.variable.group;

import com.tmax.openframe.DataConverter;
import com.tmax.openframe.runtime.cobol.PictureFormatter;
import java.math.*;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:55 UTC</p>
 */
public @AllArgsConstructor @NoArgsConstructor class Cbact04cTranCatBalRecord {
    // [T-Up#INFO][CVTRA01Y.cpy, LINE #6] TRAN-CAT-KEY (level: 5)
    private @Getter @Setter Cbact04cTranCatKey tranCatKey = new Cbact04cTranCatKey();
    // [T-Up#INFO][CVTRA01Y.cpy, LINE #10] TRAN-CAT-BAL (level: 5)
    private @Getter BigDecimal tranCatBal = BigDecimal.ZERO;
    // [T-Up#INFO][CVTRA01Y.cpy, LINE #11] FILLER (level: 5)
    private @Getter String OFFILLER1 = StringUtils.repeat(' ', 22);

    public void setTranCatBal(BigDecimal source) {
        tranCatBal = source.setScale(2, RoundingMode.DOWN);
    }

    public void setOFFILLER1(String source) {
        OFFILLER1 = StringUtils.truncate(StringUtils.rightPad(source, 22), 22);
    }

    public void set(String source) {
        source = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
        tranCatKey.set(source.substring(0, 17));
        try {
            tranCatBal = DataConverter.convZonedStringToBigDecimal(
                    source.substring(17, 28), 11, 2);
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            tranCatBal = BigDecimal.ZERO;
        }
        OFFILLER1 = source.substring(28, 50);
    }

    public String get() {
        StringBuilder sb = new StringBuilder();
        sb.append(tranCatKey.get());
        sb.append(DataConverter.convZonedBigDecimalToString(tranCatBal, 11, 2));
        sb.append(OFFILLER1);
        return sb.toString();
    }

    public void set(Cbact04cFdTranCatBalRecord source) {
        tranCatKey.setTrancatAcctId(source.getFdTranCatKey()
                .getFdTrancatAcctId());
        tranCatKey.setTrancatTypeCd(source.getFdTranCatKey()
                .getFdTrancatTypeCd());
        tranCatKey.setTrancatCd(source.getFdTranCatKey().getFdTrancatCd());
        tranCatBal = DataConverter.convZonedStringToBigDecimal(source
                .getFdFdTranCatData().substring(0, 11), 11, 2);
        OFFILLER1 = source.getFdFdTranCatData().substring(11);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getTranCatKey().toString());
        sb.append(PictureFormatter.decimalFormatWithSign(tranCatBal,
                "000000000.00"));
        sb.append(OFFILLER1);
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor class Cbact04cTranCatKey {
        // [T-Up#INFO][CVTRA01Y.cpy, LINE #7] TRANCAT-ACCT-ID (level: 10)
        private @Getter @Setter long trancatAcctId;
        // [T-Up#INFO][CVTRA01Y.cpy, LINE #8] TRANCAT-TYPE-CD (level: 10)
        private @Getter String trancatTypeCd = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CVTRA01Y.cpy, LINE #9] TRANCAT-CD (level: 10)
        private @Getter @Setter int trancatCd;

        public void setTrancatTypeCd(String source) {
            trancatTypeCd = StringUtils.truncate(
                    StringUtils.rightPad(source, 2), 2);
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 17), 17);
            try {
                trancatAcctId = DataConverter.convZonedStringToLong(
                        source.substring(0, 11), 11);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                trancatAcctId = 0;
            }
            trancatTypeCd = source.substring(11, 13);
            try {
                trancatCd = (int) DataConverter.convZonedStringToLong(
                        source.substring(13, 17), 4);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                trancatCd = 0;
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(DataConverter.convZonedLongToString(trancatAcctId, 11));
            sb.append(trancatTypeCd);
            sb.append(DataConverter.convZonedLongToString(trancatCd, 4));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(PictureFormatter.intFormatWithoutSign(trancatAcctId,
                    "00000000000"));
            sb.append(getTrancatTypeCd());
            sb.append(PictureFormatter.intFormatWithoutSign((long) trancatCd,
                    "0000"));
            return sb.toString();
        }
    }
}
