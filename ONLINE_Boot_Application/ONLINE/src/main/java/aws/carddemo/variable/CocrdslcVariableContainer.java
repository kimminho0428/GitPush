package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:42 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class CocrdslcVariableContainer {
    // [T-Up#INFO][COCRDSLC.cbl, LINE #36] WS-MISC-STORAGE (level: 1)
    private @Getter @Setter CocrdslcWsMiscStorage wsMiscStorage = new CocrdslcWsMiscStorage();
    // ******************************************************************
    // *      Literals and Constants                                     
    // ******************************************************************
    // [T-Up#INFO][COCRDSLC.cbl, LINE #162] WS-LITERALS (level: 1)
    private @Getter @Setter CocrdslcWsLiterals wsLiterals = new CocrdslcWsLiterals();
    // ******************************************************************
    // *Other common working storage Variables                           
    // ******************************************************************
    //       *COPY CVCRD01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCRD01Y.cpy)
    // [T-Up#INFO][CVCRD01Y.cpy, LINE #2] CC-WORK-AREAS (level: 1)
    private @Getter @Setter CocrdslcCcWorkAreas ccWorkAreas = new CocrdslcCcWorkAreas();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // ******************************************************************
    // *Application Commmarea Copybook                                   
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter CocrdslcCarddemoCommarea carddemoCommarea = new CocrdslcCarddemoCommarea();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT 
    // *                                                                 
    // [T-Up#INFO][COCRDSLC.cbl, LINE #200] WS-THIS-PROGCOMMAREA (level: 1)
    private @Getter @Setter CocrdslcWsThisProgcommarea wsThisProgcommarea = new CocrdslcWsThisProgcommarea();
    // [T-Up#INFO][COCRDSLC.cbl, LINE #205] WS-COMMAREA (level: 1)
    private @Getter String wsCommarea = StringUtils.repeat(' ', 2000);
    // *IBM SUPPLIED COPYBOOKS                                           
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter CocrdslcDfhbmsca dfhbmsca = new CocrdslcDfhbmsca();
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter CocrdslcDfhaid dfhaid = new CocrdslcDfhaid();
    // *COMMON COPYBOOKS                                                 
    // *Screen Titles                                                    
    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter CocrdslcCcdaScreenTitle ccdaScreenTitle = new CocrdslcCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Credit Card Search Screen Layout                                 
    //       *COPY COCRDSL.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCRDSL.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCRDSL.CPY, LINE #18] CCRDSLAI (level: 1)
    private @Getter @Setter CocrdslcCcrdslai ccrdslai = new CocrdslcCcrdslai();

    public CocrdslcCcrdslao getCcrdslao() {
        return CocrdslcCcrdslao.builder().OFFILLER1(getOFFILLER1())
                .OFFILLER2(getOFFILLER2()).trnnamec(getTrnnamec())
                .trnnamep(getTrnnamep()).trnnameh(getTrnnameh())
                .trnnamev(getTrnnamev()).trnnameo(getTrnnameo())
                .OFFILLER3(getOFFILLER3()).title01c(getTitle01c())
                .title01p(getTitle01p()).title01h(getTitle01h())
                .title01v(getTitle01v()).title01o(getTitle01o())
                .OFFILLER4(getOFFILLER4()).curdatec(getCurdatec())
                .curdatep(getCurdatep()).curdateh(getCurdateh())
                .curdatev(getCurdatev()).curdateo(getCurdateo())
                .OFFILLER5(getOFFILLER5()).pgmnamec(getPgmnamec())
                .pgmnamep(getPgmnamep()).pgmnameh(getPgmnameh())
                .pgmnamev(getPgmnamev()).pgmnameo(getPgmnameo())
                .OFFILLER6(getOFFILLER6()).title02c(getTitle02c())
                .title02p(getTitle02p()).title02h(getTitle02h())
                .title02v(getTitle02v()).title02o(getTitle02o())
                .OFFILLER7(getOFFILLER7()).curtimec(getCurtimec())
                .curtimep(getCurtimep()).curtimeh(getCurtimeh())
                .curtimev(getCurtimev()).curtimeo(getCurtimeo())
                .OFFILLER8(getOFFILLER8()).acctsidc(getAcctsidc())
                .acctsidp(getAcctsidp()).acctsidh(getAcctsidh())
                .acctsidv(getAcctsidv()).acctsido(getAcctsido())
                .OFFILLER9(getOFFILLER9()).cardsidc(getCardsidc())
                .cardsidp(getCardsidp()).cardsidh(getCardsidh())
                .cardsidv(getCardsidv()).cardsido(getCardsido())
                .OFFILLER10(getOFFILLER10()).crdnamec(getCrdnamec())
                .crdnamep(getCrdnamep()).crdnameh(getCrdnameh())
                .crdnamev(getCrdnamev()).crdnameo(getCrdnameo())
                .OFFILLER11(getOFFILLER11()).crdstcdc(getCrdstcdc())
                .crdstcdp(getCrdstcdp()).crdstcdh(getCrdstcdh())
                .crdstcdv(getCrdstcdv()).crdstcdo(getCrdstcdo())
                .OFFILLER12(getOFFILLER12()).expmonc(getExpmonc())
                .expmonp(getExpmonp()).expmonh(getExpmonh())
                .expmonv(getExpmonv()).expmono(getExpmono())
                .OFFILLER13(getOFFILLER13()).expyearc(getExpyearc())
                .expyearp(getExpyearp()).expyearh(getExpyearh())
                .expyearv(getExpyearv()).expyearo(getExpyearo())
                .OFFILLER14(getOFFILLER14()).infomsgc(getInfomsgc())
                .infomsgp(getInfomsgp()).infomsgh(getInfomsgh())
                .infomsgv(getInfomsgv()).infomsgo(getInfomsgo())
                .OFFILLER15(getOFFILLER15()).errmsgc(getErrmsgc())
                .errmsgp(getErrmsgp()).errmsgh(getErrmsgh())
                .errmsgv(getErrmsgv()).errmsgo(getErrmsgo())
                .OFFILLER16(getOFFILLER16()).fkeysc(getFkeysc())
                .fkeysp(getFkeysp()).fkeysh(getFkeysh()).fkeysv(getFkeysv())
                .fkeyso(getFkeyso()).build();
    }

    public void setCcrdslao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setAcctsidc(source.substring(165, 166));
        setAcctsidp(source.substring(166, 167));
        setAcctsidh(source.substring(167, 168));
        setAcctsidv(source.substring(168, 169));
        setAcctsido(source.substring(169, 180));
        setOFFILLER9(source.substring(180, 183));
        setCardsidc(source.substring(183, 184));
        setCardsidp(source.substring(184, 185));
        setCardsidh(source.substring(185, 186));
        setCardsidv(source.substring(186, 187));
        setCardsido(source.substring(187, 203));
        setOFFILLER10(source.substring(203, 206));
        setCrdnamec(source.substring(206, 207));
        setCrdnamep(source.substring(207, 208));
        setCrdnameh(source.substring(208, 209));
        setCrdnamev(source.substring(209, 210));
        setCrdnameo(source.substring(210, 260));
        setOFFILLER11(source.substring(260, 263));
        setCrdstcdc(source.substring(263, 264));
        setCrdstcdp(source.substring(264, 265));
        setCrdstcdh(source.substring(265, 266));
        setCrdstcdv(source.substring(266, 267));
        setCrdstcdo(source.substring(267, 268));
        setOFFILLER12(source.substring(268, 271));
        setExpmonc(source.substring(271, 272));
        setExpmonp(source.substring(272, 273));
        setExpmonh(source.substring(273, 274));
        setExpmonv(source.substring(274, 275));
        setExpmono(source.substring(275, 277));
        setOFFILLER13(source.substring(277, 280));
        setExpyearc(source.substring(280, 281));
        setExpyearp(source.substring(281, 282));
        setExpyearh(source.substring(282, 283));
        setExpyearv(source.substring(283, 284));
        setExpyearo(source.substring(284, 288));
        setOFFILLER14(source.substring(288, 291));
        setInfomsgc(source.substring(291, 292));
        setInfomsgp(source.substring(292, 293));
        setInfomsgh(source.substring(293, 294));
        setInfomsgv(source.substring(294, 295));
        setInfomsgo(source.substring(295, 335));
        setOFFILLER15(source.substring(335, 338));
        setErrmsgc(source.substring(338, 339));
        setErrmsgp(source.substring(339, 340));
        setErrmsgh(source.substring(340, 341));
        setErrmsgv(source.substring(341, 342));
        setErrmsgo(source.substring(342, 422));
        setOFFILLER16(source.substring(422, 425));
        setFkeysc(source.substring(425, 426));
        setFkeysp(source.substring(426, 427));
        setFkeysh(source.substring(427, 428));
        setFkeysv(source.substring(428, 429));
        setFkeyso(source.substring(429, 504));
    }

    public void setCcrdslao(CocrdslcCcrdslao source) {
        setCcrdslao(source.toString());
    }

    public String getOFFILLER1() {
        return getCcrdslai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCcrdslai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCcrdslai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCcrdslai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCcrdslai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdslai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCcrdslai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCcrdslai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdslai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCcrdslai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCcrdslai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdslai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCcrdslai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCcrdslai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdslai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCcrdslai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCcrdslai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCcrdslai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCcrdslai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCcrdslai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdslai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCcrdslai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCcrdslai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdslai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCcrdslai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCcrdslai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdslai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCcrdslai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCcrdslai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdslai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCcrdslai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCcrdslai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCcrdslai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCcrdslai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCcrdslai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdslai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCcrdslai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCcrdslai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdslai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCcrdslai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCcrdslai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdslai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCcrdslai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCcrdslai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdslai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCcrdslai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCcrdslai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCcrdslai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCcrdslai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCcrdslai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdslai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCcrdslai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCcrdslai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdslai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCcrdslai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCcrdslai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdslai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCcrdslai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCcrdslai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdslai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCcrdslai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCcrdslai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCcrdslai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCcrdslai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCcrdslai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCcrdslai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCcrdslai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCcrdslai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCcrdslai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCcrdslai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCcrdslai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCcrdslai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCcrdslai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCcrdslai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCcrdslai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCcrdslai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCcrdslai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCcrdslai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCcrdslai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCcrdslai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCcrdslai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCcrdslai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCcrdslai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCcrdslai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getAcctsidl());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCcrdslai().getAcctsidf();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setAcctsidl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setAcctsidl(0);
        }
    }

    public String getAcctsidc() {
        return getCcrdslai().getOFFILLER15().substring(0, 1);
    }

    public void setAcctsidc(String source) {
        getCcrdslai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER15(), source, 0, 1));
    }

    public String getAcctsidp() {
        return getCcrdslai().getOFFILLER15().substring(1, 2);
    }

    public void setAcctsidp(String source) {
        getCcrdslai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER15(), source, 1, 2));
    }

    public String getAcctsidh() {
        return getCcrdslai().getOFFILLER15().substring(2, 3);
    }

    public void setAcctsidh(String source) {
        getCcrdslai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER15(), source, 2, 3));
    }

    public String getAcctsidv() {
        return getCcrdslai().getOFFILLER15().substring(3);
    }

    public void setAcctsidv(String source) {
        getCcrdslai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER15(), source, 3, 4));
    }

    public String getAcctsido() {
        return getCcrdslai().getAcctsidi();
    }

    public void setAcctsido(String source) {
        getCcrdslai().setAcctsidi(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getCardsidl());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCcrdslai().getCardsidf();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setCardsidl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setCardsidl(0);
        }
    }

    public String getCardsidc() {
        return getCcrdslai().getOFFILLER17().substring(0, 1);
    }

    public void setCardsidc(String source) {
        getCcrdslai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER17(), source, 0, 1));
    }

    public String getCardsidp() {
        return getCcrdslai().getOFFILLER17().substring(1, 2);
    }

    public void setCardsidp(String source) {
        getCcrdslai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER17(), source, 1, 2));
    }

    public String getCardsidh() {
        return getCcrdslai().getOFFILLER17().substring(2, 3);
    }

    public void setCardsidh(String source) {
        getCcrdslai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER17(), source, 2, 3));
    }

    public String getCardsidv() {
        return getCcrdslai().getOFFILLER17().substring(3);
    }

    public void setCardsidv(String source) {
        getCcrdslai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER17(), source, 3, 4));
    }

    public String getCardsido() {
        return getCcrdslai().getCardsidi();
    }

    public void setCardsido(String source) {
        getCcrdslai().setCardsidi(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getCrdnamel());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCcrdslai().getCrdnamef();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setCrdnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setCrdnamel(0);
        }
    }

    public String getCrdnamec() {
        return getCcrdslai().getOFFILLER19().substring(0, 1);
    }

    public void setCrdnamec(String source) {
        getCcrdslai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER19(), source, 0, 1));
    }

    public String getCrdnamep() {
        return getCcrdslai().getOFFILLER19().substring(1, 2);
    }

    public void setCrdnamep(String source) {
        getCcrdslai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER19(), source, 1, 2));
    }

    public String getCrdnameh() {
        return getCcrdslai().getOFFILLER19().substring(2, 3);
    }

    public void setCrdnameh(String source) {
        getCcrdslai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER19(), source, 2, 3));
    }

    public String getCrdnamev() {
        return getCcrdslai().getOFFILLER19().substring(3);
    }

    public void setCrdnamev(String source) {
        getCcrdslai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER19(), source, 3, 4));
    }

    public String getCrdnameo() {
        return getCcrdslai().getCrdnamei();
    }

    public void setCrdnameo(String source) {
        getCcrdslai().setCrdnamei(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getCrdstcdl());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCcrdslai().getCrdstcdf();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setCrdstcdl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setCrdstcdl(0);
        }
    }

    public String getCrdstcdc() {
        return getCcrdslai().getOFFILLER21().substring(0, 1);
    }

    public void setCrdstcdc(String source) {
        getCcrdslai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER21(), source, 0, 1));
    }

    public String getCrdstcdp() {
        return getCcrdslai().getOFFILLER21().substring(1, 2);
    }

    public void setCrdstcdp(String source) {
        getCcrdslai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER21(), source, 1, 2));
    }

    public String getCrdstcdh() {
        return getCcrdslai().getOFFILLER21().substring(2, 3);
    }

    public void setCrdstcdh(String source) {
        getCcrdslai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER21(), source, 2, 3));
    }

    public String getCrdstcdv() {
        return getCcrdslai().getOFFILLER21().substring(3);
    }

    public void setCrdstcdv(String source) {
        getCcrdslai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER21(), source, 3, 4));
    }

    public String getCrdstcdo() {
        return getCcrdslai().getCrdstcdi();
    }

    public void setCrdstcdo(String source) {
        getCcrdslai().setCrdstcdi(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getExpmonl());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCcrdslai().getExpmonf();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setExpmonl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setExpmonl(0);
        }
    }

    public String getExpmonc() {
        return getCcrdslai().getOFFILLER23().substring(0, 1);
    }

    public void setExpmonc(String source) {
        getCcrdslai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER23(), source, 0, 1));
    }

    public String getExpmonp() {
        return getCcrdslai().getOFFILLER23().substring(1, 2);
    }

    public void setExpmonp(String source) {
        getCcrdslai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER23(), source, 1, 2));
    }

    public String getExpmonh() {
        return getCcrdslai().getOFFILLER23().substring(2, 3);
    }

    public void setExpmonh(String source) {
        getCcrdslai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER23(), source, 2, 3));
    }

    public String getExpmonv() {
        return getCcrdslai().getOFFILLER23().substring(3);
    }

    public void setExpmonv(String source) {
        getCcrdslai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER23(), source, 3, 4));
    }

    public String getExpmono() {
        return getCcrdslai().getExpmoni();
    }

    public void setExpmono(String source) {
        getCcrdslai().setExpmoni(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getExpyearl());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCcrdslai().getExpyearf();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setExpyearl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setExpyearl(0);
        }
    }

    public String getExpyearc() {
        return getCcrdslai().getOFFILLER25().substring(0, 1);
    }

    public void setExpyearc(String source) {
        getCcrdslai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER25(), source, 0, 1));
    }

    public String getExpyearp() {
        return getCcrdslai().getOFFILLER25().substring(1, 2);
    }

    public void setExpyearp(String source) {
        getCcrdslai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER25(), source, 1, 2));
    }

    public String getExpyearh() {
        return getCcrdslai().getOFFILLER25().substring(2, 3);
    }

    public void setExpyearh(String source) {
        getCcrdslai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER25(), source, 2, 3));
    }

    public String getExpyearv() {
        return getCcrdslai().getOFFILLER25().substring(3);
    }

    public void setExpyearv(String source) {
        getCcrdslai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER25(), source, 3, 4));
    }

    public String getExpyearo() {
        return getCcrdslai().getExpyeari();
    }

    public void setExpyearo(String source) {
        getCcrdslai().setExpyeari(source);
    }

    public String getOFFILLER14() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getInfomsgl());
        tempByteBuffer1.flip();
        String temp13 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp13 + getCcrdslai().getInfomsgf();
    }

    public void setOFFILLER14(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setInfomsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setInfomsgl(0);
        }
    }

    public String getInfomsgc() {
        return getCcrdslai().getOFFILLER27().substring(0, 1);
    }

    public void setInfomsgc(String source) {
        getCcrdslai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER27(), source, 0, 1));
    }

    public String getInfomsgp() {
        return getCcrdslai().getOFFILLER27().substring(1, 2);
    }

    public void setInfomsgp(String source) {
        getCcrdslai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER27(), source, 1, 2));
    }

    public String getInfomsgh() {
        return getCcrdslai().getOFFILLER27().substring(2, 3);
    }

    public void setInfomsgh(String source) {
        getCcrdslai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER27(), source, 2, 3));
    }

    public String getInfomsgv() {
        return getCcrdslai().getOFFILLER27().substring(3);
    }

    public void setInfomsgv(String source) {
        getCcrdslai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER27(), source, 3, 4));
    }

    public String getInfomsgo() {
        return getCcrdslai().getInfomsgi();
    }

    public void setInfomsgo(String source) {
        getCcrdslai().setInfomsgi(source);
    }

    public String getOFFILLER15() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp14 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp14 + getCcrdslai().getErrmsgf();
    }

    public void setOFFILLER15(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCcrdslai().getOFFILLER29().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCcrdslai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER29(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCcrdslai().getOFFILLER29().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCcrdslai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER29(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCcrdslai().getOFFILLER29().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCcrdslai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER29(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCcrdslai().getOFFILLER29().substring(3);
    }

    public void setErrmsgv(String source) {
        getCcrdslai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER29(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCcrdslai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCcrdslai().setErrmsgi(source);
    }

    public String getOFFILLER16() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdslai().getFkeysl());
        tempByteBuffer1.flip();
        String temp15 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp15 + getCcrdslai().getFkeysf();
    }

    public void setOFFILLER16(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdslai().setFkeysl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdslai().setFkeysl(0);
        }
    }

    public String getFkeysc() {
        return getCcrdslai().getOFFILLER31().substring(0, 1);
    }

    public void setFkeysc(String source) {
        getCcrdslai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER31(), source, 0, 1));
    }

    public String getFkeysp() {
        return getCcrdslai().getOFFILLER31().substring(1, 2);
    }

    public void setFkeysp(String source) {
        getCcrdslai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER31(), source, 1, 2));
    }

    public String getFkeysh() {
        return getCcrdslai().getOFFILLER31().substring(2, 3);
    }

    public void setFkeysh(String source) {
        getCcrdslai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER31(), source, 2, 3));
    }

    public String getFkeysv() {
        return getCcrdslai().getOFFILLER31().substring(3);
    }

    public void setFkeysv(String source) {
        getCcrdslai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdslai().getOFFILLER31(), source, 3, 4));
    }

    public String getFkeyso() {
        return getCcrdslai().getFkeysi();
    }

    public void setFkeyso(String source) {
        getCcrdslai().setFkeysi(source);
    }

    // *Current Date                                                     
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter CocrdslcWsDateTime wsDateTime = new CocrdslcWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Common Messages                                                  
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter CocrdslcCcdaCommonMessages ccdaCommonMessages = new CocrdslcCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Abend Variables                                                  
    //       *COPY CSMSG02Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG02Y.cpy)
    // ***************************************************************** 
    // * CABENDD.CPY                                                   * 
    // *---------------------------------------------------------------* 
    // * Work areas for abend routine                                  * 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG02Y.cpy, LINE #22] ABEND-DATA (level: 1)
    private @Getter @Setter CocrdslcAbendData abendData = new CocrdslcAbendData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Signed on user data                                              
    //       *COPY CSUSR01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSUSR01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSUSR01Y.cpy, LINE #18] SEC-USER-DATA (level: 1)
    private @Getter @Setter CocrdslcSecUserData secUserData = new CocrdslcSecUserData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    // *Dataset layouts                                                  
    // *ACCOUNT RECORD LAYOUT                                            
    // *COPY CVACT01Y.                                                   
    // *CARD RECORD LAYOUT                                               
    //       *COPY CVACT02Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT02Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for card entity (RECLN 150)                   
    // ***************************************************************** 
    // [T-Up#INFO][CVACT02Y.cpy, LINE #5] CARD-RECORD (level: 1)
    private @Getter @Setter CocrdslcCardRecord cardRecord = new CocrdslcCardRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // *CARD XREF LAYOUT                                                 
    // *COPY CVACT03Y.                                                   
    // *CUSTOMER LAYOUT                                                  
    //       *COPY CVCUS01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCUS01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for Customer entity (RECLN 500)               
    // ***************************************************************** 
    // [T-Up#INFO][CVCUS01Y.cpy, LINE #5] CUSTOMER-RECORD (level: 1)
    private @Getter @Setter CocrdslcCustomerRecord customerRecord = new CocrdslcCustomerRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // [T-Up#INFO][COCRDSLC.cbl, LINE #243] DFHCOMMAREA (level: 1)
    private @Getter @Setter CocrdslcDfhcommarea dfhcommarea = new CocrdslcDfhcommarea();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdslcCcrdslao {
        // [T-Up#INFO][COCRDSL.CPY, LINE #111] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COCRDSL.CPY, LINE #112] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #113] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #114] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #115] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #116] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #117] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COCRDSL.CPY, LINE #118] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #119] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #120] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #121] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #122] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #123] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COCRDSL.CPY, LINE #124] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #125] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #126] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #127] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #128] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #129] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COCRDSL.CPY, LINE #130] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #131] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #132] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #133] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #134] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #135] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COCRDSL.CPY, LINE #136] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #137] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #138] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #139] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #140] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #141] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COCRDSL.CPY, LINE #142] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #143] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #144] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #145] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #146] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #147] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COCRDSL.CPY, LINE #148] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #149] ACCTSIDC (level: 2)
        private @Getter String acctsidc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #150] ACCTSIDP (level: 2)
        private @Getter String acctsidp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #151] ACCTSIDH (level: 2)
        private @Getter String acctsidh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #152] ACCTSIDV (level: 2)
        private @Getter String acctsidv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #153] ACCTSIDO (level: 2)
        private @Getter String acctsido = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDSL.CPY, LINE #154] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #155] CARDSIDC (level: 2)
        private @Getter String cardsidc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #156] CARDSIDP (level: 2)
        private @Getter String cardsidp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #157] CARDSIDH (level: 2)
        private @Getter String cardsidh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #158] CARDSIDV (level: 2)
        private @Getter String cardsidv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #159] CARDSIDO (level: 2)
        private @Getter String cardsido = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDSL.CPY, LINE #160] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #161] CRDNAMEC (level: 2)
        private @Getter String crdnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #162] CRDNAMEP (level: 2)
        private @Getter String crdnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #163] CRDNAMEH (level: 2)
        private @Getter String crdnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #164] CRDNAMEV (level: 2)
        private @Getter String crdnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #165] CRDNAMEO (level: 2)
        private @Getter String crdnameo = StringUtils.repeat(' ', 50);
        // [T-Up#INFO][COCRDSL.CPY, LINE #166] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #167] CRDSTCDC (level: 2)
        private @Getter String crdstcdc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #168] CRDSTCDP (level: 2)
        private @Getter String crdstcdp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #169] CRDSTCDH (level: 2)
        private @Getter String crdstcdh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #170] CRDSTCDV (level: 2)
        private @Getter String crdstcdv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #171] CRDSTCDO (level: 2)
        private @Getter String crdstcdo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #172] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #173] EXPMONC (level: 2)
        private @Getter String expmonc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #174] EXPMONP (level: 2)
        private @Getter String expmonp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #175] EXPMONH (level: 2)
        private @Getter String expmonh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #176] EXPMONV (level: 2)
        private @Getter String expmonv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #177] EXPMONO (level: 2)
        private @Getter String expmono = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COCRDSL.CPY, LINE #178] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #179] EXPYEARC (level: 2)
        private @Getter String expyearc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #180] EXPYEARP (level: 2)
        private @Getter String expyearp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #181] EXPYEARH (level: 2)
        private @Getter String expyearh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #182] EXPYEARV (level: 2)
        private @Getter String expyearv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #183] EXPYEARO (level: 2)
        private @Getter String expyearo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COCRDSL.CPY, LINE #184] FILLER (level: 2)
        private @Getter String OFFILLER14 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #185] INFOMSGC (level: 2)
        private @Getter String infomsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #186] INFOMSGP (level: 2)
        private @Getter String infomsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #187] INFOMSGH (level: 2)
        private @Getter String infomsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #188] INFOMSGV (level: 2)
        private @Getter String infomsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #189] INFOMSGO (level: 2)
        private @Getter String infomsgo = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COCRDSL.CPY, LINE #190] FILLER (level: 2)
        private @Getter String OFFILLER15 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #191] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #192] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #193] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #194] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #195] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 80);
        // [T-Up#INFO][COCRDSL.CPY, LINE #196] FILLER (level: 2)
        private @Getter String OFFILLER16 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDSL.CPY, LINE #197] FKEYSC (level: 2)
        private @Getter String fkeysc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #198] FKEYSP (level: 2)
        private @Getter String fkeysp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #199] FKEYSH (level: 2)
        private @Getter String fkeysh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #200] FKEYSV (level: 2)
        private @Getter String fkeysv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDSL.CPY, LINE #201] FKEYSO (level: 2)
        private @Getter String fkeyso = StringUtils.repeat(' ', 75);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER9);
            sb.append(cardsidc);
            sb.append(cardsidp);
            sb.append(cardsidh);
            sb.append(cardsidv);
            sb.append(cardsido);
            sb.append(OFFILLER10);
            sb.append(crdnamec);
            sb.append(crdnamep);
            sb.append(crdnameh);
            sb.append(crdnamev);
            sb.append(crdnameo);
            sb.append(OFFILLER11);
            sb.append(crdstcdc);
            sb.append(crdstcdp);
            sb.append(crdstcdh);
            sb.append(crdstcdv);
            sb.append(crdstcdo);
            sb.append(OFFILLER12);
            sb.append(expmonc);
            sb.append(expmonp);
            sb.append(expmonh);
            sb.append(expmonv);
            sb.append(expmono);
            sb.append(OFFILLER13);
            sb.append(expyearc);
            sb.append(expyearp);
            sb.append(expyearh);
            sb.append(expyearv);
            sb.append(expyearo);
            sb.append(OFFILLER14);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER15);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            sb.append(OFFILLER16);
            sb.append(fkeysc);
            sb.append(fkeysp);
            sb.append(fkeysh);
            sb.append(fkeysv);
            sb.append(fkeyso);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER9);
            sb.append(cardsidc);
            sb.append(cardsidp);
            sb.append(cardsidh);
            sb.append(cardsidv);
            sb.append(cardsido);
            sb.append(OFFILLER10);
            sb.append(crdnamec);
            sb.append(crdnamep);
            sb.append(crdnameh);
            sb.append(crdnamev);
            sb.append(crdnameo);
            sb.append(OFFILLER11);
            sb.append(crdstcdc);
            sb.append(crdstcdp);
            sb.append(crdstcdh);
            sb.append(crdstcdv);
            sb.append(crdstcdo);
            sb.append(OFFILLER12);
            sb.append(expmonc);
            sb.append(expmonp);
            sb.append(expmonh);
            sb.append(expmonv);
            sb.append(expmono);
            sb.append(OFFILLER13);
            sb.append(expyearc);
            sb.append(expyearp);
            sb.append(expyearh);
            sb.append(expyearv);
            sb.append(expyearo);
            sb.append(OFFILLER14);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER15);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            sb.append(OFFILLER16);
            sb.append(fkeysc);
            sb.append(fkeysp);
            sb.append(fkeysh);
            sb.append(fkeysv);
            sb.append(fkeyso);
            return sb.toString();
        }
    }

    public void setWsCommarea(String source) {
        wsCommarea = StringUtils.truncate(StringUtils.rightPad(source, 2000),
                2000);
    }
}
