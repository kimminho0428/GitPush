package aws.carddemo.variable.group;

import com.tmax.openframe.DataConverter;
import com.tmax.openframe.runtime.cobol.PictureFormatter;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:45 UTC</p>
 */
public @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdupcWsMiscStorage {
    // ******************************************************************
    // * General CICS related                                            
    // ******************************************************************
    // [T-Up#INFO][COCRDUPC.cbl, LINE #40] WS-CICS-PROCESSNG-VARS (level: 5)
    private @Getter @Setter @Builder.Default CocrdupcWsCicsProcessngVars wsCicsProcessngVars = new CocrdupcWsCicsProcessngVars();
    // ******************************************************************
    // *      Input edits                                                
    // ******************************************************************
    // [T-Up#INFO][COCRDUPC.cbl, LINE #53] WS-INPUT-FLAG (level: 5)
    private @Getter @Builder.Default String wsInputFlag = StringUtils.repeat(
            ' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #54] INPUT-OK (level: 88)
    public static final String INPUT_OK = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #55] INPUT-ERROR (level: 88)
    public static final String INPUT_ERROR = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #56] INPUT-PENDING (level: 88)
    public static final String INPUT_PENDING = StringUtils.repeat((char) 0x00,
            1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #57] WS-EDIT-ACCT-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditAcctFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #58] FLG-ACCTFILTER-NOT-OK (level: 88)
    public static final String FLG_ACCTFILTER_NOT_OK = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #59] FLG-ACCTFILTER-ISVALID (level: 88)
    public static final String FLG_ACCTFILTER_ISVALID = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #60] FLG-ACCTFILTER-BLANK (level: 88)
    public static final String FLG_ACCTFILTER_BLANK = " ";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #61] WS-EDIT-CARD-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditCardFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #62] FLG-CARDFILTER-NOT-OK (level: 88)
    public static final String FLG_CARDFILTER_NOT_OK = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #63] FLG-CARDFILTER-ISVALID (level: 88)
    public static final String FLG_CARDFILTER_ISVALID = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #64] FLG-CARDFILTER-BLANK (level: 88)
    public static final String FLG_CARDFILTER_BLANK = " ";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #65] WS-EDIT-CARDNAME-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditCardnameFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #66] FLG-CARDNAME-NOT-OK (level: 88)
    public static final String FLG_CARDNAME_NOT_OK = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #67] FLG-CARDNAME-ISVALID (level: 88)
    public static final String FLG_CARDNAME_ISVALID = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #68] FLG-CARDNAME-BLANK (level: 88)
    public static final String FLG_CARDNAME_BLANK = " ";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #69] WS-EDIT-CARDSTATUS-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditCardstatusFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #70] FLG-CARDSTATUS-NOT-OK (level: 88)
    public static final String FLG_CARDSTATUS_NOT_OK = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #71] FLG-CARDSTATUS-ISVALID (level: 88)
    public static final String FLG_CARDSTATUS_ISVALID = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #72] FLG-CARDSTATUS-BLANK (level: 88)
    public static final String FLG_CARDSTATUS_BLANK = " ";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #73] WS-EDIT-CARDEXPMON-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditCardexpmonFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #74] FLG-CARDEXPMON-NOT-OK (level: 88)
    public static final String FLG_CARDEXPMON_NOT_OK = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #75] FLG-CARDEXPMON-ISVALID (level: 88)
    public static final String FLG_CARDEXPMON_ISVALID = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #76] FLG-CARDEXPMON-BLANK (level: 88)
    public static final String FLG_CARDEXPMON_BLANK = " ";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #77] WS-EDIT-CARDEXPYEAR-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditCardexpyearFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #78] FLG-CARDEXPYEAR-NOT-OK (level: 88)
    public static final String FLG_CARDEXPYEAR_NOT_OK = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #79] FLG-CARDEXPYEAR-ISVALID (level: 88)
    public static final String FLG_CARDEXPYEAR_ISVALID = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #80] FLG-CARDEXPYEAR-BLANK (level: 88)
    public static final String FLG_CARDEXPYEAR_BLANK = " ";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #81] WS-RETURN-FLAG (level: 5)
    private @Getter @Builder.Default String wsReturnFlag = StringUtils.repeat(
            ' ', 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #82] WS-RETURN-FLAG-OFF (level: 88)
    public static final String WS_RETURN_FLAG_OFF = StringUtils.repeat(
            (char) 0x00, 1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #83] WS-RETURN-FLAG-ON (level: 88)
    public static final String WS_RETURN_FLAG_ON = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #84] WS-PFK-FLAG (level: 5)
    private @Getter @Builder.Default String wsPfkFlag = StringUtils.repeat(' ',
            1);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #85] PFK-VALID (level: 88)
    public static final String PFK_VALID = "0";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #86] PFK-INVALID (level: 88)
    public static final String PFK_INVALID = "1";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #87] CARD-NAME-CHECK (level: 5)
    private @Getter @Builder.Default String cardNameCheck = StringUtils.repeat(
            (char) 0x00, 50);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #89] FLG-YES-NO-CHECK (level: 5)
    private @Getter @Builder.Default String flgYesNoCheck = "N";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #91] FLG-YES-NO-VALID (level: 88)
    public static final String FLG_YES_NO_VALID_1 = "Y";
    public static final String FLG_YES_NO_VALID_2 = "N";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #92] CARD-MONTH-CHECK (level: 5)
    private @Getter @Builder.Default String cardMonthCheck = StringUtils
            .repeat(' ', 2);

    public int getCardMonthCheckN() {
        try {
            return (int) DataConverter.convZonedStringToLong(
                    getCardMonthCheck(), 2);
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            return 0;
        }
    }

    public void setCardMonthCheckN(int source) {
        String temp1 = DataConverter.convZonedLongToString(source, 2);
        setCardMonthCheck(temp1);
    }

    // [T-Up#INFO][COCRDUPC.cbl, LINE #95] VALID-MONTH (level: 88)
    public static final int VALID_MONTH_START = 1;
    public static final int VALID_MONTH_END = 12;
    // [T-Up#INFO][COCRDUPC.cbl, LINE #96] CARD-YEAR-CHECK (level: 5)
    private @Getter @Builder.Default String cardYearCheck = StringUtils.repeat(
            ' ', 4);

    public int getCardYearCheckN() {
        try {
            return (int) DataConverter.convZonedStringToLong(
                    getCardYearCheck(), 4);
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            return 0;
        }
    }

    public void setCardYearCheckN(int source) {
        String temp1 = DataConverter.convZonedLongToString(source, 4);
        setCardYearCheck(temp1);
    }

    // [T-Up#INFO][COCRDUPC.cbl, LINE #99] VALID-YEAR (level: 88)
    public static final int VALID_YEAR_START = 1950;
    public static final int VALID_YEAR_END = 2099;
    // ******************************************************************
    // * Output edits                                                    
    // ******************************************************************
    // [T-Up#INFO][COCRDUPC.cbl, LINE #103] CICS-OUTPUT-EDIT-VARS (level: 5)
    private @Getter @Setter @Builder.Default CocrdupcCicsOutputEditVars cicsOutputEditVars = new CocrdupcCicsOutputEditVars();
    // ******************************************************************
    // *      File and data Handling                                     
    // ******************************************************************
    // [T-Up#INFO][COCRDUPC.cbl, LINE #128] WS-CARD-RID (level: 5)
    private @Getter @Setter @Builder.Default CocrdupcWsCardRid wsCardRid = new CocrdupcWsCardRid();
    // [T-Up#INFO][COCRDUPC.cbl, LINE #133] WS-FILE-ERROR-MESSAGE (level: 5)
    private @Getter @Setter @Builder.Default CocrdupcWsFileErrorMessage wsFileErrorMessage = new CocrdupcWsFileErrorMessage();
    // ******************************************************************
    // *      Output Message Construction                                
    // ******************************************************************
    // [T-Up#INFO][COCRDUPC.cbl, LINE #156] WS-LONG-MSG (level: 5)
    private @Getter @Builder.Default String wsLongMsg = StringUtils.repeat(' ',
            500);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #157] WS-INFO-MSG (level: 5)
    private @Getter @Builder.Default String wsInfoMsg = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #158] WS-NO-INFO-MESSAGE (level: 88)
    public static final String WS_NO_INFO_MESSAGE_1 = StringUtils.repeat(' ',
            40);
    public static final String WS_NO_INFO_MESSAGE_2 = StringUtils.repeat(
            (char) 0x00, 40);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #160] FOUND-CARDS-FOR-ACCOUNT (level: 88)
    public static final String FOUND_CARDS_FOR_ACCOUNT = "Details of selected card shown above";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #162] PROMPT-FOR-SEARCH-KEYS (level: 88)
    public static final String PROMPT_FOR_SEARCH_KEYS = "Please enter Account and Card Number";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #164] PROMPT-FOR-CHANGES (level: 88)
    public static final String PROMPT_FOR_CHANGES = "Update card details presented above.";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #166] PROMPT-FOR-CONFIRMATION (level: 88)
    public static final String PROMPT_FOR_CONFIRMATION = "Changes validated.Press F5 to save";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #168] CONFIRM-UPDATE-SUCCESS (level: 88)
    public static final String CONFIRM_UPDATE_SUCCESS = "Changes committed to database";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #170] INFORM-FAILURE (level: 88)
    public static final String INFORM_FAILURE = "Changes unsuccessful. Please try again";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #173] WS-RETURN-MSG (level: 5)
    private @Getter @Builder.Default String wsReturnMsg = StringUtils.repeat(
            ' ', 75);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #174] WS-RETURN-MSG-OFF (level: 88)
    public static final String WS_RETURN_MSG_OFF = StringUtils.repeat(' ', 75);
    // [T-Up#INFO][COCRDUPC.cbl, LINE #175] WS-EXIT-MESSAGE (level: 88)
    public static final String WS_EXIT_MESSAGE = "PF03 pressed.Exiting              ";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #177] WS-PROMPT-FOR-ACCT (level: 88)
    public static final String WS_PROMPT_FOR_ACCT = "Account number not provided";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #179] WS-PROMPT-FOR-CARD (level: 88)
    public static final String WS_PROMPT_FOR_CARD = "Card number not provided";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #181] WS-PROMPT-FOR-NAME (level: 88)
    public static final String WS_PROMPT_FOR_NAME = "Card name not provided";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #183] WS-NAME-MUST-BE-ALPHA (level: 88)
    public static final String WS_NAME_MUST_BE_ALPHA = "Card name can only contain alphabets and spaces";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #185] NO-SEARCH-CRITERIA-RECEIVED (level: 88)
    public static final String NO_SEARCH_CRITERIA_RECEIVED = "No input received";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #187] NO-CHANGES-DETECTED (level: 88)
    public static final String NO_CHANGES_DETECTED = "No change detected with respect to values fetched.";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #189] SEARCHED-ACCT-ZEROES (level: 88)
    public static final String SEARCHED_ACCT_ZEROES = "Account number must be a non zero 11 digit number";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #191] SEARCHED-ACCT-NOT-NUMERIC (level: 88)
    public static final String SEARCHED_ACCT_NOT_NUMERIC = "Account number must be a non zero 11 digit number";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #193] SEARCHED-CARD-NOT-NUMERIC (level: 88)
    public static final String SEARCHED_CARD_NOT_NUMERIC = "Card number if supplied must be a 16 digit number";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #195] CARD-STATUS-MUST-BE-YES-NO (level: 88)
    public static final String CARD_STATUS_MUST_BE_YES_NO = "Card Active Status must be Y or N";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #197] CARD-EXPIRY-MONTH-NOT-VALID (level: 88)
    public static final String CARD_EXPIRY_MONTH_NOT_VALID = "Card expiry month must be between 1 and 12";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #199] CARD-EXPIRY-YEAR-NOT-VALID (level: 88)
    public static final String CARD_EXPIRY_YEAR_NOT_VALID = "Invalid card expiry year";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #201] DID-NOT-FIND-ACCT-IN-CARDXREF (level: 88)
    public static final String DID_NOT_FIND_ACCT_IN_CARDXREF = "Did not find this account in cards database";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #203] DID-NOT-FIND-ACCTCARD-COMBO (level: 88)
    public static final String DID_NOT_FIND_ACCTCARD_COMBO = "Did not find cards for this search condition";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #205] COULD-NOT-LOCK-FOR-UPDATE (level: 88)
    public static final String COULD_NOT_LOCK_FOR_UPDATE = "Could not lock record for update";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #207] DATA-WAS-CHANGED-BEFORE-UPDATE (level: 88)
    public static final String DATA_WAS_CHANGED_BEFORE_UPDATE = "Record changed by some one else. Please review";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #209] LOCKED-BUT-UPDATE-FAILED (level: 88)
    public static final String LOCKED_BUT_UPDATE_FAILED = "Update of record failed";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #211] XREF-READ-ERROR (level: 88)
    public static final String XREF_READ_ERROR = "Error reading Card Data File";
    // [T-Up#INFO][COCRDUPC.cbl, LINE #213] CODING-TO-BE-DONE (level: 88)
    public static final String CODING_TO_BE_DONE = "Looks Good.... so far";

    public void setWsInputFlag(String source) {
        wsInputFlag = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setWsEditAcctFlag(String source) {
        wsEditAcctFlag = StringUtils.truncate(StringUtils.rightPad(source, 1),
                1);
    }

    public void setWsEditCardFlag(String source) {
        wsEditCardFlag = StringUtils.truncate(StringUtils.rightPad(source, 1),
                1);
    }

    public void setWsEditCardnameFlag(String source) {
        wsEditCardnameFlag = StringUtils.truncate(
                StringUtils.rightPad(source, 1), 1);
    }

    public void setWsEditCardstatusFlag(String source) {
        wsEditCardstatusFlag = StringUtils.truncate(
                StringUtils.rightPad(source, 1), 1);
    }

    public void setWsEditCardexpmonFlag(String source) {
        wsEditCardexpmonFlag = StringUtils.truncate(
                StringUtils.rightPad(source, 1), 1);
    }

    public void setWsEditCardexpyearFlag(String source) {
        wsEditCardexpyearFlag = StringUtils.truncate(
                StringUtils.rightPad(source, 1), 1);
    }

    public void setWsReturnFlag(String source) {
        wsReturnFlag = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setWsPfkFlag(String source) {
        wsPfkFlag = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setCardNameCheck(String source) {
        cardNameCheck = StringUtils.truncate(StringUtils.rightPad(source, 50),
                50);
    }

    public void setFlgYesNoCheck(String source) {
        flgYesNoCheck = StringUtils
                .truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setCardMonthCheck(String source) {
        cardMonthCheck = StringUtils.truncate(StringUtils.rightPad(source, 2),
                2);
    }

    public void setCardYearCheck(String source) {
        cardYearCheck = StringUtils
                .truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setWsLongMsg(String source) {
        wsLongMsg = StringUtils
                .truncate(StringUtils.rightPad(source, 500), 500);
    }

    public void setWsInfoMsg(String source) {
        wsInfoMsg = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setWsReturnMsg(String source) {
        wsReturnMsg = StringUtils
                .truncate(StringUtils.rightPad(source, 75), 75);
    }

    public static CocrdupcWsMiscStorage createDefaultValueInstance() {
        return new CocrdupcWsMiscStorage.builder()
                .wsCicsProcessngVars(
                        CocrdupcWsCicsProcessngVars
                                .createDefaultValueInstance())
                .cardNameCheck(StringUtils.repeat(' ', 50))
                .flgYesNoCheck(StringUtils.repeat(' ', 1))
                .cicsOutputEditVars(
                        CocrdupcCicsOutputEditVars.createDefaultValueInstance())
                .wsCardRid(CocrdupcWsCardRid.createDefaultValueInstance())
                .wsFileErrorMessage(
                        CocrdupcWsFileErrorMessage.createDefaultValueInstance())
                .build();
    }

    public void set(String source) {
        source = StringUtils.truncate(StringUtils.rightPad(source, 895), 895);
        wsCicsProcessngVars.set(source.substring(0, 16));
        wsInputFlag = source.substring(16, 17);
        wsEditAcctFlag = source.substring(17, 18);
        wsEditCardFlag = source.substring(18, 19);
        wsEditCardnameFlag = source.substring(19, 20);
        wsEditCardstatusFlag = source.substring(20, 21);
        wsEditCardexpmonFlag = source.substring(21, 22);
        wsEditCardexpyearFlag = source.substring(22, 23);
        wsReturnFlag = source.substring(23, 24);
        wsPfkFlag = source.substring(24, 25);
        cardNameCheck = source.substring(25, 75);
        flgYesNoCheck = source.substring(75, 76);
        cardMonthCheck = source.substring(76, 78);
        cardYearCheck = source.substring(78, 82);
        cicsOutputEditVars.set(source.substring(82, 173));
        wsCardRid.set(source.substring(173, 200));
        wsFileErrorMessage.set(source.substring(200, 280));
        wsLongMsg = source.substring(280, 780);
        wsInfoMsg = source.substring(780, 820);
        wsReturnMsg = source.substring(820, 895);
    }

    public String get() {
        StringBuilder sb = new StringBuilder();
        sb.append(wsCicsProcessngVars.get());
        sb.append(wsInputFlag);
        sb.append(wsEditAcctFlag);
        sb.append(wsEditCardFlag);
        sb.append(wsEditCardnameFlag);
        sb.append(wsEditCardstatusFlag);
        sb.append(wsEditCardexpmonFlag);
        sb.append(wsEditCardexpyearFlag);
        sb.append(wsReturnFlag);
        sb.append(wsPfkFlag);
        sb.append(cardNameCheck);
        sb.append(flgYesNoCheck);
        sb.append(cardMonthCheck);
        sb.append(cardYearCheck);
        sb.append(cicsOutputEditVars.get());
        sb.append(wsCardRid.get());
        sb.append(wsFileErrorMessage.get());
        sb.append(wsLongMsg);
        sb.append(wsInfoMsg);
        sb.append(wsReturnMsg);
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getWsCicsProcessngVars().toString());
        sb.append(getWsInputFlag());
        sb.append(getWsEditAcctFlag());
        sb.append(getWsEditCardFlag());
        sb.append(getWsEditCardnameFlag());
        sb.append(getWsEditCardstatusFlag());
        sb.append(getWsEditCardexpmonFlag());
        sb.append(getWsEditCardexpyearFlag());
        sb.append(getWsReturnFlag());
        sb.append(getWsPfkFlag());
        sb.append(getCardNameCheck());
        sb.append(getFlgYesNoCheck());
        sb.append(getCardMonthCheck());
        sb.append(getCardYearCheck());
        sb.append(getCicsOutputEditVars().toString());
        sb.append(getWsCardRid().toString());
        sb.append(getWsFileErrorMessage().toString());
        sb.append(getWsLongMsg());
        sb.append(getWsInfoMsg());
        sb.append(getWsReturnMsg());
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdupcWsCicsProcessngVars {
        // [T-Up#INFO][COCRDUPC.cbl, LINE #41] WS-RESP-CD (level: 7)
        private @Getter @Setter @Builder.Default int wsRespCd = 0;
        // [T-Up#INFO][COCRDUPC.cbl, LINE #43] WS-REAS-CD (level: 7)
        private @Getter @Setter @Builder.Default int wsReasCd = 0;
        // [T-Up#INFO][COCRDUPC.cbl, LINE #45] WS-TRANID (level: 7)
        private @Getter @Builder.Default String wsTranid = StringUtils.repeat(
                ' ', 4);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #47] WS-UCTRANS (level: 7)
        private @Getter @Builder.Default String wsUctrans = StringUtils.repeat(
                ' ', 4);

        public void setWsTranid(String source) {
            wsTranid = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
        }

        public void setWsUctrans(String source) {
            wsUctrans = StringUtils
                    .truncate(StringUtils.rightPad(source, 4), 4);
        }

        public static CocrdupcWsCicsProcessngVars createDefaultValueInstance() {
            return new CocrdupcWsCicsProcessngVars.builder().wsRespCd(0)
                    .wsReasCd(0).wsTranid(StringUtils.repeat(' ', 4))
                    .wsUctrans(StringUtils.repeat(' ', 4)).build();
        }

        public void set(String source) {
            ByteBuffer tempByteBuffer1;
            source = StringUtils.truncate(StringUtils.rightPad(source, 16), 16);
            try {
                tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
                tempByteBuffer1.put(source.substring(0, 4).getBytes(
                        StandardCharsets.ISO_8859_1));
                tempByteBuffer1.flip();
                wsRespCd = tempByteBuffer1.getInt();
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                wsRespCd = 0;
            }
            try {
                tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
                tempByteBuffer1.put(source.substring(4, 8).getBytes(
                        StandardCharsets.ISO_8859_1));
                tempByteBuffer1.flip();
                wsReasCd = tempByteBuffer1.getInt();
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                wsReasCd = 0;
            }
            wsTranid = source.substring(8, 12);
            wsUctrans = source.substring(12, 16);
        }

        public String get() {
            ByteBuffer tempByteBuffer1;
            StringBuilder sb = new StringBuilder();
            tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
            tempByteBuffer1.putInt(wsRespCd);
            tempByteBuffer1.flip();
            sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                    .toString());
            tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
            tempByteBuffer1.putInt(wsReasCd);
            tempByteBuffer1.flip();
            sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                    .toString());
            sb.append(wsTranid);
            sb.append(wsUctrans);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(String.valueOf(getWsRespCd()));
            sb.append(String.valueOf(getWsReasCd()));
            sb.append(getWsTranid());
            sb.append(getWsUctrans());
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdupcCicsOutputEditVars {
        // [T-Up#INFO][COCRDUPC.cbl, LINE #104] CARD-ACCT-ID-X (level: 10)
        private @Getter @Builder.Default String cardAcctIdX = StringUtils
                .repeat(' ', 11);

        public long getCardAcctIdN() {
            try {
                return DataConverter
                        .convZonedStringToLong(getCardAcctIdX(), 11);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setCardAcctIdN(long source) {
            String temp1 = DataConverter.convZonedLongToString(source, 11);
            setCardAcctIdX(temp1);
        }

        // [T-Up#INFO][COCRDUPC.cbl, LINE #107] CARD-CVV-CD-X (level: 10)
        private @Getter @Builder.Default String cardCvvCdX = StringUtils
                .repeat(' ', 3);

        public int getCardCvvCdN() {
            try {
                return (int) DataConverter.convZonedStringToLong(
                        getCardCvvCdX(), 3);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setCardCvvCdN(int source) {
            String temp1 = DataConverter.convZonedLongToString(source, 3);
            setCardCvvCdX(temp1);
        }

        // [T-Up#INFO][COCRDUPC.cbl, LINE #110] CARD-CARD-NUM-X (level: 10)
        private @Getter @Builder.Default String cardCardNumX = StringUtils
                .repeat(' ', 16);

        public long getCardCardNumN() {
            try {
                return DataConverter.convZonedStringToLong(getCardCardNumX(),
                        16);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setCardCardNumN(long source) {
            String temp1 = DataConverter.convZonedLongToString(source, 16);
            setCardCardNumX(temp1);
        }

        // [T-Up#INFO][COCRDUPC.cbl, LINE #113] CARD-NAME-EMBOSSED-X (level: 10)
        private @Getter @Builder.Default String cardNameEmbossedX = StringUtils
                .repeat(' ', 50);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #114] CARD-STATUS-X (level: 10)
        private @Getter @Builder.Default String cardStatusX = StringUtils
                .repeat(' ', 1);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #115] CARD-EXPIRAION-DATE-X (level: 10)
        private @Getter @Builder.Default String cardExpiraionDateX = StringUtils
                .repeat(' ', 10);

        public _OFFILLER1 getOFFILLER1() {
            return _OFFILLER1.builder().cardExpiryYear(getCardExpiryYear())
                    .OFFILLER2(getOFFILLER2())
                    .cardExpiryMonth(getCardExpiryMonth())
                    .OFFILLER3(getOFFILLER3())
                    .cardExpiryDay(getCardExpiryDay()).build();
        }

        public void setOFFILLER1(String source) {
            setCardExpiryYear(source.substring(0, 4));
            setOFFILLER2(source.substring(4, 5));
            setCardExpiryMonth(source.substring(5, 7));
            setOFFILLER3(source.substring(7, 8));
            setCardExpiryDay(source.substring(8, 10));
        }

        public void setOFFILLER1(_OFFILLER1 source) {
            setOFFILLER1(source.toString());
        }

        public String getCardExpiryYear() {
            return getCardExpiraionDateX().substring(0, 4);
        }

        public void setCardExpiryYear(String source) {
            setCardExpiraionDateX(StringUtils.overlay(getCardExpiraionDateX(),
                    source, 0, 4));
        }

        public String getOFFILLER2() {
            return getCardExpiraionDateX().substring(4, 5);
        }

        public void setOFFILLER2(String source) {
            setCardExpiraionDateX(StringUtils.overlay(getCardExpiraionDateX(),
                    source, 4, 5));
        }

        public String getCardExpiryMonth() {
            return getCardExpiraionDateX().substring(5, 7);
        }

        public void setCardExpiryMonth(String source) {
            setCardExpiraionDateX(StringUtils.overlay(getCardExpiraionDateX(),
                    source, 5, 7));
        }

        public String getOFFILLER3() {
            return getCardExpiraionDateX().substring(7, 8);
        }

        public void setOFFILLER3(String source) {
            setCardExpiraionDateX(StringUtils.overlay(getCardExpiraionDateX(),
                    source, 7, 8));
        }

        public String getCardExpiryDay() {
            return getCardExpiraionDateX().substring(8);
        }

        public void setCardExpiryDay(String source) {
            setCardExpiraionDateX(StringUtils.overlay(getCardExpiraionDateX(),
                    source, 8, 10));
        }

        public long getCardExpiraionDateN() {
            try {
                return DataConverter.convZonedStringToLong(
                        getCardExpiraionDateX(), 10);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setCardExpiraionDateN(long source) {
            String temp1 = DataConverter.convZonedLongToString(source, 10);
            setCardExpiraionDateX(temp1);
        }

        public void setCardAcctIdX(String source) {
            cardAcctIdX = StringUtils.truncate(
                    StringUtils.rightPad(source, 11), 11);
        }

        public void setCardCvvCdX(String source) {
            cardCvvCdX = StringUtils.truncate(StringUtils.rightPad(source, 3),
                    3);
        }

        public void setCardCardNumX(String source) {
            cardCardNumX = StringUtils.truncate(
                    StringUtils.rightPad(source, 16), 16);
        }

        public void setCardNameEmbossedX(String source) {
            cardNameEmbossedX = StringUtils.truncate(
                    StringUtils.rightPad(source, 50), 50);
        }

        public void setCardStatusX(String source) {
            cardStatusX = StringUtils.truncate(StringUtils.rightPad(source, 1),
                    1);
        }

        public void setCardExpiraionDateX(String source) {
            cardExpiraionDateX = StringUtils.truncate(
                    StringUtils.rightPad(source, 10), 10);
        }

        public static CocrdupcCicsOutputEditVars createDefaultValueInstance() {
            return new CocrdupcCicsOutputEditVars.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 91), 91);
            cardAcctIdX = source.substring(0, 11);
            cardCvvCdX = source.substring(11, 14);
            cardCardNumX = source.substring(14, 30);
            cardNameEmbossedX = source.substring(30, 80);
            cardStatusX = source.substring(80, 81);
            cardExpiraionDateX = source.substring(81, 91);
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(cardAcctIdX);
            sb.append(cardCvvCdX);
            sb.append(cardCardNumX);
            sb.append(cardNameEmbossedX);
            sb.append(cardStatusX);
            sb.append(cardExpiraionDateX);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getCardAcctIdX());
            sb.append(getCardCvvCdX());
            sb.append(getCardCardNumX());
            sb.append(getCardNameEmbossedX());
            sb.append(getCardStatusX());
            sb.append(getCardExpiraionDateX());
            return sb.toString();
        }

        public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER1 {
            // [T-Up#INFO][COCRDUPC.cbl, LINE #117] CARD-EXPIRY-YEAR (level: 20)
            private @Getter @Builder.Default String cardExpiryYear = StringUtils
                    .repeat(' ', 4);
            // [T-Up#INFO][COCRDUPC.cbl, LINE #118] FILLER (level: 20)
            private @Getter @Builder.Default String OFFILLER2 = StringUtils
                    .repeat(' ', 1);
            // [T-Up#INFO][COCRDUPC.cbl, LINE #119] CARD-EXPIRY-MONTH (level: 20)
            private @Getter @Builder.Default String cardExpiryMonth = StringUtils
                    .repeat(' ', 2);
            // [T-Up#INFO][COCRDUPC.cbl, LINE #120] FILLER (level: 20)
            private @Getter @Builder.Default String OFFILLER3 = StringUtils
                    .repeat(' ', 1);
            // [T-Up#INFO][COCRDUPC.cbl, LINE #121] CARD-EXPIRY-DAY (level: 20)
            private @Getter @Builder.Default String cardExpiryDay = StringUtils
                    .repeat(' ', 2);

            public String get() {
                StringBuilder sb = new StringBuilder();
                sb.append(cardExpiryYear);
                sb.append(OFFILLER2);
                sb.append(cardExpiryMonth);
                sb.append(OFFILLER3);
                sb.append(cardExpiryDay);
                return sb.toString();
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append(cardExpiryYear);
                sb.append(OFFILLER2);
                sb.append(cardExpiryMonth);
                sb.append(OFFILLER3);
                sb.append(cardExpiryDay);
                return sb.toString();
            }
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdupcWsCardRid {
        // [T-Up#INFO][COCRDUPC.cbl, LINE #129] WS-CARD-RID-CARDNUM (level: 10)
        private @Getter @Builder.Default String wsCardRidCardnum = StringUtils
                .repeat(' ', 16);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #130] WS-CARD-RID-ACCT-ID (level: 10)
        private @Getter @Setter long wsCardRidAcctId;

        public String getWsCardRidAcctIdX() {
            String temp1 = DataConverter.convZonedLongToString(
                    getWsCardRidAcctId(), 11);
            return temp1;
        }

        public void setWsCardRidAcctIdX(String source) {
            try {
                setWsCardRidAcctId(DataConverter.convZonedStringToLong(source,
                        11));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCardRidAcctId(0);
            }
        }

        public void setWsCardRidCardnum(String source) {
            wsCardRidCardnum = StringUtils.truncate(
                    StringUtils.rightPad(source, 16), 16);
        }

        public static CocrdupcWsCardRid createDefaultValueInstance() {
            return new CocrdupcWsCardRid.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 27), 27);
            wsCardRidCardnum = source.substring(0, 16);
            try {
                wsCardRidAcctId = DataConverter.convZonedStringToLong(
                        source.substring(16, 27), 11);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                wsCardRidAcctId = 0;
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(wsCardRidCardnum);
            sb.append(DataConverter.convZonedLongToString(wsCardRidAcctId, 11));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getWsCardRidCardnum());
            sb.append(PictureFormatter.intFormatWithoutSign(wsCardRidAcctId,
                    "00000000000"));
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdupcWsFileErrorMessage {
        // [T-Up#INFO][COCRDUPC.cbl, LINE #134] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER4 = "File Error: ";
        // [T-Up#INFO][COCRDUPC.cbl, LINE #136] ERROR-OPNAME (level: 10)
        private @Getter @Builder.Default String errorOpname = StringUtils
                .repeat(' ', 8);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #138] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER5 = " on ";
        // [T-Up#INFO][COCRDUPC.cbl, LINE #140] ERROR-FILE (level: 10)
        private @Getter @Builder.Default String errorFile = StringUtils.repeat(
                ' ', 9);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #142] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER6 = " returned RESP ";
        // [T-Up#INFO][COCRDUPC.cbl, LINE #145] ERROR-RESP (level: 10)
        private @Getter @Builder.Default String errorResp = StringUtils.repeat(
                ' ', 10);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #147] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER7 = ",RESP2 ";
        // [T-Up#INFO][COCRDUPC.cbl, LINE #149] ERROR-RESP2 (level: 10)
        private @Getter @Builder.Default String errorResp2 = StringUtils
                .repeat(' ', 10);
        // [T-Up#INFO][COCRDUPC.cbl, LINE #151] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER8 = StringUtils.repeat(
                ' ', 5);

        public void setOFFILLER4(String source) {
            OFFILLER4 = StringUtils.truncate(StringUtils.rightPad(source, 12),
                    12);
        }

        public void setErrorOpname(String source) {
            errorOpname = StringUtils.truncate(StringUtils.rightPad(source, 8),
                    8);
        }

        public void setOFFILLER5(String source) {
            OFFILLER5 = StringUtils
                    .truncate(StringUtils.rightPad(source, 4), 4);
        }

        public void setErrorFile(String source) {
            errorFile = StringUtils
                    .truncate(StringUtils.rightPad(source, 9), 9);
        }

        public void setOFFILLER6(String source) {
            OFFILLER6 = StringUtils.truncate(StringUtils.rightPad(source, 15),
                    15);
        }

        public void setErrorResp(String source) {
            errorResp = StringUtils.truncate(StringUtils.rightPad(source, 10),
                    10);
        }

        public void setOFFILLER7(String source) {
            OFFILLER7 = StringUtils
                    .truncate(StringUtils.rightPad(source, 7), 7);
        }

        public void setErrorResp2(String source) {
            errorResp2 = StringUtils.truncate(StringUtils.rightPad(source, 10),
                    10);
        }

        public void setOFFILLER8(String source) {
            OFFILLER8 = StringUtils
                    .truncate(StringUtils.rightPad(source, 5), 5);
        }

        public static CocrdupcWsFileErrorMessage createDefaultValueInstance() {
            return new CocrdupcWsFileErrorMessage.builder()
                    .OFFILLER4(StringUtils.repeat(' ', 12))
                    .errorOpname(StringUtils.repeat(' ', 8))
                    .OFFILLER5(StringUtils.repeat(' ', 4))
                    .errorFile(StringUtils.repeat(' ', 9))
                    .OFFILLER6(StringUtils.repeat(' ', 15))
                    .errorResp(StringUtils.repeat(' ', 10))
                    .OFFILLER7(StringUtils.repeat(' ', 7))
                    .errorResp2(StringUtils.repeat(' ', 10))
                    .OFFILLER8(StringUtils.repeat(' ', 5)).build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 80), 80);
            OFFILLER4 = source.substring(0, 12);
            errorOpname = source.substring(12, 20);
            OFFILLER5 = source.substring(20, 24);
            errorFile = source.substring(24, 33);
            OFFILLER6 = source.substring(33, 48);
            errorResp = source.substring(48, 58);
            OFFILLER7 = source.substring(58, 65);
            errorResp2 = source.substring(65, 75);
            OFFILLER8 = source.substring(75, 80);
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER4);
            sb.append(errorOpname);
            sb.append(OFFILLER5);
            sb.append(errorFile);
            sb.append(OFFILLER6);
            sb.append(errorResp);
            sb.append(OFFILLER7);
            sb.append(errorResp2);
            sb.append(OFFILLER8);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER4);
            sb.append(getErrorOpname());
            sb.append(OFFILLER5);
            sb.append(getErrorFile());
            sb.append(OFFILLER6);
            sb.append(getErrorResp());
            sb.append(OFFILLER7);
            sb.append(getErrorResp2());
            sb.append(OFFILLER8);
            return sb.toString();
        }
    }
}
