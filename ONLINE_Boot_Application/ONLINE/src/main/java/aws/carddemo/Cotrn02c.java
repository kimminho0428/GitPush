package aws.carddemo;

import com.tmax.openframe.online.service.api.ProgramControl;
import aws.carddemo.dto.Cosgn00cInputDto;
import aws.carddemo.mapper.Cotrn02cMapperInterface.*;
import aws.carddemo.dto.Comen01cInputDto;
import com.tmax.openframe.online.service.api.TaskInvoker;
import com.tmax.openframe.online.service.dto.taskdto.TaskDto;
import com.tmax.openframe.online.service.dto.taskdto.Data;
import com.tmax.openframe.online.service.api.Task;
import aws.carddemo.dto.Cotrn02cOutputDto;
import aws.carddemo.dto.Cotrn02cInputDto;
import com.tmax.openframe.online.service.exception.ConditionException;
import aws.carddemo.dto.AwsM2CarddemoCardxrefVsamKsdsDto;
import com.tmax.openframe.online.service.api.ReadPointManager;
import com.tmax.openframe.online.service.api.RecordKeyAccessor;
import aws.carddemo.dao.AwsM2CarddemoTransactVsamKsdsDao;
import aws.carddemo.dto.AwsM2CarddemoTransactVsamKsdsDto;
import com.tmax.openframe.online.service.dto.ReadPoint;
import com.tmax.openframe.online.service.api.ReadPointAccessor;
import static aws.carddemo.variable.group.Cotrn02cCarddemoCommarea.Cotrn02cCdemoGeneralInfo.*;
import static aws.carddemo.variable.group.Cotrn02cWsVariables.*;
import aws.carddemo.variable.Cotrn02cVariableContainer;
import aws.carddemo.variable.CsutldtcVariableContainer;
import aws.carddemo.variable.group.*;
import com.tmax.openframe.DataConverter;
import com.tmax.openframe.runtime.cobol.CobStringUtils;
import com.tmax.openframe.runtime.cobol.IntrinsicFunction;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.flow.ControlManager;
import java.math.*;
import java.util.*;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:49 UTC</p>
 * <hr>
 * <p>Java class for defining logics of COBOL program</p>
 * <ul>
 * <li>The name of COBOL program: COTRN02C.cbl</li>
 * <li>Variable container class: {@link Cotrn02cVariableContainer}</li>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Transactional
public class Cotrn02c {
    private final ReadPointAccessor readPointAccessor;
    private final ReadPointManager readPointManager;
    private final RecordKeyAccessor recordKeyAccessor;
    private final Task task;
    private final TaskInvoker taskInvoker;
    private final ProgramControl programControl;
    @Autowired
    private Csutldtc programCsutldtc;
    /** 
     * <p>Class that manages an execution flow of the program</p>
     */
    private final ControlManager controlManager;
    Consumer<OpenFrameContext> mainPara = this::mainPara;
    Consumer<OpenFrameContext> processEnterKey = this::processEnterKey;
    Consumer<OpenFrameContext> validateInputKeyFields = this::validateInputKeyFields;
    Consumer<OpenFrameContext> validateInputDataFields = this::validateInputDataFields;
    Consumer<OpenFrameContext> addTransaction = this::addTransaction;
    Consumer<OpenFrameContext> copyLastTranData = this::copyLastTranData;
    Consumer<OpenFrameContext> returnToPrevScreen = this::returnToPrevScreen;
    Consumer<OpenFrameContext> sendTrnaddScreen = this::sendTrnaddScreen;
    Consumer<OpenFrameContext> receiveTrnaddScreen = this::receiveTrnaddScreen;
    Consumer<OpenFrameContext> populateHeaderInfo = this::populateHeaderInfo;
    Consumer<OpenFrameContext> readCxacaixFile = this::readCxacaixFile;
    Consumer<OpenFrameContext> readCcxrefFile = this::readCcxrefFile;
    Consumer<OpenFrameContext> startbrTransactFile = this::startbrTransactFile;
    Consumer<OpenFrameContext> readprevTransactFile = this::readprevTransactFile;
    Consumer<OpenFrameContext> endbrTransactFile = this::endbrTransactFile;
    Consumer<OpenFrameContext> writeTransactFile = this::writeTransactFile;
    Consumer<OpenFrameContext> clearCurrentScreen = this::clearCurrentScreen;
    Consumer<OpenFrameContext> initializeAllFields = this::initializeAllFields;
    /** 
     * <p>execution flow of COBOL program that defined in the procedure division</p>
     */
    ArrayList<Consumer> methodList = new ArrayList<>();
    {
        methodList.add(mainPara);
        methodList.add(processEnterKey);
        methodList.add(validateInputKeyFields);
        methodList.add(validateInputDataFields);
        methodList.add(addTransaction);
        methodList.add(copyLastTranData);
        methodList.add(returnToPrevScreen);
        methodList.add(sendTrnaddScreen);
        methodList.add(receiveTrnaddScreen);
        methodList.add(populateHeaderInfo);
        methodList.add(readCxacaixFile);
        methodList.add(readCcxrefFile);
        methodList.add(startbrTransactFile);
        methodList.add(readprevTransactFile);
        methodList.add(endbrTransactFile);
        methodList.add(writeTransactFile);
        methodList.add(clearCurrentScreen);
        methodList.add(initializeAllFields);
    }

    /** 
     * <p>method for executing a program logic that defined in the procedure division</p>
     * @param generalContext context that is necessary for executing program
     * @return return value of program
     */
    public int run(Map<String, Object> generalContext) {
        OpenFrameContext context = new OpenFrameContext(generalContext,
                methodList);
        if (context.getProgramVariableContainer("Cotrn02c") == null) {
            Cotrn02cVariableContainer container = new Cotrn02cVariableContainer();
            context.setProgramVariableContainer("Cotrn02c", container);
        }
        controlManager.run(context);
        return context.getReturnValue();
    }

    // ******************************************************************
    // * Program     : COTRN02C.CBL                                      
    // * Application : CardDemo                                          
    // * Type        : CICS COBOL Program                                
    // * Function    : Add a new Transaction to TRANSACT file            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // *      OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.             
    // *----------------------------------------------------------------*
    // *                       PROCEDURE DIVISION                        
    // *----------------------------------------------------------------*

    void mainPara(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #109] SET statement
        container.getWsVariables().setWsErrFlg(ERR_FLG_OFF);
        // [T-Up#INFO][COTRN02C.cbl, LINE #110] SET statement
        container.getWsVariables().setWsUsrModified(USR_MODIFIED_NO);
        // [T-Up#INFO][COTRN02C.cbl, LINE #112] MOVE statement
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
        container.setErrmsgo(StringUtils.repeat(' ', 78));
        // [T-Up#INFO][COTRN02C.cbl, LINE #115] IF statement
        if (task.hasCommarea() == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #116] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoToProgram("COSGN00C");
            // [T-Up#INFO][COTRN02C.cbl, LINE #117] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromTranid(
                            container.getWsVariables().getWsTranid());
            // [T-Up#INFO][COTRN02C.cbl, LINE #118] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromProgram(
                            container.getWsVariables().getWsPgmname());
            // [T-Up#INFO][COTRN02C.cbl, LINE #119] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoPgmContext(0);
            // [T-Up#INFO][COTRN02C.cbl, LINE #120] EXEC_CICS statement
            /*
                               EXEC CICS                                                
                               XCTL PROGRAM('COSGN00C')                                 
                               COMMAREA(CARDDEMO-COMMAREA)                              
                               END-EXEC
             */
            Cosgn00cInputDto cosgn00cInputDto = new Cosgn00cInputDto();
            cosgn00cInputDto
                    .setDfhcommarea(Cotrn02cCarddemoCommareaToCosgn00cDfhcommarea.INSTANCE
                            .toTarget(container.getCarddemoCommarea()));
            programControl.forward("CC00", cosgn00cInputDto);
            context.setReturnFlag(true);
            // [T-Up#INFO][COTRN02C.cbl, LINE #124] PERFORM statement
            controlManager.run(context, returnToPrevScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #126] MOVE statement
            container.getCarddemoCommarea().set(
                    StringUtils.overlay(container.getCarddemoCommarea().get(),
                            container.getDfhcommarea().get().substring(0, 218),
                            0, 218));
            // [T-Up#INFO][COTRN02C.cbl, LINE #127] IF statement
            if (!(container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .getCdemoPgmContext() == CDEMO_PGM_REENTER)) {
                // [T-Up#INFO][COTRN02C.cbl, LINE #128] SET statement
                container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .setCdemoPgmContext(CDEMO_PGM_REENTER);
                // [T-Up#INFO][COTRN02C.cbl, LINE #129] MOVE statement
                container.setCotrn2ao(Cotrn02cCotrn2ai
                        .createDefaultValueInstance().get());
                // [T-Up#INFO][COTRN02C.cbl, LINE #130] MOVE statement
                container.getCotrn2ai().setActidinl(-1);
                // [T-Up#INFO][COTRN02C.cbl, LINE #131] IF statement
                if (CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoCt02Info().getCdemoCt02TrnSelected(),
                        StringUtils.repeat(' ', 16)) != 0
                        && CobStringUtils.compare(container
                                .getCarddemoCommarea().getCdemoCt02Info()
                                .getCdemoCt02TrnSelected(),
                                StringUtils.repeat((char) 0x00, 16)) != 0) {
                    // [T-Up#INFO][COTRN02C.cbl, LINE #133] MOVE statement
                    container.getCotrn2ai().setCardnini(
                            container.getCarddemoCommarea().getCdemoCt02Info()
                                    .getCdemoCt02TrnSelected());
                    // [T-Up#INFO][COTRN02C.cbl, LINE #135] PERFORM statement
                    controlManager.run(context, processEnterKey);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
                // [T-Up#INFO][COTRN02C.cbl, LINE #137] PERFORM statement
                controlManager.run(context, sendTrnaddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            } else {
                // [T-Up#INFO][COTRN02C.cbl, LINE #139] PERFORM statement
                controlManager.run(context, receiveTrnaddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][COTRN02C.cbl, LINE #140] EVALUATE statement
                if (CobStringUtils.compare(task.getPressedKey(), container
                        .getDfhaid().getDfhenter()) == 0) {
                    // [T-Up#INFO][COTRN02C.cbl, LINE #142] PERFORM statement
                    controlManager.run(context, processEnterKey);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf3()) == 0) {
                    // [T-Up#INFO][COTRN02C.cbl, LINE #144] IF statement
                    if (CobStringUtils.compare(container.getCarddemoCommarea()
                            .getCdemoGeneralInfo().getCdemoFromProgram(),
                            StringUtils.repeat(' ', 8)) == 0
                            || CobStringUtils.compare(container
                                    .getCarddemoCommarea()
                                    .getCdemoGeneralInfo()
                                    .getCdemoFromProgram(),
                                    StringUtils.repeat((char) 0x00, 8)) == 0) {
                        // [T-Up#INFO][COTRN02C.cbl, LINE #145] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoToProgram("COMEN01C");
                        // [T-Up#INFO][COTRN02C.cbl, LINE #146] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromTranid(
                                        container.getWsVariables()
                                                .getWsTranid());
                        // [T-Up#INFO][COTRN02C.cbl, LINE #147] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromProgram(
                                        container.getWsVariables()
                                                .getWsPgmname());
                        // [T-Up#INFO][COTRN02C.cbl, LINE #148] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoPgmContext(0);
                        // [T-Up#INFO][COTRN02C.cbl, LINE #149] EXEC_CICS statement
                        /*
                                                           EXEC CICS                                
                                                           XCTL PROGRAM('COMEN01C')                 
                                                           COMMAREA(CARDDEMO-COMMAREA)              
                                                           END-EXEC
                         */
                        Comen01cInputDto comen01cInputDto = new Comen01cInputDto();
                        comen01cInputDto
                                .setDfhcommarea(Cotrn02cCarddemoCommareaToComen01cDfhcommarea.INSTANCE
                                        .toTarget(container
                                                .getCarddemoCommarea()));
                        programControl.forward("CM00", comen01cInputDto);
                        context.setReturnFlag(true);
                    } else {
                        // [T-Up#INFO][COTRN02C.cbl, LINE #154] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoToProgram(
                                        container.getCarddemoCommarea()
                                                .getCdemoGeneralInfo()
                                                .getCdemoFromProgram());
                        // [T-Up#INFO][COTRN02C.cbl, LINE #156] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromTranid(
                                        container.getWsVariables()
                                                .getWsTranid());
                        // [T-Up#INFO][COTRN02C.cbl, LINE #157] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromProgram(
                                        container.getWsVariables()
                                                .getWsPgmname());
                        // [T-Up#INFO][COTRN02C.cbl, LINE #158] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoPgmContext(0);
                        // [T-Up#INFO][COTRN02C.cbl, LINE #159] EXEC_CICS statement
                        /*
                                                           EXEC CICS                                
                                                           XCTL PROGRAM('COMEN01C')                 
                                                           COMMAREA(CARDDEMO-COMMAREA)              
                                                           END-EXEC
                         */
                        Comen01cInputDto comen01cInputDto = new Comen01cInputDto();
                        comen01cInputDto
                                .setDfhcommarea(Cotrn02cCarddemoCommareaToComen01cDfhcommarea.INSTANCE
                                        .toTarget(container
                                                .getCarddemoCommarea()));
                        programControl.forward("CM00", comen01cInputDto);
                        context.setReturnFlag(true);
                    }
                    // [T-Up#INFO][COTRN02C.cbl, LINE #164] PERFORM statement
                    controlManager.run(context, returnToPrevScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf4()) == 0) {
                    // [T-Up#INFO][COTRN02C.cbl, LINE #166] PERFORM statement
                    controlManager.run(context, clearCurrentScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf5()) == 0) {
                    // [T-Up#INFO][COTRN02C.cbl, LINE #168] PERFORM statement
                    controlManager.run(context, copyLastTranData);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else {
                    // [T-Up#INFO][COTRN02C.cbl, LINE #170] MOVE statement
                    container.getWsVariables().setWsErrFlg("Y");
                    // [T-Up#INFO][COTRN02C.cbl, LINE #171] MOVE statement
                    container.getWsVariables().setWsMessage(
                            container.getCcdaCommonMessages()
                                    .getCcdaMsgInvalidKey());
                    // [T-Up#INFO][COTRN02C.cbl, LINE #172] PERFORM statement
                    controlManager.run(context, sendTrnaddScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
            }
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #177] EXEC_CICS statement
        /*
                       EXEC CICS RETURN                                             
                                 TRANSID (WS-TRANID)                                
                                 COMMAREA (CARDDEMO-COMMAREA)                       
                       END-EXEC
         */
        TaskDto taskDto = TaskDto
                .builder()
                .destination("CT02")
                .data(Data
                        .session(Cotrn02cCarddemoCommareaToCotrn02cDfhcommarea.INSTANCE
                                .toTarget(container.getCarddemoCommarea())))
                .build();
        taskInvoker.setNextTask(taskDto);
        context.setReturnFlag(true);
    }

    // *----------------------------------------------------------------*
    // *                      PROCESS-ENTER-KEY                          
    // *----------------------------------------------------------------*

    void processEnterKey(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #187] PERFORM statement
        controlManager.run(context, validateInputKeyFields);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #188] PERFORM statement
        controlManager.run(context, validateInputDataFields);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #190] EVALUATE statement
        if ((CobStringUtils.compare(container.getCotrn2ai().getConfirmi(), "Y") == 0)
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getConfirmi(), "y") == 0)) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #193] PERFORM statement
            controlManager.run(context, addTransaction);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if ((CobStringUtils.compare(container.getCotrn2ai()
                .getConfirmi(), "N") == 0)
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getConfirmi(), "n") == 0)
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getConfirmi(), " ") == 0)
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getConfirmi(), StringUtils.repeat((char) 0x00, 1)) == 0)) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #198] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #199] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Confirm to add this transaction...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #201] MOVE statement
            container.getCotrn2ai().setConfirml(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #202] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #204] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #205] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Invalid value. Valid values are (Y/N)...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #207] MOVE statement
            container.getCotrn2ai().setConfirml(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #208] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      VALIDATE-INPUT-KEY-FIELDS                  
    // *----------------------------------------------------------------*

    void validateInputKeyFields(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #216] EVALUATE statement
        if (CobStringUtils.compare(container.getCotrn2ai().getActidini(),
                StringUtils.repeat(' ', 11)) != 0
                && CobStringUtils.compare(
                        container.getCotrn2ai().getActidini(),
                        StringUtils.repeat((char) 0x00, 11)) != 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #218] IF statement
            if (!StringUtils.isNumeric(container.getCotrn2ai().getActidini())) {
                // [T-Up#INFO][COTRN02C.cbl, LINE #219] MOVE statement
                container.getWsVariables().setWsErrFlg("Y");
                // [T-Up#INFO][COTRN02C.cbl, LINE #220] MOVE statement
                container.getWsVariables().setWsMessage(
                        "Account ID must be Numeric...");
                // [T-Up#INFO][COTRN02C.cbl, LINE #222] MOVE statement
                container.getCotrn2ai().setActidinl(-1);
                // [T-Up#INFO][COTRN02C.cbl, LINE #223] PERFORM statement
                controlManager.run(context, sendTrnaddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
            // [T-Up#INFO][COTRN02C.cbl, LINE #225] COMPUTE statement
            container.getWsVariables().setWsAcctIdN(
                    (long) IntrinsicFunction.functionNumval(container
                            .getCotrn2ai().getActidini()));
            // [T-Up#INFO][COTRN02C.cbl, LINE #227] MOVE statement
            container.getCardXrefRecord().setXrefAcctId(
                    container.getWsVariables().getWsAcctIdN());
            container.getCotrn2ai().setActidini(
                    StringUtils.leftPad(String.valueOf(Math.abs(container
                            .getWsVariables().getWsAcctIdN())), 11, '0'));
            // [T-Up#INFO][COTRN02C.cbl, LINE #229] PERFORM statement
            controlManager.run(context, readCxacaixFile);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COTRN02C.cbl, LINE #230] MOVE statement
            container.getCotrn2ai().setCardnini(
                    container.getCardXrefRecord().getXrefCardNum());
        } else if (CobStringUtils.compare(
                container.getCotrn2ai().getCardnini(),
                StringUtils.repeat(' ', 16)) != 0
                && CobStringUtils.compare(
                        container.getCotrn2ai().getCardnini(),
                        StringUtils.repeat((char) 0x00, 16)) != 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #232] IF statement
            if (!StringUtils.isNumeric(container.getCotrn2ai().getCardnini())) {
                // [T-Up#INFO][COTRN02C.cbl, LINE #233] MOVE statement
                container.getWsVariables().setWsErrFlg("Y");
                // [T-Up#INFO][COTRN02C.cbl, LINE #234] MOVE statement
                container.getWsVariables().setWsMessage(
                        "Card Number must be Numeric...");
                // [T-Up#INFO][COTRN02C.cbl, LINE #236] MOVE statement
                container.getCotrn2ai().setCardninl(-1);
                // [T-Up#INFO][COTRN02C.cbl, LINE #237] PERFORM statement
                controlManager.run(context, sendTrnaddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
            // [T-Up#INFO][COTRN02C.cbl, LINE #239] COMPUTE statement
            container.getWsVariables().setWsCardNumN(
                    (long) IntrinsicFunction.functionNumval(container
                            .getCotrn2ai().getCardnini()));
            // [T-Up#INFO][COTRN02C.cbl, LINE #241] MOVE statement
            container.getCardXrefRecord().setXrefCardNum(
                    StringUtils.leftPad(String.valueOf(Math.abs(container
                            .getWsVariables().getWsCardNumN())), 16, '0'));
            container.getCotrn2ai().setCardnini(
                    StringUtils.leftPad(String.valueOf(Math.abs(container
                            .getWsVariables().getWsCardNumN())), 16, '0'));
            // [T-Up#INFO][COTRN02C.cbl, LINE #243] PERFORM statement
            controlManager.run(context, readCcxrefFile);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COTRN02C.cbl, LINE #244] MOVE statement
            container.getCotrn2ai().setActidini(
                    StringUtils.leftPad(String.valueOf(Math.abs(container
                            .getCardXrefRecord().getXrefAcctId())), 11, '0'));
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #246] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #247] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Account or Card Number must be entered...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #249] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #250] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                 VALIDATE-INPUT-DATA-FIELDS                      
    // *----------------------------------------------------------------*

    void validateInputDataFields(OpenFrameContext context) {
        int tempint1;
        CsutldtcVariableContainer tempCsutldtcVariableContainer1;
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #258] IF statement
        if (CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #259] MOVE statement
            container.getCotrn2ai().setTtypcdi(StringUtils.repeat(' ', 2));
            container.getCotrn2ai().setTcatcdi(StringUtils.repeat(' ', 4));
            container.getCotrn2ai().setTrnsrci(StringUtils.repeat(' ', 10));
            container.getCotrn2ai().setTrnamti(StringUtils.repeat(' ', 12));
            container.getCotrn2ai().setTdesci(StringUtils.repeat(' ', 60));
            container.getCotrn2ai().setTorigdti(StringUtils.repeat(' ', 10));
            container.getCotrn2ai().setTprocdti(StringUtils.repeat(' ', 10));
            container.getCotrn2ai().setMidi(StringUtils.repeat(' ', 9));
            container.getCotrn2ai().setMnamei(StringUtils.repeat(' ', 30));
            container.getCotrn2ai().setMcityi(StringUtils.repeat(' ', 25));
            container.getCotrn2ai().setMzipi(StringUtils.repeat(' ', 10));
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #272] EVALUATE statement
        if (CobStringUtils.compare(container.getCotrn2ai().getTtypcdi(),
                StringUtils.repeat(' ', 2)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getTtypcdi(),
                        StringUtils.repeat((char) 0x00, 2)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #274] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #275] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Type CD can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #277] MOVE statement
            container.getCotrn2ai().setTtypcdl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #278] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getTcatcdi(),
                StringUtils.repeat(' ', 4)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getTcatcdi(),
                        StringUtils.repeat((char) 0x00, 4)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #280] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #281] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Category CD can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #283] MOVE statement
            container.getCotrn2ai().setTcatcdl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #284] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getTrnsrci(),
                StringUtils.repeat(' ', 10)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getTrnsrci(),
                        StringUtils.repeat((char) 0x00, 10)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #286] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #287] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Source can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #289] MOVE statement
            container.getCotrn2ai().setTrnsrcl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #290] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getTdesci(),
                StringUtils.repeat(' ', 60)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getTdesci(),
                        StringUtils.repeat((char) 0x00, 60)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #292] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #293] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Description can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #295] MOVE statement
            container.getCotrn2ai().setTdescl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #296] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getTrnamti(),
                StringUtils.repeat(' ', 12)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getTrnamti(),
                        StringUtils.repeat((char) 0x00, 12)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #298] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #299] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Amount can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #301] MOVE statement
            container.getCotrn2ai().setTrnamtl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #302] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(
                container.getCotrn2ai().getTorigdti(),
                StringUtils.repeat(' ', 10)) == 0
                || CobStringUtils.compare(
                        container.getCotrn2ai().getTorigdti(),
                        StringUtils.repeat((char) 0x00, 10)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #304] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #305] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Orig Date can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #307] MOVE statement
            container.getCotrn2ai().setTorigdtl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #308] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(
                container.getCotrn2ai().getTprocdti(),
                StringUtils.repeat(' ', 10)) == 0
                || CobStringUtils.compare(
                        container.getCotrn2ai().getTprocdti(),
                        StringUtils.repeat((char) 0x00, 10)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #310] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #311] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Proc Date can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #313] MOVE statement
            container.getCotrn2ai().setTprocdtl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #314] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getMidi(),
                StringUtils.repeat(' ', 9)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getMidi(),
                        StringUtils.repeat((char) 0x00, 9)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #316] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #317] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Merchant ID can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #319] MOVE statement
            container.getCotrn2ai().setMidl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #320] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getMnamei(),
                StringUtils.repeat(' ', 30)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getMnamei(),
                        StringUtils.repeat((char) 0x00, 30)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #322] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #323] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Merchant Name can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #325] MOVE statement
            container.getCotrn2ai().setMnamel(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #326] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getMcityi(),
                StringUtils.repeat(' ', 25)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getMcityi(),
                        StringUtils.repeat((char) 0x00, 25)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #328] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #329] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Merchant City can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #331] MOVE statement
            container.getCotrn2ai().setMcityl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #332] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCotrn2ai().getMzipi(),
                StringUtils.repeat(' ', 10)) == 0
                || CobStringUtils.compare(container.getCotrn2ai().getMzipi(),
                        StringUtils.repeat((char) 0x00, 10)) == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #334] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #335] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Merchant Zip can NOT be empty...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #337] MOVE statement
            container.getCotrn2ai().setMzipl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #338] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #340] CONTINUE statement
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #343] EVALUATE statement
        if (!StringUtils.isNumeric(container.getCotrn2ai().getTtypcdi())) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #345] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #346] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Type CD must be Numeric...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #348] MOVE statement
            container.getCotrn2ai().setTtypcdl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #349] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (!StringUtils.isNumeric(container.getCotrn2ai().getTcatcdi())) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #351] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #352] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Category CD must be Numeric...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #354] MOVE statement
            container.getCotrn2ai().setTcatcdl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #355] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #357] CONTINUE statement
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #360] EVALUATE statement
        if ((CobStringUtils.compare(container.getCotrn2ai().getTrnamti()
                .substring(0, 1), "-") != 0 && CobStringUtils.compare(container
                .getCotrn2ai().getTrnamti().substring(0, 1), "+") != 0)
                || (!StringUtils.isNumeric(container.getCotrn2ai().getTrnamti()
                        .substring(1, 9)))
                || (CobStringUtils.compare(container.getCotrn2ai().getTrnamti()
                        .substring(9, 10), ".") != 0)
                || (!StringUtils.isNumeric(container.getCotrn2ai().getTrnamti()
                        .substring(10, 12)))) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #365] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #366] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Amount should be in format -99999999.99");
            // [T-Up#INFO][COTRN02C.cbl, LINE #368] MOVE statement
            container.getCotrn2ai().setTrnamtl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #369] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #371] CONTINUE statement
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #374] EVALUATE statement
        if ((!StringUtils.isNumeric(container.getCotrn2ai().getTorigdti()
                .substring(0, 4)))
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getTorigdti().substring(4, 5), "-") != 0)
                || (!StringUtils.isNumeric(container.getCotrn2ai()
                        .getTorigdti().substring(5, 7)))
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getTorigdti().substring(7, 8), "-") != 0)
                || (!StringUtils.isNumeric(container.getCotrn2ai()
                        .getTorigdti().substring(8, 10)))) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #380] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #381] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Orig Date should be in format YYYY-MM-DD");
            // [T-Up#INFO][COTRN02C.cbl, LINE #383] MOVE statement
            container.getCotrn2ai().setTorigdtl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #384] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #386] CONTINUE statement
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #389] EVALUATE statement
        if ((!StringUtils.isNumeric(container.getCotrn2ai().getTprocdti()
                .substring(0, 4)))
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getTprocdti().substring(4, 5), "-") != 0)
                || (!StringUtils.isNumeric(container.getCotrn2ai()
                        .getTprocdti().substring(5, 7)))
                || (CobStringUtils.compare(container.getCotrn2ai()
                        .getTprocdti().substring(7, 8), "-") != 0)
                || (!StringUtils.isNumeric(container.getCotrn2ai()
                        .getTprocdti().substring(8, 10)))) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #395] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #396] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Proc Date should be in format YYYY-MM-DD");
            // [T-Up#INFO][COTRN02C.cbl, LINE #398] MOVE statement
            container.getCotrn2ai().setTprocdtl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #399] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #401] CONTINUE statement
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #404] COMPUTE statement
        container.getWsVariables().setWsTranAmtN(
                BigDecimal.valueOf(IntrinsicFunction.functionNumvalC(container
                        .getCotrn2ai().getTrnamti(), null)));
        // [T-Up#INFO][COTRN02C.cbl, LINE #406] MOVE statement
        container.getWsVariables().setWsTranAmtE(
                container.getWsVariables().getWsTranAmtN());
        // [T-Up#INFO][COTRN02C.cbl, LINE #407] MOVE statement
        container.getCotrn2ai().setTrnamti(
                container.getWsVariables().getWsTranAmtE());
        // [T-Up#INFO][COTRN02C.cbl, LINE #410] MOVE statement
        container.getCsutldtcParm().setCsutldtcDate(
                container.getCotrn2ai().getTorigdti());
        // [T-Up#INFO][COTRN02C.cbl, LINE #411] MOVE statement
        container.getCsutldtcParm().setCsutldtcDateFormat(
                container.getWsVariables().getWsDateFormat());
        // [T-Up#INFO][COTRN02C.cbl, LINE #412] MOVE statement
        container.getCsutldtcParm().getCsutldtcResult()
                .set(StringUtils.repeat(' ', 80));
        // [T-Up#INFO][COTRN02C.cbl, LINE #414] CALL statement
        tempint1 = programCsutldtc.run(context.getGeneralContext(), container
                .getCsutldtcParm().getCsutldtcDate(), container
                .getCsutldtcParm().getCsutldtcDateFormat(), container
                .getCsutldtcParm().getCsutldtcResult().get());
        context.setReturnValue(tempint1);
        tempCsutldtcVariableContainer1 = (CsutldtcVariableContainer) context
                .getProgramVariableContainer("Csutldtc");
        container.getCsutldtcParm().setCsutldtcDate(
                tempCsutldtcVariableContainer1.getLsDate());
        container.getCsutldtcParm().setCsutldtcDateFormat(
                tempCsutldtcVariableContainer1.getLsDateFormat());
        container.getCsutldtcParm().getCsutldtcResult()
                .set(tempCsutldtcVariableContainer1.getLsResult());
        // [T-Up#INFO][COTRN02C.cbl, LINE #418] IF statement
        if (CobStringUtils.compare(container.getCsutldtcParm()
                .getCsutldtcResult().getCsutldtcResultSevCd(), "0000") == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #419] CONTINUE statement
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #421] IF statement
            if (CobStringUtils.compare(container.getCsutldtcParm()
                    .getCsutldtcResult().getCsutldtcResultMsgNum(), "2513") != 0) {
                // [T-Up#INFO][COTRN02C.cbl, LINE #422] MOVE statement
                container.getWsVariables().setWsMessage(
                        "Orig Date - Not a valid date...");
                // [T-Up#INFO][COTRN02C.cbl, LINE #424] MOVE statement
                container.getWsVariables().setWsErrFlg("Y");
                // [T-Up#INFO][COTRN02C.cbl, LINE #425] MOVE statement
                container.getCotrn2ai().setTorigdtl(-1);
                // [T-Up#INFO][COTRN02C.cbl, LINE #426] PERFORM statement
                controlManager.run(context, sendTrnaddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #430] MOVE statement
        container.getCsutldtcParm().setCsutldtcDate(
                container.getCotrn2ai().getTprocdti());
        // [T-Up#INFO][COTRN02C.cbl, LINE #431] MOVE statement
        container.getCsutldtcParm().setCsutldtcDateFormat(
                container.getWsVariables().getWsDateFormat());
        // [T-Up#INFO][COTRN02C.cbl, LINE #432] MOVE statement
        container.getCsutldtcParm().getCsutldtcResult()
                .set(StringUtils.repeat(' ', 80));
        // [T-Up#INFO][COTRN02C.cbl, LINE #434] CALL statement
        tempint1 = programCsutldtc.run(context.getGeneralContext(), container
                .getCsutldtcParm().getCsutldtcDate(), container
                .getCsutldtcParm().getCsutldtcDateFormat(), container
                .getCsutldtcParm().getCsutldtcResult().get());
        context.setReturnValue(tempint1);
        tempCsutldtcVariableContainer1 = (CsutldtcVariableContainer) context
                .getProgramVariableContainer("Csutldtc");
        container.getCsutldtcParm().setCsutldtcDate(
                tempCsutldtcVariableContainer1.getLsDate());
        container.getCsutldtcParm().setCsutldtcDateFormat(
                tempCsutldtcVariableContainer1.getLsDateFormat());
        container.getCsutldtcParm().getCsutldtcResult()
                .set(tempCsutldtcVariableContainer1.getLsResult());
        // [T-Up#INFO][COTRN02C.cbl, LINE #438] IF statement
        if (CobStringUtils.compare(container.getCsutldtcParm()
                .getCsutldtcResult().getCsutldtcResultSevCd(), "0000") == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #439] CONTINUE statement
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #441] IF statement
            if (CobStringUtils.compare(container.getCsutldtcParm()
                    .getCsutldtcResult().getCsutldtcResultMsgNum(), "2513") != 0) {
                // [T-Up#INFO][COTRN02C.cbl, LINE #442] MOVE statement
                container.getWsVariables().setWsMessage(
                        "Proc Date - Not a valid date...");
                // [T-Up#INFO][COTRN02C.cbl, LINE #444] MOVE statement
                container.getWsVariables().setWsErrFlg("Y");
                // [T-Up#INFO][COTRN02C.cbl, LINE #445] MOVE statement
                container.getCotrn2ai().setTprocdtl(-1);
                // [T-Up#INFO][COTRN02C.cbl, LINE #446] PERFORM statement
                controlManager.run(context, sendTrnaddScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #451] IF statement
        if (!StringUtils.isNumeric(container.getCotrn2ai().getMidi())) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #452] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #453] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Merchant ID must be Numeric...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #455] MOVE statement
            container.getCotrn2ai().setMidl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #456] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                        ADD-TRANSACTION                          
    // *----------------------------------------------------------------*

    void addTransaction(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #465] MOVE statement
        container.getTranRecord()
                .setTranId(StringUtils.repeat((char) 0xFF, 16));
        // [T-Up#INFO][COTRN02C.cbl, LINE #466] PERFORM statement
        controlManager.run(context, startbrTransactFile);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #467] PERFORM statement
        controlManager.run(context, readprevTransactFile);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #468] PERFORM statement
        controlManager.run(context, endbrTransactFile);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #469] MOVE statement
        container.getWsVariables().setWsTranIdN(
                Long.parseLong(container.getTranRecord().getTranId().trim()));
        // [T-Up#INFO][COTRN02C.cbl, LINE #470] ADD statement
        container.getWsVariables().setWsTranIdN(
                (long) (container.getWsVariables().getWsTranIdN() + 1));
        // [T-Up#INFO][COTRN02C.cbl, LINE #471] INITIALIZE statement
        container
                .setTranRecord(Cotrn02cTranRecord.createDefaultValueInstance());
        // [T-Up#INFO][COTRN02C.cbl, LINE #472] MOVE statement
        container.getTranRecord().setTranId(
                StringUtils.leftPad(String.valueOf(Math.abs(container
                        .getWsVariables().getWsTranIdN())), 16, '0'));
        // [T-Up#INFO][COTRN02C.cbl, LINE #473] MOVE statement
        container.getTranRecord().setTranTypeCd(
                container.getCotrn2ai().getTtypcdi());
        // [T-Up#INFO][COTRN02C.cbl, LINE #474] MOVE statement
        container.getTranRecord().setTranCatCd(
                Integer.parseInt(container.getCotrn2ai().getTcatcdi().trim()));
        // [T-Up#INFO][COTRN02C.cbl, LINE #475] MOVE statement
        container.getTranRecord().setTranSource(
                container.getCotrn2ai().getTrnsrci());
        // [T-Up#INFO][COTRN02C.cbl, LINE #476] MOVE statement
        container.getTranRecord().setTranDesc(
                container.getCotrn2ai().getTdesci());
        // [T-Up#INFO][COTRN02C.cbl, LINE #477] COMPUTE statement
        container.getWsVariables().setWsTranAmtN(
                BigDecimal.valueOf(IntrinsicFunction.functionNumvalC(container
                        .getCotrn2ai().getTrnamti(), null)));
        // [T-Up#INFO][COTRN02C.cbl, LINE #479] MOVE statement
        container.getTranRecord().setTranAmt(
                container.getWsVariables().getWsTranAmtN());
        // [T-Up#INFO][COTRN02C.cbl, LINE #480] MOVE statement
        container.getTranRecord().setTranCardNum(
                container.getCotrn2ai().getCardnini());
        // [T-Up#INFO][COTRN02C.cbl, LINE #481] MOVE statement
        container.getTranRecord().setTranMerchantId(
                Integer.parseInt(container.getCotrn2ai().getMidi().trim()));
        // [T-Up#INFO][COTRN02C.cbl, LINE #482] MOVE statement
        container.getTranRecord().setTranMerchantName(
                container.getCotrn2ai().getMnamei());
        // [T-Up#INFO][COTRN02C.cbl, LINE #483] MOVE statement
        container.getTranRecord().setTranMerchantCity(
                container.getCotrn2ai().getMcityi());
        // [T-Up#INFO][COTRN02C.cbl, LINE #484] MOVE statement
        container.getTranRecord().setTranMerchantZip(
                container.getCotrn2ai().getMzipi());
        // [T-Up#INFO][COTRN02C.cbl, LINE #485] MOVE statement
        container.getTranRecord().setTranOrigTs(
                container.getCotrn2ai().getTorigdti());
        // [T-Up#INFO][COTRN02C.cbl, LINE #486] MOVE statement
        container.getTranRecord().setTranProcTs(
                container.getCotrn2ai().getTprocdti());
        // [T-Up#INFO][COTRN02C.cbl, LINE #487] PERFORM statement
        controlManager.run(context, writeTransactFile);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    // *----------------------------------------------------------------*
    // *                      COPY-LAST-TRAN-DATA                        
    // *----------------------------------------------------------------*

    void copyLastTranData(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #494] PERFORM statement
        controlManager.run(context, validateInputKeyFields);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #496] MOVE statement
        container.getTranRecord()
                .setTranId(StringUtils.repeat((char) 0xFF, 16));
        // [T-Up#INFO][COTRN02C.cbl, LINE #497] PERFORM statement
        controlManager.run(context, startbrTransactFile);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #498] PERFORM statement
        controlManager.run(context, readprevTransactFile);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #499] PERFORM statement
        controlManager.run(context, endbrTransactFile);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #501] IF statement
        if (!(CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0)) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #502] MOVE statement
            container.getWsVariables().setWsTranAmtE(
                    container.getTranRecord().getTranAmt());
            // [T-Up#INFO][COTRN02C.cbl, LINE #503] MOVE statement
            container.getCotrn2ai().setTtypcdi(
                    container.getTranRecord().getTranTypeCd());
            // [T-Up#INFO][COTRN02C.cbl, LINE #504] MOVE statement
            container.getCotrn2ai().setTcatcdi(
                    StringUtils.leftPad(String.valueOf(Math.abs(container
                            .getTranRecord().getTranCatCd())), 4, '0'));
            // [T-Up#INFO][COTRN02C.cbl, LINE #505] MOVE statement
            container.getCotrn2ai().setTrnsrci(
                    container.getTranRecord().getTranSource());
            // [T-Up#INFO][COTRN02C.cbl, LINE #506] MOVE statement
            container.getCotrn2ai().setTrnamti(
                    container.getWsVariables().getWsTranAmtE());
            // [T-Up#INFO][COTRN02C.cbl, LINE #507] MOVE statement
            container.getCotrn2ai().setTdesci(
                    container.getTranRecord().getTranDesc());
            // [T-Up#INFO][COTRN02C.cbl, LINE #508] MOVE statement
            container.getCotrn2ai().setTorigdti(
                    container.getTranRecord().getTranOrigTs());
            // [T-Up#INFO][COTRN02C.cbl, LINE #509] MOVE statement
            container.getCotrn2ai().setTprocdti(
                    container.getTranRecord().getTranProcTs());
            // [T-Up#INFO][COTRN02C.cbl, LINE #510] MOVE statement
            container.getCotrn2ai().setMidi(
                    StringUtils.leftPad(String.valueOf(Math.abs(container
                            .getTranRecord().getTranMerchantId())), 9, '0'));
            // [T-Up#INFO][COTRN02C.cbl, LINE #511] MOVE statement
            container.getCotrn2ai().setMnamei(
                    container.getTranRecord().getTranMerchantName());
            // [T-Up#INFO][COTRN02C.cbl, LINE #512] MOVE statement
            container.getCotrn2ai().setMcityi(
                    container.getTranRecord().getTranMerchantCity());
            // [T-Up#INFO][COTRN02C.cbl, LINE #513] MOVE statement
            container.getCotrn2ai().setMzipi(
                    container.getTranRecord().getTranMerchantZip());
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #516] PERFORM statement
        controlManager.run(context, processEnterKey);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    // *----------------------------------------------------------------*
    // *                      RETURN-TO-PREV-SCREEN                      
    // *----------------------------------------------------------------*

    void returnToPrevScreen(OpenFrameContext context) {
    }

    // *     IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES                  
    // *         MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM                     
    // *     END-IF                                                      
    // *     MOVE WS-TRANID    TO CDEMO-FROM-TRANID                      
    // *     MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM                     
    // *     MOVE ZEROS        TO CDEMO-PGM-CONTEXT                      
    // *     EXEC CICS                                                   
    // *         XCTL PROGRAM(CDEMO-TO-PROGRAM)                          
    // *         COMMAREA(CARDDEMO-COMMAREA)                             
    // *     END-EXEC.                                                   
    // *----------------------------------------------------------------*
    // *                      SEND-TRNADD-SCREEN                         
    // *----------------------------------------------------------------*

    void sendTrnaddScreen(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #539] PERFORM statement
        controlManager.run(context, populateHeaderInfo);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #541] MOVE statement
        container.setErrmsgo(container.getWsVariables().getWsMessage());
        // [T-Up#INFO][COTRN02C.cbl, LINE #543] EXEC_CICS statement
        /*
                       EXEC CICS SEND                                               
                                 MAP('COTRN2A')                                     
                                 MAPSET('COTRN02')                                  
                                 FROM(COTRN2AO)                                     
                                 ERASE                                              
                                 CURSOR                                             
                       END-EXEC
         */
        ((Cotrn02cOutputDto) task.getOutputDto())
                .setPageName("COTRN02_COTRN2A");
        ((Cotrn02cOutputDto) task.getOutputDto()).setCotrn2ao(container
                .getCotrn2ao());
        // [T-Up#INFO][COTRN02C.cbl, LINE #551] EXEC_CICS statement
        /*
                       EXEC CICS RETURN                                             
                                 TRANSID (WS-TRANID)                                
                                 COMMAREA (CARDDEMO-COMMAREA)                       
                       END-EXEC
         */
        TaskDto taskDto = TaskDto
                .builder()
                .destination("CT02")
                .data(Data
                        .session(Cotrn02cCarddemoCommareaToCotrn02cDfhcommarea.INSTANCE
                                .toTarget(container.getCarddemoCommarea())))
                .build();
        taskInvoker.setNextTask(taskDto);
        context.setReturnFlag(true);
    }

    // *              LENGTH(LENGTH OF CARDDEMO-COMMAREA)                
    // *----------------------------------------------------------------*
    // *                      RECEIVE-TRNADD-SCREEN                      
    // *----------------------------------------------------------------*

    void receiveTrnaddScreen(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #562] EXEC_CICS statement
        /*
                       EXEC CICS RECEIVE                                            
                                 MAP('COTRN2A')                                     
                                 MAPSET('COTRN02')                                  
                                 INTO(COTRN2AI)                                     
                                 RESP(WS-RESP-CD)                                   
                                 RESP2(WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            container.setCotrn2ai(((Cotrn02cInputDto) task.getInputDto())
                    .getCotrn2ai());
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
    }

    // *----------------------------------------------------------------*
    // *                      POPULATE-HEADER-INFO                       
    // *----------------------------------------------------------------*

    void populateHeaderInfo(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #575] MOVE statement
        container.getWsDateTime().getWsCurdateData()
                .set(IntrinsicFunction.functionCurrentDate());
        // [T-Up#INFO][COTRN02C.cbl, LINE #577] MOVE statement
        container.setTitle01o(container.getCcdaScreenTitle().getCcdaTitle01());
        // [T-Up#INFO][COTRN02C.cbl, LINE #578] MOVE statement
        container.setTitle02o(container.getCcdaScreenTitle().getCcdaTitle02());
        // [T-Up#INFO][COTRN02C.cbl, LINE #579] MOVE statement
        container.setTrnnameo(container.getWsVariables().getWsTranid());
        // [T-Up#INFO][COTRN02C.cbl, LINE #580] MOVE statement
        container.setPgmnameo(container.getWsVariables().getWsPgmname());
        // [T-Up#INFO][COTRN02C.cbl, LINE #582] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateMonth());
        // [T-Up#INFO][COTRN02C.cbl, LINE #583] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateDd(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateDay());
        // [T-Up#INFO][COTRN02C.cbl, LINE #584] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateYy(
                        Integer.parseInt(DataConverter
                                .convZonedLongToString(
                                        container.getWsDateTime()
                                                .getWsCurdateData()
                                                .getWsCurdate()
                                                .getWsCurdateYear(), 4)
                                .substring(2, 4).trim()));
        // [T-Up#INFO][COTRN02C.cbl, LINE #586] MOVE statement
        container.setCurdateo(container.getWsDateTime().getWsCurdateMmDdYy()
                .get());
        // [T-Up#INFO][COTRN02C.cbl, LINE #588] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeHh(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeHours());
        // [T-Up#INFO][COTRN02C.cbl, LINE #589] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeMinute());
        // [T-Up#INFO][COTRN02C.cbl, LINE #590] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeSs(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeSecond());
        // [T-Up#INFO][COTRN02C.cbl, LINE #592] MOVE statement
        container.setCurtimeo(container.getWsDateTime().getWsCurtimeHhMmSs()
                .get());
    }

    // *----------------------------------------------------------------*
    // *                      READ-CXACAIX-FILE                          
    // *----------------------------------------------------------------*

    void readCxacaixFile(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #599] EXEC_CICS statement
        /*
                       EXEC CICS READ                                               
                            DATASET   (WS-CXACAIX-FILE)                             
                            INTO      (CARD-XREF-RECORD)                            
                            LENGTH    (LENGTH OF CARD-XREF-RECORD)                  
                            RIDFLD    (XREF-ACCT-ID)                                
                            KEYLENGTH (LENGTH OF XREF-ACCT-ID)                      
                            RESP      (WS-RESP-CD)                                  
                            RESP2     (WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            AwsM2CarddemoCardxrefVsamKsdsDto awsM2CarddemoCardxrefVsamKsdsDto = recordKeyAccessor
                    .alternateIndex().read(
                            "awsM2CarddemoCardxrefVsamKsdsDao",
                            "Aix10",
                            BigDecimal.valueOf(container.getCardXrefRecord()
                                    .getXrefAcctId()));
            container
                    .setCardXrefRecord(Cotrn02cCardXrefRecordToAwsM2CarddemoCardxrefVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoCardxrefVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #609] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #611] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #613] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #614] MOVE statement
            container.getWsVariables().setWsMessage("Account ID NOT found...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #616] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #617] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #619] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COTRN02C.cbl, LINE #620] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #621] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup Acct in XREF AIX file...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #623] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #624] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      READ-CCXREF-FILE                           
    // *----------------------------------------------------------------*

    void readCcxrefFile(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #632] EXEC_CICS statement
        /*
                       EXEC CICS READ                                               
                            DATASET   (WS-CCXREF-FILE)                              
                            INTO      (CARD-XREF-RECORD)                            
                            LENGTH    (LENGTH OF CARD-XREF-RECORD)                  
                            RIDFLD    (XREF-CARD-NUM)                               
                            KEYLENGTH (LENGTH OF XREF-CARD-NUM)                     
                            RESP      (WS-RESP-CD)                                  
                            RESP2     (WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            AwsM2CarddemoCardxrefVsamKsdsDto awsM2CarddemoCardxrefVsamKsdsDto = recordKeyAccessor
                    .read("awsM2CarddemoCardxrefVsamKsdsDao", container
                            .getCardXrefRecord().getXrefCardNum());
            container
                    .setCardXrefRecord(Cotrn02cCardXrefRecordToAwsM2CarddemoCardxrefVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoCardxrefVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #642] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #644] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #646] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #647] MOVE statement
            container.getWsVariables().setWsMessage("Card Number NOT found...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #649] MOVE statement
            container.getCotrn2ai().setCardninl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #650] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #652] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COTRN02C.cbl, LINE #653] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #654] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup Card # in XREF file...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #656] MOVE statement
            container.getCotrn2ai().setCardninl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #657] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                    STARTBR-TRANSACT-FILE                        
    // *----------------------------------------------------------------*

    void startbrTransactFile(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #665] EXEC_CICS statement
        /*
                       EXEC CICS STARTBR                                            
                            DATASET   (WS-TRANSACT-FILE)                            
                            RIDFLD    (TRAN-ID)                                     
                            KEYLENGTH (LENGTH OF TRAN-ID)                           
                            RESP      (WS-RESP-CD)                                  
                            RESP2     (WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            ReadPoint readPoint = readPointManager
                    .declare(
                            "awsM2CarddemoTransactVsamKsdsDao",
                            0,
                            (AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto) -> {
                                return awsM2CarddemoTransactVsamKsdsDto
                                        .getTranId();
                            });
            AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto = readPointAccessor
                    .open(readPoint, container.getTranRecord().getTranId());
            container.getTranRecord().setTranId(
                    awsM2CarddemoTransactVsamKsdsDto.getTranId());
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #673] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #675] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #677] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #678] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Transaction ID NOT found...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #680] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #681] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #683] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COTRN02C.cbl, LINE #684] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #685] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup Transaction...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #687] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #688] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                    READPREV-TRANSACT-FILE                       
    // *----------------------------------------------------------------*

    void readprevTransactFile(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #696] EXEC_CICS statement
        /*
                       EXEC CICS READPREV                                           
                            DATASET   (WS-TRANSACT-FILE)                            
                            INTO      (TRAN-RECORD)                                 
                            LENGTH    (LENGTH OF TRAN-RECORD)                       
                            RIDFLD    (TRAN-ID)                                     
                            KEYLENGTH (LENGTH OF TRAN-ID)                           
                            RESP      (WS-RESP-CD)                                  
                            RESP2     (WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            ReadPoint readPoint = readPointManager.find(0);
            AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto = readPointAccessor
                    .readPrev(readPoint, container.getTranRecord().getTranId());
            container.getTranRecord().setTranId(
                    awsM2CarddemoTransactVsamKsdsDto.getTranId());
            container
                    .setTranRecord(Cotrn02cTranRecordToAwsM2CarddemoTransactVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoTransactVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #706] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #708] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 20) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #710] MOVE statement
            container.getTranRecord().setTranId(StringUtils.repeat('0', 16));
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #712] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COTRN02C.cbl, LINE #713] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #714] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup Transaction...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #716] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #717] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                    ENDBR-TRANSACT-FILE                          
    // *----------------------------------------------------------------*

    void endbrTransactFile(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #725] EXEC_CICS statement
        /*
                       EXEC CICS ENDBR                                              
                            DATASET   (WS-TRANSACT-FILE)                            
                       END-EXEC
         */
        ReadPoint readPoint = readPointManager.find(0);
        readPointAccessor.close(readPoint);
    }

    // *----------------------------------------------------------------*
    // *                    WRITE-TRANSACT-FILE                          
    // *----------------------------------------------------------------*

    void writeTransactFile(OpenFrameContext context) {
        StringBuilder tempStringBuilder1;
        StringBuilder tempStringBuilder2;
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #734] EXEC_CICS statement
        /*
                       EXEC CICS WRITE                                              
                            DATASET   (WS-TRANSACT-FILE)                            
                            FROM      (TRAN-RECORD)                                 
                            LENGTH    (LENGTH OF TRAN-RECORD)                       
                            RIDFLD    (TRAN-ID)                                     
                            KEYLENGTH (LENGTH OF TRAN-ID)                           
                            RESP      (WS-RESP-CD)                                  
                            RESP2     (WS-REAS-CD)                                  
                       END-EXEC
         */
        try {
            AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto = Cotrn02cTranRecordToAwsM2CarddemoTransactVsamKsdsDto.INSTANCE
                    .toTarget(container.getTranRecord());
            awsM2CarddemoTransactVsamKsdsDto.setTranId(container
                    .getTranRecord().getTranId());
            recordKeyAccessor.writeWithReturningId(
                    "awsM2CarddemoTransactVsamKsdsDao",
                    awsM2CarddemoTransactVsamKsdsDto);
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #744] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #746] PERFORM statement
            controlManager.run(context, initializeAllFields);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COTRN02C.cbl, LINE #747] MOVE statement
            container.getWsVariables()
                    .setWsMessage(StringUtils.repeat(' ', 80));
            // [T-Up#INFO][COTRN02C.cbl, LINE #748] MOVE statement
            container.setErrmsgc(container.getDfhbmsca().getDfhgreen());
            // [T-Up#INFO][COTRN02C.cbl, LINE #749] STRING statement
            tempStringBuilder1 = new StringBuilder();
            tempStringBuilder2 = new StringBuilder(container.getWsVariables()
                    .getWsMessage());
            tempStringBuilder1
                    .append("Transaction added successfully. ")
                    .append(" Your Tran ID is ")
                    .append(container.getTranRecord().getTranId()
                            .split(Pattern.quote(" "))[0]).append(".");
            if (tempStringBuilder1.length() <= 80) {
                tempStringBuilder2.replace(0, tempStringBuilder1.length(),
                        tempStringBuilder1.toString());
                container.getWsVariables().setWsMessage(
                        tempStringBuilder2.toString());
            }
            // [T-Up#INFO][COTRN02C.cbl, LINE #755] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if ((container.getWsVariables().getWsRespCd() == 15)
                || (container.getWsVariables().getWsRespCd() == 14)) {
            // [T-Up#INFO][COTRN02C.cbl, LINE #758] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #759] MOVE statement
            container.getWsVariables().setWsMessage("Tran ID already exist...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #761] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #762] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COTRN02C.cbl, LINE #764] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COTRN02C.cbl, LINE #765] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COTRN02C.cbl, LINE #766] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to Add Transaction...");
            // [T-Up#INFO][COTRN02C.cbl, LINE #768] MOVE statement
            container.getCotrn2ai().setActidinl(-1);
            // [T-Up#INFO][COTRN02C.cbl, LINE #769] PERFORM statement
            controlManager.run(context, sendTrnaddScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                    CLEAR-CURRENT-SCREEN                         
    // *----------------------------------------------------------------*

    void clearCurrentScreen(OpenFrameContext context) {
        // [T-Up#INFO][COTRN02C.cbl, LINE #777] PERFORM statement
        controlManager.run(context, initializeAllFields);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COTRN02C.cbl, LINE #778] PERFORM statement
        controlManager.run(context, sendTrnaddScreen);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    // *----------------------------------------------------------------*
    // *                    INITIALIZE-ALL-FIELDS                        
    // *----------------------------------------------------------------*

    void initializeAllFields(OpenFrameContext context) {
        Cotrn02cVariableContainer container = (Cotrn02cVariableContainer) context
                .getProgramVariableContainer("Cotrn02c");
        // [T-Up#INFO][COTRN02C.cbl, LINE #785] MOVE statement
        container.getCotrn2ai().setActidinl(-1);
        // [T-Up#INFO][COTRN02C.cbl, LINE #786] MOVE statement
        container.getCotrn2ai().setActidini(StringUtils.repeat(' ', 11));
        container.getCotrn2ai().setCardnini(StringUtils.repeat(' ', 16));
        container.getCotrn2ai().setTtypcdi(StringUtils.repeat(' ', 2));
        container.getCotrn2ai().setTcatcdi(StringUtils.repeat(' ', 4));
        container.getCotrn2ai().setTrnsrci(StringUtils.repeat(' ', 10));
        container.getCotrn2ai().setTrnamti(StringUtils.repeat(' ', 12));
        container.getCotrn2ai().setTdesci(StringUtils.repeat(' ', 60));
        container.getCotrn2ai().setTorigdti(StringUtils.repeat(' ', 10));
        container.getCotrn2ai().setTprocdti(StringUtils.repeat(' ', 10));
        container.getCotrn2ai().setMidi(StringUtils.repeat(' ', 9));
        container.getCotrn2ai().setMnamei(StringUtils.repeat(' ', 30));
        container.getCotrn2ai().setMcityi(StringUtils.repeat(' ', 25));
        container.getCotrn2ai().setMzipi(StringUtils.repeat(' ', 10));
        container.getCotrn2ai().setConfirmi(" ");
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
    }

    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT 
    // *                                                                 
}
