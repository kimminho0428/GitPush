package aws.carddemo.variable.group;

import com.tmax.openframe.DataConverter;
import com.tmax.openframe.runtime.cobol.PictureFormatter;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:51 UTC</p>
 */
public @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsMiscStorage {
    // ******************************************************************
    // * General CICS related                                            
    // ******************************************************************
    // [T-Up#INFO][COCRDLIC.cbl, LINE #46] WS-CICS-PROCESSNG-VARS (level: 5)
    private @Getter @Setter @Builder.Default CocrdlicWsCicsProcessngVars wsCicsProcessngVars = new CocrdlicWsCicsProcessngVars();
    // ******************************************************************
    // * Input edits                                                     
    // ******************************************************************
    // [T-Up#INFO][COCRDLIC.cbl, LINE #56] WS-INPUT-FLAG (level: 5)
    private @Getter @Builder.Default String wsInputFlag = StringUtils.repeat(
            ' ', 1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #57] INPUT-OK (level: 88)
    public static final String INPUT_OK_1 = "0";
    public static final String INPUT_OK_2 = " ";
    public static final String INPUT_OK_3 = StringUtils.repeat((char) 0x00, 1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #60] INPUT-ERROR (level: 88)
    public static final String INPUT_ERROR = "1";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #61] WS-EDIT-ACCT-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditAcctFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #62] FLG-ACCTFILTER-NOT-OK (level: 88)
    public static final String FLG_ACCTFILTER_NOT_OK = "0";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #63] FLG-ACCTFILTER-ISVALID (level: 88)
    public static final String FLG_ACCTFILTER_ISVALID = "1";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #64] FLG-ACCTFILTER-BLANK (level: 88)
    public static final String FLG_ACCTFILTER_BLANK = " ";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #65] WS-EDIT-CARD-FLAG (level: 5)
    private @Getter @Builder.Default String wsEditCardFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #66] FLG-CARDFILTER-NOT-OK (level: 88)
    public static final String FLG_CARDFILTER_NOT_OK = "0";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #67] FLG-CARDFILTER-ISVALID (level: 88)
    public static final String FLG_CARDFILTER_ISVALID = "1";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #68] FLG-CARDFILTER-BLANK (level: 88)
    public static final String FLG_CARDFILTER_BLANK = " ";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #69] WS-EDIT-SELECT-COUNTER (level: 5)
    private @Getter @Setter @Builder.Default int wsEditSelectCounter = 0;
    // [T-Up#INFO][COCRDLIC.cbl, LINE #72] WS-EDIT-SELECT-FLAGS (level: 5)
    private @Getter @Builder.Default String wsEditSelectFlags = StringUtils
            .repeat((char) 0x00, 7);

    public CocrdlicWsEditSelectArray getWsEditSelectArray() {
        return CocrdlicWsEditSelectArray.builder()
                .wsEditSelect(getWsEditSelect()).build();
    }

    public void setWsEditSelectArray(String source) {
        setWsEditSelect(source.substring(0, 7).split("(?<=\\G.{1})"));
    }

    public void setWsEditSelectArray(CocrdlicWsEditSelectArray source) {
        setWsEditSelectArray(source.toString());
    }

    public String[] getWsEditSelect() {
        return getWsEditSelectFlags().split("(?<=\\G.{1})");
    }

    public String getWsEditSelect(int index) {
        return getWsEditSelect()[index];
    }

    public void setWsEditSelect(String[] source) {
        setWsEditSelectFlags(StringUtils.overlay(getWsEditSelectFlags(),
                String.join("", source), 0, 7));
    }

    public void setWsEditSelect(int index, String source) {
        String[] tempStringArr1 = getWsEditSelect();
        tempStringArr1[index] = source;
        setWsEditSelect(tempStringArr1);
    }

    // [T-Up#INFO][COCRDLIC.cbl, LINE #83] WS-EDIT-SELECT-ERROR-FLAGS (level: 5)
    private @Getter @Builder.Default String wsEditSelectErrorFlags = StringUtils
            .repeat(' ', 7);

    public CocrdlicWsEditSelectErrorFlagx getWsEditSelectErrorFlagx() {
        return CocrdlicWsEditSelectErrorFlagx.builder()
                .wsRowCrdselectError(getWsRowCrdselectError()).build();
    }

    public void setWsEditSelectErrorFlagx(String source) {
        setWsRowCrdselectError(source.substring(0, 7).split("(?<=\\G.{1})"));
    }

    public void setWsEditSelectErrorFlagx(CocrdlicWsEditSelectErrorFlagx source) {
        setWsEditSelectErrorFlagx(source.toString());
    }

    public String[] getWsRowCrdselectError() {
        return getWsEditSelectErrorFlags().split("(?<=\\G.{1})");
    }

    public String getWsRowCrdselectError(int index) {
        return getWsRowCrdselectError()[index];
    }

    public void setWsRowCrdselectError(String[] source) {
        setWsEditSelectErrorFlags(StringUtils.overlay(
                getWsEditSelectErrorFlags(), String.join("", source), 0, 7));
    }

    public void setWsRowCrdselectError(int index, String source) {
        String[] tempStringArr1 = getWsRowCrdselectError();
        tempStringArr1[index] = source;
        setWsRowCrdselectError(tempStringArr1);
    }

    // [T-Up#INFO][COCRDLIC.cbl, LINE #88] WS-SUBSCRIPT-VARS (level: 5)
    private @Getter @Setter @Builder.Default CocrdlicWsSubscriptVars wsSubscriptVars = new CocrdlicWsSubscriptVars();
    // ******************************************************************
    // * Output edits                                                    
    // ******************************************************************
    // [T-Up#INFO][COCRDLIC.cbl, LINE #97] CICS-OUTPUT-EDIT-VARS (level: 5)
    private @Getter @Setter @Builder.Default CocrdlicCicsOutputEditVars cicsOutputEditVars = new CocrdlicCicsOutputEditVars();
    // ******************************************************************
    // * Output Message Construction                                     
    // ******************************************************************
    // [T-Up#INFO][COCRDLIC.cbl, LINE #110] WS-LONG-MSG (level: 5)
    private @Getter @Builder.Default String wsLongMsg = StringUtils.repeat(' ',
            500);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #111] WS-INFO-MSG (level: 5)
    private @Getter @Builder.Default String wsInfoMsg = StringUtils.repeat(' ',
            45);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #112] WS-NO-INFO-MESSAGE (level: 88)
    public static final String WS_NO_INFO_MESSAGE_1 = StringUtils.repeat(' ',
            45);
    public static final String WS_NO_INFO_MESSAGE_2 = StringUtils.repeat(
            (char) 0x00, 45);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #114] WS-INFORM-REC-ACTIONS (level: 88)
    public static final String WS_INFORM_REC_ACTIONS = "TYPE S FOR DETAIL, U TO UPDATE ANY RECORD";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #116] WS-ERROR-MSG (level: 5)
    private @Getter @Builder.Default String wsErrorMsg = StringUtils.repeat(
            ' ', 75);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #117] WS-ERROR-MSG-OFF (level: 88)
    public static final String WS_ERROR_MSG_OFF = StringUtils.repeat(' ', 75);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #118] WS-EXIT-MESSAGE (level: 88)
    public static final String WS_EXIT_MESSAGE = "PF03 PRESSED.EXITING";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #120] WS-NO-RECORDS-FOUND (level: 88)
    public static final String WS_NO_RECORDS_FOUND = "NO RECORDS FOUND FOR THIS SEARCH CONDITION.";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #122] WS-MORE-THAN-1-ACTION (level: 88)
    public static final String WS_MORE_THAN_1_ACTION = "PLEASE SELECT ONLY ONE RECORD TO VIEW OR UPDATE";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #124] WS-INVALID-ACTION-CODE (level: 88)
    public static final String WS_INVALID_ACTION_CODE = "INVALID ACTION CODE";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #126] WS-PFK-FLAG (level: 5)
    private @Getter @Builder.Default String wsPfkFlag = StringUtils.repeat(' ',
            1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #127] PFK-VALID (level: 88)
    public static final String PFK_VALID = "0";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #128] PFK-INVALID (level: 88)
    public static final String PFK_INVALID = "1";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #129] WS-CONTEXT-FLAG (level: 5)
    private @Getter @Builder.Default String wsContextFlag = StringUtils.repeat(
            ' ', 1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #130] WS-CONTEXT-FRESH-START (level: 88)
    public static final String WS_CONTEXT_FRESH_START = "0";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #131] WS-CONTEXT-FRESH-START-NO (level: 88)
    public static final String WS_CONTEXT_FRESH_START_NO = "1";
    // ******************************************************************
    // * File and data Handling                                          
    // ******************************************************************
    // [T-Up#INFO][COCRDLIC.cbl, LINE #135] WS-FILE-HANDLING-VARS (level: 5)
    private @Getter @Setter @Builder.Default CocrdlicWsFileHandlingVars wsFileHandlingVars = new CocrdlicWsFileHandlingVars();
    // [T-Up#INFO][COCRDLIC.cbl, LINE #144] WS-SCRN-COUNTER (level: 5)
    private @Getter @Setter @Builder.Default int wsScrnCounter = 0;
    // [T-Up#INFO][COCRDLIC.cbl, LINE #146] WS-FILTER-RECORD-FLAG (level: 5)
    private @Getter @Builder.Default String wsFilterRecordFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #147] WS-EXCLUDE-THIS-RECORD (level: 88)
    public static final String WS_EXCLUDE_THIS_RECORD = "0";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #148] WS-DONOT-EXCLUDE-THIS-RECORD (level: 88)
    public static final String WS_DONOT_EXCLUDE_THIS_RECORD = "1";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #149] WS-RECORDS-TO-PROCESS-FLAG (level: 5)
    private @Getter @Builder.Default String wsRecordsToProcessFlag = StringUtils
            .repeat(' ', 1);
    // [T-Up#INFO][COCRDLIC.cbl, LINE #150] READ-LOOP-EXIT (level: 88)
    public static final String READ_LOOP_EXIT = "0";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #151] MORE-RECORDS-TO-READ (level: 88)
    public static final String MORE_RECORDS_TO_READ = "1";
    // [T-Up#INFO][COCRDLIC.cbl, LINE #152] WS-FILE-ERROR-MESSAGE (level: 5)
    private @Getter @Setter @Builder.Default CocrdlicWsFileErrorMessage wsFileErrorMessage = new CocrdlicWsFileErrorMessage();

    public void setWsInputFlag(String source) {
        wsInputFlag = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setWsEditAcctFlag(String source) {
        wsEditAcctFlag = StringUtils.truncate(StringUtils.rightPad(source, 1),
                1);
    }

    public void setWsEditCardFlag(String source) {
        wsEditCardFlag = StringUtils.truncate(StringUtils.rightPad(source, 1),
                1);
    }

    public void setWsEditSelectFlags(String source) {
        wsEditSelectFlags = StringUtils.truncate(
                StringUtils.rightPad(source, 7), 7);
    }

    public void setWsEditSelectErrorFlags(String source) {
        wsEditSelectErrorFlags = StringUtils.truncate(
                StringUtils.rightPad(source, 7), 7);
    }

    public void setWsLongMsg(String source) {
        wsLongMsg = StringUtils
                .truncate(StringUtils.rightPad(source, 500), 500);
    }

    public void setWsInfoMsg(String source) {
        wsInfoMsg = StringUtils.truncate(StringUtils.rightPad(source, 45), 45);
    }

    public void setWsErrorMsg(String source) {
        wsErrorMsg = StringUtils.truncate(StringUtils.rightPad(source, 75), 75);
    }

    public void setWsPfkFlag(String source) {
        wsPfkFlag = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setWsContextFlag(String source) {
        wsContextFlag = StringUtils
                .truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setWsFilterRecordFlag(String source) {
        wsFilterRecordFlag = StringUtils.truncate(
                StringUtils.rightPad(source, 1), 1);
    }

    public void setWsRecordsToProcessFlag(String source) {
        wsRecordsToProcessFlag = StringUtils.truncate(
                StringUtils.rightPad(source, 1), 1);
    }

    public static CocrdlicWsMiscStorage createDefaultValueInstance() {
        return new CocrdlicWsMiscStorage.builder()
                .wsCicsProcessngVars(
                        CocrdlicWsCicsProcessngVars
                                .createDefaultValueInstance())
                .wsEditSelectCounter(0)
                .wsEditSelectFlags(StringUtils.repeat(' ', 7))
                .wsSubscriptVars(
                        CocrdlicWsSubscriptVars.createDefaultValueInstance())
                .cicsOutputEditVars(
                        CocrdlicCicsOutputEditVars.createDefaultValueInstance())
                .wsFileHandlingVars(
                        CocrdlicWsFileHandlingVars.createDefaultValueInstance())
                .wsScrnCounter(0)
                .wsFileErrorMessage(
                        CocrdlicWsFileErrorMessage.createDefaultValueInstance())
                .build();
    }

    public void set(String source) {
        ByteBuffer tempByteBuffer1;
        source = StringUtils.truncate(StringUtils.rightPad(source, 784), 784);
        wsCicsProcessngVars.set(source.substring(0, 12));
        wsInputFlag = source.substring(12, 13);
        wsEditAcctFlag = source.substring(13, 14);
        wsEditCardFlag = source.substring(14, 15);
        try {
            wsEditSelectCounter = (int) DataConverter.convPackedStringToLong(
                    source.substring(15, 18), 4);
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            wsEditSelectCounter = 0;
        }
        wsEditSelectFlags = source.substring(18, 25);
        wsEditSelectErrorFlags = source.substring(25, 32);
        wsSubscriptVars.set(source.substring(32, 36));
        cicsOutputEditVars.set(source.substring(36, 51));
        wsLongMsg = source.substring(51, 551);
        wsInfoMsg = source.substring(551, 596);
        wsErrorMsg = source.substring(596, 671);
        wsPfkFlag = source.substring(671, 672);
        wsContextFlag = source.substring(672, 673);
        wsFileHandlingVars.set(source.substring(673, 700));
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(700, 702).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            wsScrnCounter = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            wsScrnCounter = 0;
        }
        wsFilterRecordFlag = source.substring(702, 703);
        wsRecordsToProcessFlag = source.substring(703, 704);
        wsFileErrorMessage.set(source.substring(704, 784));
    }

    public String get() {
        ByteBuffer tempByteBuffer1;
        StringBuilder sb = new StringBuilder();
        sb.append(wsCicsProcessngVars.get());
        sb.append(wsInputFlag);
        sb.append(wsEditAcctFlag);
        sb.append(wsEditCardFlag);
        sb.append(DataConverter.convPackedLongToString(wsEditSelectCounter, 4));
        sb.append(wsEditSelectFlags);
        sb.append(wsEditSelectErrorFlags);
        sb.append(wsSubscriptVars.get());
        sb.append(cicsOutputEditVars.get());
        sb.append(wsLongMsg);
        sb.append(wsInfoMsg);
        sb.append(wsErrorMsg);
        sb.append(wsPfkFlag);
        sb.append(wsContextFlag);
        sb.append(wsFileHandlingVars.get());
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) wsScrnCounter);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(wsFilterRecordFlag);
        sb.append(wsRecordsToProcessFlag);
        sb.append(wsFileErrorMessage.get());
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getWsCicsProcessngVars().toString());
        sb.append(getWsInputFlag());
        sb.append(getWsEditAcctFlag());
        sb.append(getWsEditCardFlag());
        sb.append(String.valueOf(getWsEditSelectCounter()));
        sb.append(getWsEditSelectFlags());
        sb.append(getWsEditSelectErrorFlags());
        sb.append(getWsSubscriptVars().toString());
        sb.append(getCicsOutputEditVars().toString());
        sb.append(getWsLongMsg());
        sb.append(getWsInfoMsg());
        sb.append(getWsErrorMsg());
        sb.append(getWsPfkFlag());
        sb.append(getWsContextFlag());
        sb.append(getWsFileHandlingVars().toString());
        sb.append(String.valueOf(getWsScrnCounter()));
        sb.append(getWsFilterRecordFlag());
        sb.append(getWsRecordsToProcessFlag());
        sb.append(getWsFileErrorMessage().toString());
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsCicsProcessngVars {
        // [T-Up#INFO][COCRDLIC.cbl, LINE #47] WS-RESP-CD (level: 7)
        private @Getter @Setter @Builder.Default int wsRespCd = 0;
        // [T-Up#INFO][COCRDLIC.cbl, LINE #49] WS-REAS-CD (level: 7)
        private @Getter @Setter @Builder.Default int wsReasCd = 0;
        // [T-Up#INFO][COCRDLIC.cbl, LINE #51] WS-TRANID (level: 7)
        private @Getter @Builder.Default String wsTranid = StringUtils.repeat(
                ' ', 4);

        public void setWsTranid(String source) {
            wsTranid = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
        }

        public static CocrdlicWsCicsProcessngVars createDefaultValueInstance() {
            return new CocrdlicWsCicsProcessngVars.builder().wsRespCd(0)
                    .wsReasCd(0).wsTranid(StringUtils.repeat(' ', 4)).build();
        }

        public void set(String source) {
            ByteBuffer tempByteBuffer1;
            source = StringUtils.truncate(StringUtils.rightPad(source, 12), 12);
            try {
                tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
                tempByteBuffer1.put(source.substring(0, 4).getBytes(
                        StandardCharsets.ISO_8859_1));
                tempByteBuffer1.flip();
                wsRespCd = tempByteBuffer1.getInt();
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                wsRespCd = 0;
            }
            try {
                tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
                tempByteBuffer1.put(source.substring(4, 8).getBytes(
                        StandardCharsets.ISO_8859_1));
                tempByteBuffer1.flip();
                wsReasCd = tempByteBuffer1.getInt();
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                wsReasCd = 0;
            }
            wsTranid = source.substring(8, 12);
        }

        public String get() {
            ByteBuffer tempByteBuffer1;
            StringBuilder sb = new StringBuilder();
            tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
            tempByteBuffer1.putInt(wsRespCd);
            tempByteBuffer1.flip();
            sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                    .toString());
            tempByteBuffer1 = ByteBuffer.allocate(Integer.BYTES);
            tempByteBuffer1.putInt(wsReasCd);
            tempByteBuffer1.flip();
            sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                    .toString());
            sb.append(wsTranid);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(String.valueOf(getWsRespCd()));
            sb.append(String.valueOf(getWsReasCd()));
            sb.append(getWsTranid());
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsEditSelectArray {
        // [T-Up#INFO][COCRDLIC.cbl, LINE #75] WS-EDIT-SELECT (level: 10)
        private @Getter @Setter @Builder.Default String[] wsEditSelect = Collections
                .nCopies(7, StringUtils.repeat(' ', 1)).toArray(new String[0]);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #77] SELECT-OK (level: 88)
        public static final String SELECT_OK_1 = "S";
        public static final String SELECT_OK_2 = "U";
        // [T-Up#INFO][COCRDLIC.cbl, LINE #78] VIEW-REQUESTED-ON (level: 88)
        public static final String VIEW_REQUESTED_ON = "S";
        // [T-Up#INFO][COCRDLIC.cbl, LINE #79] UPDATE-REQUESTED-ON (level: 88)
        public static final String UPDATE_REQUESTED_ON = "U";
        // [T-Up#INFO][COCRDLIC.cbl, LINE #80] SELECT-BLANK (level: 88)
        public static final String SELECT_BLANK_1 = " ";
        public static final String SELECT_BLANK_2 = StringUtils.repeat(
                (char) 0x00, 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(Arrays.stream(wsEditSelect).collect(Collectors.joining()));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(Arrays.stream(wsEditSelect).collect(Collectors.joining()));
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsEditSelectErrorFlagx {
        // [T-Up#INFO][COCRDLIC.cbl, LINE #86] WS-ROW-CRDSELECT-ERROR (level: 20)
        private @Getter @Setter @Builder.Default String[] wsRowCrdselectError = Collections
                .nCopies(7, StringUtils.repeat(' ', 1)).toArray(new String[0]);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #87] WS-ROW-SELECT-ERROR (level: 88)
        public static final String WS_ROW_SELECT_ERROR = "1";

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(Arrays.stream(wsRowCrdselectError).collect(
                    Collectors.joining()));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(Arrays.stream(wsRowCrdselectError).collect(
                    Collectors.joining()));
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsSubscriptVars {
        // [T-Up#INFO][COCRDLIC.cbl, LINE #89] I (level: 10)
        private @Getter @Setter @Builder.Default int i = 0;
        // [T-Up#INFO][COCRDLIC.cbl, LINE #91] I-SELECTED (level: 10)
        private @Getter @Setter @Builder.Default int iSelected = 0;
        // [T-Up#INFO][COCRDLIC.cbl, LINE #93] DETAIL-WAS-REQUESTED (level: 88)
        public static final int DETAIL_WAS_REQUESTED_START = 1;
        public static final int DETAIL_WAS_REQUESTED_END = 7;

        public static CocrdlicWsSubscriptVars createDefaultValueInstance() {
            return new CocrdlicWsSubscriptVars.builder().i(0).iSelected(0)
                    .build();
        }

        public void set(String source) {
            ByteBuffer tempByteBuffer1;
            source = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
            try {
                tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
                tempByteBuffer1.put(source.substring(0, 2).getBytes(
                        StandardCharsets.ISO_8859_1));
                tempByteBuffer1.flip();
                i = tempByteBuffer1.getShort();
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                i = 0;
            }
            try {
                tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
                tempByteBuffer1.put(source.substring(2, 4).getBytes(
                        StandardCharsets.ISO_8859_1));
                tempByteBuffer1.flip();
                iSelected = tempByteBuffer1.getShort();
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                iSelected = 0;
            }
        }

        public String get() {
            ByteBuffer tempByteBuffer1;
            StringBuilder sb = new StringBuilder();
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.putShort((short) i);
            tempByteBuffer1.flip();
            sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                    .toString());
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.putShort((short) iSelected);
            tempByteBuffer1.flip();
            sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                    .toString());
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(String.valueOf(getI()));
            sb.append(String.valueOf(getISelected()));
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicCicsOutputEditVars {
        // [T-Up#INFO][COCRDLIC.cbl, LINE #98] CARD-ACCT-ID-X (level: 10)
        private @Getter @Builder.Default String cardAcctIdX = StringUtils
                .repeat(' ', 11);

        public long getCardAcctIdN() {
            try {
                return DataConverter
                        .convZonedStringToLong(getCardAcctIdX(), 11);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setCardAcctIdN(long source) {
            String temp1 = DataConverter.convZonedLongToString(source, 11);
            setCardAcctIdX(temp1);
        }

        // [T-Up#INFO][COCRDLIC.cbl, LINE #101] CARD-CVV-CD-X (level: 10)
        private @Getter @Builder.Default String cardCvvCdX = StringUtils
                .repeat(' ', 3);

        public int getCardCvvCdN() {
            try {
                return (int) DataConverter.convZonedStringToLong(
                        getCardCvvCdX(), 3);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setCardCvvCdN(int source) {
            String temp1 = DataConverter.convZonedLongToString(source, 3);
            setCardCvvCdX(temp1);
        }

        // [T-Up#INFO][COCRDLIC.cbl, LINE #104] FLG-PROTECT-SELECT-ROWS (level: 10)
        private @Getter @Builder.Default String flgProtectSelectRows = StringUtils
                .repeat(' ', 1);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #105] FLG-PROTECT-SELECT-ROWS-NO (level: 88)
        public static final String FLG_PROTECT_SELECT_ROWS_NO = "0";
        // [T-Up#INFO][COCRDLIC.cbl, LINE #106] FLG-PROTECT-SELECT-ROWS-YES (level: 88)
        public static final String FLG_PROTECT_SELECT_ROWS_YES = "1";

        public void setCardAcctIdX(String source) {
            cardAcctIdX = StringUtils.truncate(
                    StringUtils.rightPad(source, 11), 11);
        }

        public void setCardCvvCdX(String source) {
            cardCvvCdX = StringUtils.truncate(StringUtils.rightPad(source, 3),
                    3);
        }

        public void setFlgProtectSelectRows(String source) {
            flgProtectSelectRows = StringUtils.truncate(
                    StringUtils.rightPad(source, 1), 1);
        }

        public static CocrdlicCicsOutputEditVars createDefaultValueInstance() {
            return new CocrdlicCicsOutputEditVars.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
            cardAcctIdX = source.substring(0, 11);
            cardCvvCdX = source.substring(11, 14);
            flgProtectSelectRows = source.substring(14, 15);
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(cardAcctIdX);
            sb.append(cardCvvCdX);
            sb.append(flgProtectSelectRows);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getCardAcctIdX());
            sb.append(getCardCvvCdX());
            sb.append(getFlgProtectSelectRows());
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsFileHandlingVars {
        // [T-Up#INFO][COCRDLIC.cbl, LINE #136] WS-CARD-RID (level: 10)
        private @Getter @Setter @Builder.Default CocrdlicWsCardRid wsCardRid = new CocrdlicWsCardRid();

        public static CocrdlicWsFileHandlingVars createDefaultValueInstance() {
            return new CocrdlicWsFileHandlingVars.builder().wsCardRid(
                    CocrdlicWsCardRid.createDefaultValueInstance()).build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 27), 27);
            wsCardRid.set(source.substring(0, 27));
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(wsCardRid.get());
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getWsCardRid().toString());
            return sb.toString();
        }

        public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsCardRid {
            // [T-Up#INFO][COCRDLIC.cbl, LINE #137] WS-CARD-RID-CARDNUM (level: 20)
            private @Getter @Builder.Default String wsCardRidCardnum = StringUtils
                    .repeat(' ', 16);
            // [T-Up#INFO][COCRDLIC.cbl, LINE #138] WS-CARD-RID-ACCT-ID (level: 20)
            private @Getter @Setter long wsCardRidAcctId;

            public String getWsCardRidAcctIdX() {
                String temp1 = DataConverter.convZonedLongToString(
                        getWsCardRidAcctId(), 11);
                return temp1;
            }

            public void setWsCardRidAcctIdX(String source) {
                try {
                    setWsCardRidAcctId(DataConverter.convZonedStringToLong(
                            source, 11));
                } catch (NumberFormatException exception) {
                    exception.printStackTrace();
                    setWsCardRidAcctId(0);
                }
            }

            public void setWsCardRidCardnum(String source) {
                wsCardRidCardnum = StringUtils.truncate(
                        StringUtils.rightPad(source, 16), 16);
            }

            public static CocrdlicWsCardRid createDefaultValueInstance() {
                return new CocrdlicWsCardRid.builder().build();
            }

            public void set(String source) {
                source = StringUtils.truncate(StringUtils.rightPad(source, 27),
                        27);
                wsCardRidCardnum = source.substring(0, 16);
                try {
                    wsCardRidAcctId = DataConverter.convZonedStringToLong(
                            source.substring(16, 27), 11);
                } catch (NumberFormatException exception) {
                    exception.printStackTrace();
                    wsCardRidAcctId = 0;
                }
            }

            public String get() {
                StringBuilder sb = new StringBuilder();
                sb.append(wsCardRidCardnum);
                sb.append(DataConverter.convZonedLongToString(wsCardRidAcctId,
                        11));
                return sb.toString();
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder();
                sb.append(getWsCardRidCardnum());
                sb.append(PictureFormatter.intFormatWithoutSign(
                        wsCardRidAcctId, "00000000000"));
                return sb.toString();
            }
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdlicWsFileErrorMessage {
        // [T-Up#INFO][COCRDLIC.cbl, LINE #153] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER1 = "File Error:"
                + StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #155] ERROR-OPNAME (level: 10)
        private @Getter @Builder.Default String errorOpname = StringUtils
                .repeat(' ', 8);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #157] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER2 = " on ";
        // [T-Up#INFO][COCRDLIC.cbl, LINE #159] ERROR-FILE (level: 10)
        private @Getter @Builder.Default String errorFile = StringUtils.repeat(
                ' ', 9);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #161] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER3 = " returned RESP ";
        // [T-Up#INFO][COCRDLIC.cbl, LINE #164] ERROR-RESP (level: 10)
        private @Getter @Builder.Default String errorResp = StringUtils.repeat(
                ' ', 10);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #166] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER4 = ",RESP2 ";
        // [T-Up#INFO][COCRDLIC.cbl, LINE #168] ERROR-RESP2 (level: 10)
        private @Getter @Builder.Default String errorResp2 = StringUtils
                .repeat(' ', 10);
        // [T-Up#INFO][COCRDLIC.cbl, LINE #170] FILLER (level: 10)
        private @Getter @Builder.Default String OFFILLER5 = StringUtils.repeat(
                ' ', 5);

        public void setOFFILLER1(String source) {
            OFFILLER1 = StringUtils.truncate(StringUtils.rightPad(source, 12),
                    12);
        }

        public void setErrorOpname(String source) {
            errorOpname = StringUtils.truncate(StringUtils.rightPad(source, 8),
                    8);
        }

        public void setOFFILLER2(String source) {
            OFFILLER2 = StringUtils
                    .truncate(StringUtils.rightPad(source, 4), 4);
        }

        public void setErrorFile(String source) {
            errorFile = StringUtils
                    .truncate(StringUtils.rightPad(source, 9), 9);
        }

        public void setOFFILLER3(String source) {
            OFFILLER3 = StringUtils.truncate(StringUtils.rightPad(source, 15),
                    15);
        }

        public void setErrorResp(String source) {
            errorResp = StringUtils.truncate(StringUtils.rightPad(source, 10),
                    10);
        }

        public void setOFFILLER4(String source) {
            OFFILLER4 = StringUtils
                    .truncate(StringUtils.rightPad(source, 7), 7);
        }

        public void setErrorResp2(String source) {
            errorResp2 = StringUtils.truncate(StringUtils.rightPad(source, 10),
                    10);
        }

        public void setOFFILLER5(String source) {
            OFFILLER5 = StringUtils
                    .truncate(StringUtils.rightPad(source, 5), 5);
        }

        public static CocrdlicWsFileErrorMessage createDefaultValueInstance() {
            return new CocrdlicWsFileErrorMessage.builder()
                    .OFFILLER1(StringUtils.repeat(' ', 12))
                    .errorOpname(StringUtils.repeat(' ', 8))
                    .OFFILLER2(StringUtils.repeat(' ', 4))
                    .errorFile(StringUtils.repeat(' ', 9))
                    .OFFILLER3(StringUtils.repeat(' ', 15))
                    .errorResp(StringUtils.repeat(' ', 10))
                    .OFFILLER4(StringUtils.repeat(' ', 7))
                    .errorResp2(StringUtils.repeat(' ', 10)).build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 80), 80);
            OFFILLER1 = source.substring(0, 12);
            errorOpname = source.substring(12, 20);
            OFFILLER2 = source.substring(20, 24);
            errorFile = source.substring(24, 33);
            OFFILLER3 = source.substring(33, 48);
            errorResp = source.substring(48, 58);
            OFFILLER4 = source.substring(58, 65);
            errorResp2 = source.substring(65, 75);
            OFFILLER5 = source.substring(75, 80);
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(errorOpname);
            sb.append(OFFILLER2);
            sb.append(errorFile);
            sb.append(OFFILLER3);
            sb.append(errorResp);
            sb.append(OFFILLER4);
            sb.append(errorResp2);
            sb.append(OFFILLER5);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(getErrorOpname());
            sb.append(OFFILLER2);
            sb.append(getErrorFile());
            sb.append(OFFILLER3);
            sb.append(getErrorResp());
            sb.append(OFFILLER4);
            sb.append(getErrorResp2());
            sb.append(OFFILLER5);
            return sb.toString();
        }
    }
}
