package aws.carddemo.variable.group;

import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:45 UTC</p>
 */
public @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CocrdupcCcrdupai {
    // [T-Up#INFO][COCRDUP.CPY, LINE #19] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER1 = StringUtils.repeat(' ',
            12);
    // [T-Up#INFO][COCRDUP.CPY, LINE #20] TRNNAMEL (level: 2)
    private @Getter @Setter int trnnamel;
    // [T-Up#INFO][COCRDUP.CPY, LINE #21] TRNNAMEF (level: 2)
    private @Getter @Builder.Default String trnnamef = StringUtils.repeat(' ',
            1);

    public _OFFILLER2 getOFFILLER2() {
        return _OFFILLER2.builder().trnnamea(getTrnnamea()).build();
    }

    public void setOFFILLER2(String source) {
        setTrnnamea(source.substring(0, 1));
    }

    public void setOFFILLER2(_OFFILLER2 source) {
        setOFFILLER2(source.toString());
    }

    public String getTrnnamea() {
        return getTrnnamef();
    }

    public void setTrnnamea(String source) {
        setTrnnamef(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #24] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER3 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #25] TRNNAMEI (level: 2)
    private @Getter @Builder.Default String trnnamei = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #26] TITLE01L (level: 2)
    private @Getter @Setter int title01l;
    // [T-Up#INFO][COCRDUP.CPY, LINE #27] TITLE01F (level: 2)
    private @Getter @Builder.Default String title01f = StringUtils.repeat(' ',
            1);

    public _OFFILLER4 getOFFILLER4() {
        return _OFFILLER4.builder().title01a(getTitle01a()).build();
    }

    public void setOFFILLER4(String source) {
        setTitle01a(source.substring(0, 1));
    }

    public void setOFFILLER4(_OFFILLER4 source) {
        setOFFILLER4(source.toString());
    }

    public String getTitle01a() {
        return getTitle01f();
    }

    public void setTitle01a(String source) {
        setTitle01f(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #30] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER5 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #31] TITLE01I (level: 2)
    private @Getter @Builder.Default String title01i = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COCRDUP.CPY, LINE #32] CURDATEL (level: 2)
    private @Getter @Setter int curdatel;
    // [T-Up#INFO][COCRDUP.CPY, LINE #33] CURDATEF (level: 2)
    private @Getter @Builder.Default String curdatef = StringUtils.repeat(' ',
            1);

    public _OFFILLER6 getOFFILLER6() {
        return _OFFILLER6.builder().curdatea(getCurdatea()).build();
    }

    public void setOFFILLER6(String source) {
        setCurdatea(source.substring(0, 1));
    }

    public void setOFFILLER6(_OFFILLER6 source) {
        setOFFILLER6(source.toString());
    }

    public String getCurdatea() {
        return getCurdatef();
    }

    public void setCurdatea(String source) {
        setCurdatef(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #36] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER7 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #37] CURDATEI (level: 2)
    private @Getter @Builder.Default String curdatei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COCRDUP.CPY, LINE #38] PGMNAMEL (level: 2)
    private @Getter @Setter int pgmnamel;
    // [T-Up#INFO][COCRDUP.CPY, LINE #39] PGMNAMEF (level: 2)
    private @Getter @Builder.Default String pgmnamef = StringUtils.repeat(' ',
            1);

    public _OFFILLER8 getOFFILLER8() {
        return _OFFILLER8.builder().pgmnamea(getPgmnamea()).build();
    }

    public void setOFFILLER8(String source) {
        setPgmnamea(source.substring(0, 1));
    }

    public void setOFFILLER8(_OFFILLER8 source) {
        setOFFILLER8(source.toString());
    }

    public String getPgmnamea() {
        return getPgmnamef();
    }

    public void setPgmnamea(String source) {
        setPgmnamef(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #42] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER9 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #43] PGMNAMEI (level: 2)
    private @Getter @Builder.Default String pgmnamei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COCRDUP.CPY, LINE #44] TITLE02L (level: 2)
    private @Getter @Setter int title02l;
    // [T-Up#INFO][COCRDUP.CPY, LINE #45] TITLE02F (level: 2)
    private @Getter @Builder.Default String title02f = StringUtils.repeat(' ',
            1);

    public _OFFILLER10 getOFFILLER10() {
        return _OFFILLER10.builder().title02a(getTitle02a()).build();
    }

    public void setOFFILLER10(String source) {
        setTitle02a(source.substring(0, 1));
    }

    public void setOFFILLER10(_OFFILLER10 source) {
        setOFFILLER10(source.toString());
    }

    public String getTitle02a() {
        return getTitle02f();
    }

    public void setTitle02a(String source) {
        setTitle02f(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #48] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER11 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #49] TITLE02I (level: 2)
    private @Getter @Builder.Default String title02i = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COCRDUP.CPY, LINE #50] CURTIMEL (level: 2)
    private @Getter @Setter int curtimel;
    // [T-Up#INFO][COCRDUP.CPY, LINE #51] CURTIMEF (level: 2)
    private @Getter @Builder.Default String curtimef = StringUtils.repeat(' ',
            1);

    public _OFFILLER12 getOFFILLER12() {
        return _OFFILLER12.builder().curtimea(getCurtimea()).build();
    }

    public void setOFFILLER12(String source) {
        setCurtimea(source.substring(0, 1));
    }

    public void setOFFILLER12(_OFFILLER12 source) {
        setOFFILLER12(source.toString());
    }

    public String getCurtimea() {
        return getCurtimef();
    }

    public void setCurtimea(String source) {
        setCurtimef(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #54] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER13 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #55] CURTIMEI (level: 2)
    private @Getter @Builder.Default String curtimei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COCRDUP.CPY, LINE #56] ACCTSIDL (level: 2)
    private @Getter @Setter int acctsidl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #57] ACCTSIDF (level: 2)
    private @Getter @Builder.Default String acctsidf = StringUtils.repeat(' ',
            1);

    public _OFFILLER14 getOFFILLER14() {
        return _OFFILLER14.builder().acctsida(getAcctsida()).build();
    }

    public void setOFFILLER14(String source) {
        setAcctsida(source.substring(0, 1));
    }

    public void setOFFILLER14(_OFFILLER14 source) {
        setOFFILLER14(source.toString());
    }

    public String getAcctsida() {
        return getAcctsidf();
    }

    public void setAcctsida(String source) {
        setAcctsidf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #60] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER15 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #61] ACCTSIDI (level: 2)
    private @Getter @Builder.Default String acctsidi = StringUtils.repeat(' ',
            11);
    // [T-Up#INFO][COCRDUP.CPY, LINE #62] CARDSIDL (level: 2)
    private @Getter @Setter int cardsidl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #63] CARDSIDF (level: 2)
    private @Getter @Builder.Default String cardsidf = StringUtils.repeat(' ',
            1);

    public _OFFILLER16 getOFFILLER16() {
        return _OFFILLER16.builder().cardsida(getCardsida()).build();
    }

    public void setOFFILLER16(String source) {
        setCardsida(source.substring(0, 1));
    }

    public void setOFFILLER16(_OFFILLER16 source) {
        setOFFILLER16(source.toString());
    }

    public String getCardsida() {
        return getCardsidf();
    }

    public void setCardsida(String source) {
        setCardsidf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #66] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER17 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #67] CARDSIDI (level: 2)
    private @Getter @Builder.Default String cardsidi = StringUtils.repeat(' ',
            16);
    // [T-Up#INFO][COCRDUP.CPY, LINE #68] CRDNAMEL (level: 2)
    private @Getter @Setter int crdnamel;
    // [T-Up#INFO][COCRDUP.CPY, LINE #69] CRDNAMEF (level: 2)
    private @Getter @Builder.Default String crdnamef = StringUtils.repeat(' ',
            1);

    public _OFFILLER18 getOFFILLER18() {
        return _OFFILLER18.builder().crdnamea(getCrdnamea()).build();
    }

    public void setOFFILLER18(String source) {
        setCrdnamea(source.substring(0, 1));
    }

    public void setOFFILLER18(_OFFILLER18 source) {
        setOFFILLER18(source.toString());
    }

    public String getCrdnamea() {
        return getCrdnamef();
    }

    public void setCrdnamea(String source) {
        setCrdnamef(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #72] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER19 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #73] CRDNAMEI (level: 2)
    private @Getter @Builder.Default String crdnamei = StringUtils.repeat(' ',
            50);
    // [T-Up#INFO][COCRDUP.CPY, LINE #74] CRDSTCDL (level: 2)
    private @Getter @Setter int crdstcdl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #75] CRDSTCDF (level: 2)
    private @Getter @Builder.Default String crdstcdf = StringUtils.repeat(' ',
            1);

    public _OFFILLER20 getOFFILLER20() {
        return _OFFILLER20.builder().crdstcda(getCrdstcda()).build();
    }

    public void setOFFILLER20(String source) {
        setCrdstcda(source.substring(0, 1));
    }

    public void setOFFILLER20(_OFFILLER20 source) {
        setOFFILLER20(source.toString());
    }

    public String getCrdstcda() {
        return getCrdstcdf();
    }

    public void setCrdstcda(String source) {
        setCrdstcdf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #78] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER21 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #79] CRDSTCDI (level: 2)
    private @Getter @Builder.Default String crdstcdi = StringUtils.repeat(' ',
            1);
    // [T-Up#INFO][COCRDUP.CPY, LINE #80] EXPMONL (level: 2)
    private @Getter @Setter int expmonl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #81] EXPMONF (level: 2)
    private @Getter @Builder.Default String expmonf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER22 getOFFILLER22() {
        return _OFFILLER22.builder().expmona(getExpmona()).build();
    }

    public void setOFFILLER22(String source) {
        setExpmona(source.substring(0, 1));
    }

    public void setOFFILLER22(_OFFILLER22 source) {
        setOFFILLER22(source.toString());
    }

    public String getExpmona() {
        return getExpmonf();
    }

    public void setExpmona(String source) {
        setExpmonf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #84] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER23 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #85] EXPMONI (level: 2)
    private @Getter @Builder.Default String expmoni = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COCRDUP.CPY, LINE #86] EXPYEARL (level: 2)
    private @Getter @Setter int expyearl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #87] EXPYEARF (level: 2)
    private @Getter @Builder.Default String expyearf = StringUtils.repeat(' ',
            1);

    public _OFFILLER24 getOFFILLER24() {
        return _OFFILLER24.builder().expyeara(getExpyeara()).build();
    }

    public void setOFFILLER24(String source) {
        setExpyeara(source.substring(0, 1));
    }

    public void setOFFILLER24(_OFFILLER24 source) {
        setOFFILLER24(source.toString());
    }

    public String getExpyeara() {
        return getExpyearf();
    }

    public void setExpyeara(String source) {
        setExpyearf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #90] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER25 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #91] EXPYEARI (level: 2)
    private @Getter @Builder.Default String expyeari = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #92] EXPDAYL (level: 2)
    private @Getter @Setter int expdayl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #93] EXPDAYF (level: 2)
    private @Getter @Builder.Default String expdayf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER26 getOFFILLER26() {
        return _OFFILLER26.builder().expdaya(getExpdaya()).build();
    }

    public void setOFFILLER26(String source) {
        setExpdaya(source.substring(0, 1));
    }

    public void setOFFILLER26(_OFFILLER26 source) {
        setOFFILLER26(source.toString());
    }

    public String getExpdaya() {
        return getExpdayf();
    }

    public void setExpdaya(String source) {
        setExpdayf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #96] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER27 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #97] EXPDAYI (level: 2)
    private @Getter @Builder.Default String expdayi = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COCRDUP.CPY, LINE #98] INFOMSGL (level: 2)
    private @Getter @Setter int infomsgl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #99] INFOMSGF (level: 2)
    private @Getter @Builder.Default String infomsgf = StringUtils.repeat(' ',
            1);

    public _OFFILLER28 getOFFILLER28() {
        return _OFFILLER28.builder().infomsga(getInfomsga()).build();
    }

    public void setOFFILLER28(String source) {
        setInfomsga(source.substring(0, 1));
    }

    public void setOFFILLER28(_OFFILLER28 source) {
        setOFFILLER28(source.toString());
    }

    public String getInfomsga() {
        return getInfomsgf();
    }

    public void setInfomsga(String source) {
        setInfomsgf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #102] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER29 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #103] INFOMSGI (level: 2)
    private @Getter @Builder.Default String infomsgi = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COCRDUP.CPY, LINE #104] ERRMSGL (level: 2)
    private @Getter @Setter int errmsgl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #105] ERRMSGF (level: 2)
    private @Getter @Builder.Default String errmsgf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER30 getOFFILLER30() {
        return _OFFILLER30.builder().errmsga(getErrmsga()).build();
    }

    public void setOFFILLER30(String source) {
        setErrmsga(source.substring(0, 1));
    }

    public void setOFFILLER30(_OFFILLER30 source) {
        setOFFILLER30(source.toString());
    }

    public String getErrmsga() {
        return getErrmsgf();
    }

    public void setErrmsga(String source) {
        setErrmsgf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #108] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER31 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #109] ERRMSGI (level: 2)
    private @Getter @Builder.Default String errmsgi = StringUtils.repeat(' ',
            80);
    // [T-Up#INFO][COCRDUP.CPY, LINE #110] FKEYSL (level: 2)
    private @Getter @Setter int fkeysl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #111] FKEYSF (level: 2)
    private @Getter @Builder.Default String fkeysf = StringUtils.repeat(' ', 1);

    public _OFFILLER32 getOFFILLER32() {
        return _OFFILLER32.builder().fkeysa(getFkeysa()).build();
    }

    public void setOFFILLER32(String source) {
        setFkeysa(source.substring(0, 1));
    }

    public void setOFFILLER32(_OFFILLER32 source) {
        setOFFILLER32(source.toString());
    }

    public String getFkeysa() {
        return getFkeysf();
    }

    public void setFkeysa(String source) {
        setFkeysf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #114] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER33 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #115] FKEYSI (level: 2)
    private @Getter @Builder.Default String fkeysi = StringUtils
            .repeat(' ', 21);
    // [T-Up#INFO][COCRDUP.CPY, LINE #116] FKEYSCL (level: 2)
    private @Getter @Setter int fkeyscl;
    // [T-Up#INFO][COCRDUP.CPY, LINE #117] FKEYSCF (level: 2)
    private @Getter @Builder.Default String fkeyscf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER34 getOFFILLER34() {
        return _OFFILLER34.builder().fkeysca(getFkeysca()).build();
    }

    public void setOFFILLER34(String source) {
        setFkeysca(source.substring(0, 1));
    }

    public void setOFFILLER34(_OFFILLER34 source) {
        setOFFILLER34(source.toString());
    }

    public String getFkeysca() {
        return getFkeyscf();
    }

    public void setFkeysca(String source) {
        setFkeyscf(source);
    }

    // [T-Up#INFO][COCRDUP.CPY, LINE #120] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER35 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COCRDUP.CPY, LINE #121] FKEYSCI (level: 2)
    private @Getter @Builder.Default String fkeysci = StringUtils.repeat(' ',
            18);

    public void setOFFILLER1(String source) {
        OFFILLER1 = StringUtils.truncate(StringUtils.rightPad(source, 12), 12);
    }

    public void setTrnnamef(String source) {
        trnnamef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER3(String source) {
        OFFILLER3 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTrnnamei(String source) {
        trnnamei = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle01f(String source) {
        title01f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER5(String source) {
        OFFILLER5 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle01i(String source) {
        title01i = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setCurdatef(String source) {
        curdatef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER7(String source) {
        OFFILLER7 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCurdatei(String source) {
        curdatei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setPgmnamef(String source) {
        pgmnamef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER9(String source) {
        OFFILLER9 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setPgmnamei(String source) {
        pgmnamei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setTitle02f(String source) {
        title02f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER11(String source) {
        OFFILLER11 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle02i(String source) {
        title02i = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setCurtimef(String source) {
        curtimef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER13(String source) {
        OFFILLER13 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCurtimei(String source) {
        curtimei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setAcctsidf(String source) {
        acctsidf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER15(String source) {
        OFFILLER15 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcctsidi(String source) {
        acctsidi = StringUtils.truncate(StringUtils.rightPad(source, 11), 11);
    }

    public void setCardsidf(String source) {
        cardsidf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER17(String source) {
        OFFILLER17 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCardsidi(String source) {
        cardsidi = StringUtils.truncate(StringUtils.rightPad(source, 16), 16);
    }

    public void setCrdnamef(String source) {
        crdnamef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER19(String source) {
        OFFILLER19 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCrdnamei(String source) {
        crdnamei = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
    }

    public void setCrdstcdf(String source) {
        crdstcdf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER21(String source) {
        OFFILLER21 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCrdstcdi(String source) {
        crdstcdi = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setExpmonf(String source) {
        expmonf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER23(String source) {
        OFFILLER23 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpmoni(String source) {
        expmoni = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setExpyearf(String source) {
        expyearf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER25(String source) {
        OFFILLER25 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpyeari(String source) {
        expyeari = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpdayf(String source) {
        expdayf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER27(String source) {
        OFFILLER27 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpdayi(String source) {
        expdayi = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setInfomsgf(String source) {
        infomsgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER29(String source) {
        OFFILLER29 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setInfomsgi(String source) {
        infomsgi = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setErrmsgf(String source) {
        errmsgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER31(String source) {
        OFFILLER31 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setErrmsgi(String source) {
        errmsgi = StringUtils.truncate(StringUtils.rightPad(source, 80), 80);
    }

    public void setFkeysf(String source) {
        fkeysf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER33(String source) {
        OFFILLER33 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setFkeysi(String source) {
        fkeysi = StringUtils.truncate(StringUtils.rightPad(source, 21), 21);
    }

    public void setFkeyscf(String source) {
        fkeyscf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER35(String source) {
        OFFILLER35 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setFkeysci(String source) {
        fkeysci = StringUtils.truncate(StringUtils.rightPad(source, 18), 18);
    }

    public static CocrdupcCcrdupai createDefaultValueInstance() {
        return new CocrdupcCcrdupai.builder().build();
    }

    public void set(String source) {
        ByteBuffer tempByteBuffer1;
        source = StringUtils.truncate(StringUtils.rightPad(source, 484), 484);
        OFFILLER1 = source.substring(0, 12);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(12, 14).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            trnnamel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            trnnamel = 0;
        }
        trnnamef = source.substring(14, 15);
        OFFILLER3 = source.substring(15, 19);
        trnnamei = source.substring(19, 23);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(23, 25).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            title01l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            title01l = 0;
        }
        title01f = source.substring(25, 26);
        OFFILLER5 = source.substring(26, 30);
        title01i = source.substring(30, 70);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(70, 72).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            curdatel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            curdatel = 0;
        }
        curdatef = source.substring(72, 73);
        OFFILLER7 = source.substring(73, 77);
        curdatei = source.substring(77, 85);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(85, 87).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            pgmnamel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            pgmnamel = 0;
        }
        pgmnamef = source.substring(87, 88);
        OFFILLER9 = source.substring(88, 92);
        pgmnamei = source.substring(92, 100);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(100, 102).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            title02l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            title02l = 0;
        }
        title02f = source.substring(102, 103);
        OFFILLER11 = source.substring(103, 107);
        title02i = source.substring(107, 147);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(147, 149).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            curtimel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            curtimel = 0;
        }
        curtimef = source.substring(149, 150);
        OFFILLER13 = source.substring(150, 154);
        curtimei = source.substring(154, 162);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(162, 164).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acctsidl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acctsidl = 0;
        }
        acctsidf = source.substring(164, 165);
        OFFILLER15 = source.substring(165, 169);
        acctsidi = source.substring(169, 180);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(180, 182).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            cardsidl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            cardsidl = 0;
        }
        cardsidf = source.substring(182, 183);
        OFFILLER17 = source.substring(183, 187);
        cardsidi = source.substring(187, 203);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(203, 205).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            crdnamel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            crdnamel = 0;
        }
        crdnamef = source.substring(205, 206);
        OFFILLER19 = source.substring(206, 210);
        crdnamei = source.substring(210, 260);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(260, 262).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            crdstcdl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            crdstcdl = 0;
        }
        crdstcdf = source.substring(262, 263);
        OFFILLER21 = source.substring(263, 267);
        crdstcdi = source.substring(267, 268);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(268, 270).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            expmonl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            expmonl = 0;
        }
        expmonf = source.substring(270, 271);
        OFFILLER23 = source.substring(271, 275);
        expmoni = source.substring(275, 277);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(277, 279).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            expyearl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            expyearl = 0;
        }
        expyearf = source.substring(279, 280);
        OFFILLER25 = source.substring(280, 284);
        expyeari = source.substring(284, 288);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(288, 290).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            expdayl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            expdayl = 0;
        }
        expdayf = source.substring(290, 291);
        OFFILLER27 = source.substring(291, 295);
        expdayi = source.substring(295, 297);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(297, 299).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            infomsgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            infomsgl = 0;
        }
        infomsgf = source.substring(299, 300);
        OFFILLER29 = source.substring(300, 304);
        infomsgi = source.substring(304, 344);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(344, 346).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            errmsgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            errmsgl = 0;
        }
        errmsgf = source.substring(346, 347);
        OFFILLER31 = source.substring(347, 351);
        errmsgi = source.substring(351, 431);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(431, 433).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            fkeysl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            fkeysl = 0;
        }
        fkeysf = source.substring(433, 434);
        OFFILLER33 = source.substring(434, 438);
        fkeysi = source.substring(438, 459);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(459, 461).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            fkeyscl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            fkeyscl = 0;
        }
        fkeyscf = source.substring(461, 462);
        OFFILLER35 = source.substring(462, 466);
        fkeysci = source.substring(466, 484);
    }

    public String get() {
        ByteBuffer tempByteBuffer1;
        StringBuilder sb = new StringBuilder();
        sb.append(OFFILLER1);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) trnnamel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(trnnamef);
        sb.append(OFFILLER3);
        sb.append(trnnamei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) title01l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(title01f);
        sb.append(OFFILLER5);
        sb.append(title01i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) curdatel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(curdatef);
        sb.append(OFFILLER7);
        sb.append(curdatei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) pgmnamel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(pgmnamef);
        sb.append(OFFILLER9);
        sb.append(pgmnamei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) title02l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(title02f);
        sb.append(OFFILLER11);
        sb.append(title02i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) curtimel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(curtimef);
        sb.append(OFFILLER13);
        sb.append(curtimei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acctsidl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acctsidf);
        sb.append(OFFILLER15);
        sb.append(acctsidi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) cardsidl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(cardsidf);
        sb.append(OFFILLER17);
        sb.append(cardsidi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) crdnamel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(crdnamef);
        sb.append(OFFILLER19);
        sb.append(crdnamei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) crdstcdl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(crdstcdf);
        sb.append(OFFILLER21);
        sb.append(crdstcdi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) expmonl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(expmonf);
        sb.append(OFFILLER23);
        sb.append(expmoni);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) expyearl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(expyearf);
        sb.append(OFFILLER25);
        sb.append(expyeari);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) expdayl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(expdayf);
        sb.append(OFFILLER27);
        sb.append(expdayi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) infomsgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(infomsgf);
        sb.append(OFFILLER29);
        sb.append(infomsgi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) errmsgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(errmsgf);
        sb.append(OFFILLER31);
        sb.append(errmsgi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) fkeysl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(fkeysf);
        sb.append(OFFILLER33);
        sb.append(fkeysi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) fkeyscl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(fkeyscf);
        sb.append(OFFILLER35);
        sb.append(fkeysci);
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(OFFILLER1);
        sb.append(String.valueOf(getTrnnamel()));
        sb.append(getTrnnamef());
        sb.append(OFFILLER3);
        sb.append(getTrnnamei());
        sb.append(String.valueOf(getTitle01l()));
        sb.append(getTitle01f());
        sb.append(OFFILLER5);
        sb.append(getTitle01i());
        sb.append(String.valueOf(getCurdatel()));
        sb.append(getCurdatef());
        sb.append(OFFILLER7);
        sb.append(getCurdatei());
        sb.append(String.valueOf(getPgmnamel()));
        sb.append(getPgmnamef());
        sb.append(OFFILLER9);
        sb.append(getPgmnamei());
        sb.append(String.valueOf(getTitle02l()));
        sb.append(getTitle02f());
        sb.append(OFFILLER11);
        sb.append(getTitle02i());
        sb.append(String.valueOf(getCurtimel()));
        sb.append(getCurtimef());
        sb.append(OFFILLER13);
        sb.append(getCurtimei());
        sb.append(String.valueOf(getAcctsidl()));
        sb.append(getAcctsidf());
        sb.append(OFFILLER15);
        sb.append(getAcctsidi());
        sb.append(String.valueOf(getCardsidl()));
        sb.append(getCardsidf());
        sb.append(OFFILLER17);
        sb.append(getCardsidi());
        sb.append(String.valueOf(getCrdnamel()));
        sb.append(getCrdnamef());
        sb.append(OFFILLER19);
        sb.append(getCrdnamei());
        sb.append(String.valueOf(getCrdstcdl()));
        sb.append(getCrdstcdf());
        sb.append(OFFILLER21);
        sb.append(getCrdstcdi());
        sb.append(String.valueOf(getExpmonl()));
        sb.append(getExpmonf());
        sb.append(OFFILLER23);
        sb.append(getExpmoni());
        sb.append(String.valueOf(getExpyearl()));
        sb.append(getExpyearf());
        sb.append(OFFILLER25);
        sb.append(getExpyeari());
        sb.append(String.valueOf(getExpdayl()));
        sb.append(getExpdayf());
        sb.append(OFFILLER27);
        sb.append(getExpdayi());
        sb.append(String.valueOf(getInfomsgl()));
        sb.append(getInfomsgf());
        sb.append(OFFILLER29);
        sb.append(getInfomsgi());
        sb.append(String.valueOf(getErrmsgl()));
        sb.append(getErrmsgf());
        sb.append(OFFILLER31);
        sb.append(getErrmsgi());
        sb.append(String.valueOf(getFkeysl()));
        sb.append(getFkeysf());
        sb.append(OFFILLER33);
        sb.append(getFkeysi());
        sb.append(String.valueOf(getFkeyscl()));
        sb.append(getFkeyscf());
        sb.append(OFFILLER35);
        sb.append(getFkeysci());
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER2 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #23] TRNNAMEA (level: 3)
        private @Getter String trnnamea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(trnnamea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(trnnamea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER4 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #29] TITLE01A (level: 3)
        private @Getter String title01a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(title01a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(title01a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER6 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #35] CURDATEA (level: 3)
        private @Getter String curdatea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(curdatea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(curdatea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER8 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #41] PGMNAMEA (level: 3)
        private @Getter String pgmnamea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(pgmnamea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(pgmnamea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER10 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #47] TITLE02A (level: 3)
        private @Getter String title02a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(title02a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(title02a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER12 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #53] CURTIMEA (level: 3)
        private @Getter String curtimea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(curtimea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(curtimea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER14 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #59] ACCTSIDA (level: 3)
        private @Getter String acctsida = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acctsida);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acctsida);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER16 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #65] CARDSIDA (level: 3)
        private @Getter String cardsida = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(cardsida);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(cardsida);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER18 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #71] CRDNAMEA (level: 3)
        private @Getter String crdnamea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(crdnamea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(crdnamea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER20 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #77] CRDSTCDA (level: 3)
        private @Getter String crdstcda = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(crdstcda);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(crdstcda);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER22 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #83] EXPMONA (level: 3)
        private @Getter String expmona = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(expmona);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(expmona);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER24 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #89] EXPYEARA (level: 3)
        private @Getter String expyeara = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(expyeara);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(expyeara);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER26 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #95] EXPDAYA (level: 3)
        private @Getter String expdaya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(expdaya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(expdaya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER28 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #101] INFOMSGA (level: 3)
        private @Getter String infomsga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(infomsga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(infomsga);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER30 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #107] ERRMSGA (level: 3)
        private @Getter String errmsga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(errmsga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(errmsga);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER32 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #113] FKEYSA (level: 3)
        private @Getter String fkeysa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkeysa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkeysa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER34 {
        // [T-Up#INFO][COCRDUP.CPY, LINE #119] FKEYSCA (level: 3)
        private @Getter String fkeysca = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkeysca);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkeysca);
            return sb.toString();
        }
    }
}
