package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import com.tmax.openframe.DataConverter;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.util.*;
import java.util.function.Function;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:46 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class CoactvwcVariableContainer {
    // [T-Up#INFO][COACTVWC.cbl, LINE #35] WS-MISC-STORAGE (level: 1)
    private @Getter @Setter CoactvwcWsMiscStorage wsMiscStorage = new CoactvwcWsMiscStorage();
    // ***************************************************************** 
    // *      Literals and Constants                                     
    // ******************************************************************
    // [T-Up#INFO][COACTVWC.cbl, LINE #141] WS-LITERALS (level: 1)
    private @Getter @Setter CoactvwcWsLiterals wsLiterals = new CoactvwcWsLiterals();
    // ******************************************************************
    // *Other common working storage Variables                           
    // ******************************************************************
    //       *COPY CVCRD01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCRD01Y.cpy)
    // [T-Up#INFO][CVCRD01Y.cpy, LINE #2] CC-WORK-AREAS (level: 1)
    private @Getter @Setter CoactvwcCcWorkAreas ccWorkAreas = new CoactvwcCcWorkAreas();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // ******************************************************************
    // *Application Commmarea Copybook                                   
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter CoactvwcCarddemoCommarea carddemoCommarea = new CoactvwcCarddemoCommarea();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT 
    // *                                                                 
    // [T-Up#INFO][COACTVWC.cbl, LINE #212] WS-THIS-PROGCOMMAREA (level: 1)
    private @Getter @Setter CoactvwcWsThisProgcommarea wsThisProgcommarea = new CoactvwcWsThisProgcommarea();
    // [T-Up#INFO][COACTVWC.cbl, LINE #217] WS-COMMAREA (level: 1)
    private @Getter String wsCommarea = StringUtils.repeat(' ', 2000);
    // *IBM SUPPLIED COPYBOOKS                                           
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter CoactvwcDfhbmsca dfhbmsca = new CoactvwcDfhbmsca();
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter CoactvwcDfhaid dfhaid = new CoactvwcDfhaid();
    // *COMMON COPYBOOKS                                                 
    // *Screen Titles                                                    
    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter CoactvwcCcdaScreenTitle ccdaScreenTitle = new CoactvwcCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *BMS Copybook                                                     
    //       *COPY COACTVW.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COACTVW.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COACTVW.CPY, LINE #18] CACTVWAI (level: 1)
    private @Getter @Setter CoactvwcCactvwai cactvwai = new CoactvwcCactvwai();

    public CoactvwcCactvwao getCactvwao() {
        return CoactvwcCactvwao.builder().OFFILLER1(getOFFILLER1())
                .OFFILLER2(getOFFILLER2()).trnnamec(getTrnnamec())
                .trnnamep(getTrnnamep()).trnnameh(getTrnnameh())
                .trnnamev(getTrnnamev()).trnnameo(getTrnnameo())
                .OFFILLER3(getOFFILLER3()).title01c(getTitle01c())
                .title01p(getTitle01p()).title01h(getTitle01h())
                .title01v(getTitle01v()).title01o(getTitle01o())
                .OFFILLER4(getOFFILLER4()).curdatec(getCurdatec())
                .curdatep(getCurdatep()).curdateh(getCurdateh())
                .curdatev(getCurdatev()).curdateo(getCurdateo())
                .OFFILLER5(getOFFILLER5()).pgmnamec(getPgmnamec())
                .pgmnamep(getPgmnamep()).pgmnameh(getPgmnameh())
                .pgmnamev(getPgmnamev()).pgmnameo(getPgmnameo())
                .OFFILLER6(getOFFILLER6()).title02c(getTitle02c())
                .title02p(getTitle02p()).title02h(getTitle02h())
                .title02v(getTitle02v()).title02o(getTitle02o())
                .OFFILLER7(getOFFILLER7()).curtimec(getCurtimec())
                .curtimep(getCurtimep()).curtimeh(getCurtimeh())
                .curtimev(getCurtimev()).curtimeo(getCurtimeo())
                .OFFILLER8(getOFFILLER8()).acctsidc(getAcctsidc())
                .acctsidp(getAcctsidp()).acctsidh(getAcctsidh())
                .acctsidv(getAcctsidv()).acctsido(getAcctsido())
                .OFFILLER9(getOFFILLER9()).acsttusc(getAcsttusc())
                .acsttusp(getAcsttusp()).acsttush(getAcsttush())
                .acsttusv(getAcsttusv()).acsttuso(getAcsttuso())
                .OFFILLER10(getOFFILLER10()).adtopenc(getAdtopenc())
                .adtopenp(getAdtopenp()).adtopenh(getAdtopenh())
                .adtopenv(getAdtopenv()).adtopeno(getAdtopeno())
                .OFFILLER11(getOFFILLER11()).acrdlimc(getAcrdlimc())
                .acrdlimp(getAcrdlimp()).acrdlimh(getAcrdlimh())
                .acrdlimv(getAcrdlimv()).acrdlimo(getAcrdlimo())
                .OFFILLER12(getOFFILLER12()).aexpdtc(getAexpdtc())
                .aexpdtp(getAexpdtp()).aexpdth(getAexpdth())
                .aexpdtv(getAexpdtv()).aexpdto(getAexpdto())
                .OFFILLER13(getOFFILLER13()).acshlimc(getAcshlimc())
                .acshlimp(getAcshlimp()).acshlimh(getAcshlimh())
                .acshlimv(getAcshlimv()).acshlimo(getAcshlimo())
                .OFFILLER14(getOFFILLER14()).areisdtc(getAreisdtc())
                .areisdtp(getAreisdtp()).areisdth(getAreisdth())
                .areisdtv(getAreisdtv()).areisdto(getAreisdto())
                .OFFILLER15(getOFFILLER15()).acurbalc(getAcurbalc())
                .acurbalp(getAcurbalp()).acurbalh(getAcurbalh())
                .acurbalv(getAcurbalv()).acurbalo(getAcurbalo())
                .OFFILLER16(getOFFILLER16()).acrcycrc(getAcrcycrc())
                .acrcycrp(getAcrcycrp()).acrcycrh(getAcrcycrh())
                .acrcycrv(getAcrcycrv()).acrcycro(getAcrcycro())
                .OFFILLER17(getOFFILLER17()).aaddgrpc(getAaddgrpc())
                .aaddgrpp(getAaddgrpp()).aaddgrph(getAaddgrph())
                .aaddgrpv(getAaddgrpv()).aaddgrpo(getAaddgrpo())
                .OFFILLER18(getOFFILLER18()).acrcydbc(getAcrcydbc())
                .acrcydbp(getAcrcydbp()).acrcydbh(getAcrcydbh())
                .acrcydbv(getAcrcydbv()).acrcydbo(getAcrcydbo())
                .OFFILLER19(getOFFILLER19()).acstnumc(getAcstnumc())
                .acstnump(getAcstnump()).acstnumh(getAcstnumh())
                .acstnumv(getAcstnumv()).acstnumo(getAcstnumo())
                .OFFILLER20(getOFFILLER20()).acstssnc(getAcstssnc())
                .acstssnp(getAcstssnp()).acstssnh(getAcstssnh())
                .acstssnv(getAcstssnv()).acstssno(getAcstssno())
                .OFFILLER21(getOFFILLER21()).acstdobc(getAcstdobc())
                .acstdobp(getAcstdobp()).acstdobh(getAcstdobh())
                .acstdobv(getAcstdobv()).acstdobo(getAcstdobo())
                .OFFILLER22(getOFFILLER22()).acstfcoc(getAcstfcoc())
                .acstfcop(getAcstfcop()).acstfcoh(getAcstfcoh())
                .acstfcov(getAcstfcov()).acstfcoo(getAcstfcoo())
                .OFFILLER23(getOFFILLER23()).acsfnamc(getAcsfnamc())
                .acsfnamp(getAcsfnamp()).acsfnamh(getAcsfnamh())
                .acsfnamv(getAcsfnamv()).acsfnamo(getAcsfnamo())
                .OFFILLER24(getOFFILLER24()).acsmnamc(getAcsmnamc())
                .acsmnamp(getAcsmnamp()).acsmnamh(getAcsmnamh())
                .acsmnamv(getAcsmnamv()).acsmnamo(getAcsmnamo())
                .OFFILLER25(getOFFILLER25()).acslnamc(getAcslnamc())
                .acslnamp(getAcslnamp()).acslnamh(getAcslnamh())
                .acslnamv(getAcslnamv()).acslnamo(getAcslnamo())
                .OFFILLER26(getOFFILLER26()).acsadl1c(getAcsadl1c())
                .acsadl1p(getAcsadl1p()).acsadl1h(getAcsadl1h())
                .acsadl1v(getAcsadl1v()).acsadl1o(getAcsadl1o())
                .OFFILLER27(getOFFILLER27()).acssttec(getAcssttec())
                .acssttep(getAcssttep()).acsstteh(getAcsstteh())
                .acssttev(getAcssttev()).acsstteo(getAcsstteo())
                .OFFILLER28(getOFFILLER28()).acsadl2c(getAcsadl2c())
                .acsadl2p(getAcsadl2p()).acsadl2h(getAcsadl2h())
                .acsadl2v(getAcsadl2v()).acsadl2o(getAcsadl2o())
                .OFFILLER29(getOFFILLER29()).acszipcc(getAcszipcc())
                .acszipcp(getAcszipcp()).acszipch(getAcszipch())
                .acszipcv(getAcszipcv()).acszipco(getAcszipco())
                .OFFILLER30(getOFFILLER30()).acscityc(getAcscityc())
                .acscityp(getAcscityp()).acscityh(getAcscityh())
                .acscityv(getAcscityv()).acscityo(getAcscityo())
                .OFFILLER31(getOFFILLER31()).acsctryc(getAcsctryc())
                .acsctryp(getAcsctryp()).acsctryh(getAcsctryh())
                .acsctryv(getAcsctryv()).acsctryo(getAcsctryo())
                .OFFILLER32(getOFFILLER32()).acsphn1c(getAcsphn1c())
                .acsphn1p(getAcsphn1p()).acsphn1h(getAcsphn1h())
                .acsphn1v(getAcsphn1v()).acsphn1o(getAcsphn1o())
                .OFFILLER33(getOFFILLER33()).acsgovtc(getAcsgovtc())
                .acsgovtp(getAcsgovtp()).acsgovth(getAcsgovth())
                .acsgovtv(getAcsgovtv()).acsgovto(getAcsgovto())
                .OFFILLER34(getOFFILLER34()).acsphn2c(getAcsphn2c())
                .acsphn2p(getAcsphn2p()).acsphn2h(getAcsphn2h())
                .acsphn2v(getAcsphn2v()).acsphn2o(getAcsphn2o())
                .OFFILLER35(getOFFILLER35()).acseftcc(getAcseftcc())
                .acseftcp(getAcseftcp()).acseftch(getAcseftch())
                .acseftcv(getAcseftcv()).acseftco(getAcseftco())
                .OFFILLER36(getOFFILLER36()).acspflgc(getAcspflgc())
                .acspflgp(getAcspflgp()).acspflgh(getAcspflgh())
                .acspflgv(getAcspflgv()).acspflgo(getAcspflgo())
                .OFFILLER37(getOFFILLER37()).infomsgc(getInfomsgc())
                .infomsgp(getInfomsgp()).infomsgh(getInfomsgh())
                .infomsgv(getInfomsgv()).infomsgo(getInfomsgo())
                .OFFILLER38(getOFFILLER38()).errmsgc(getErrmsgc())
                .errmsgp(getErrmsgp()).errmsgh(getErrmsgh())
                .errmsgv(getErrmsgv()).errmsgo(getErrmsgo()).build();
    }

    public void setCactvwao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setAcctsidc(source.substring(165, 166));
        setAcctsidp(source.substring(166, 167));
        setAcctsidh(source.substring(167, 168));
        setAcctsidv(source.substring(168, 169));
        setAcctsido(source.substring(169, 180));
        setOFFILLER9(source.substring(180, 183));
        setAcsttusc(source.substring(183, 184));
        setAcsttusp(source.substring(184, 185));
        setAcsttush(source.substring(185, 186));
        setAcsttusv(source.substring(186, 187));
        setAcsttuso(source.substring(187, 188));
        setOFFILLER10(source.substring(188, 191));
        setAdtopenc(source.substring(191, 192));
        setAdtopenp(source.substring(192, 193));
        setAdtopenh(source.substring(193, 194));
        setAdtopenv(source.substring(194, 195));
        setAdtopeno(source.substring(195, 205));
        setOFFILLER11(source.substring(205, 208));
        setAcrdlimc(source.substring(208, 209));
        setAcrdlimp(source.substring(209, 210));
        setAcrdlimh(source.substring(210, 211));
        setAcrdlimv(source.substring(211, 212));
        setAcrdlimo(source.substring(212, 227));
        setOFFILLER12(source.substring(227, 230));
        setAexpdtc(source.substring(230, 231));
        setAexpdtp(source.substring(231, 232));
        setAexpdth(source.substring(232, 233));
        setAexpdtv(source.substring(233, 234));
        setAexpdto(source.substring(234, 244));
        setOFFILLER13(source.substring(244, 247));
        setAcshlimc(source.substring(247, 248));
        setAcshlimp(source.substring(248, 249));
        setAcshlimh(source.substring(249, 250));
        setAcshlimv(source.substring(250, 251));
        setAcshlimo(source.substring(251, 266));
        setOFFILLER14(source.substring(266, 269));
        setAreisdtc(source.substring(269, 270));
        setAreisdtp(source.substring(270, 271));
        setAreisdth(source.substring(271, 272));
        setAreisdtv(source.substring(272, 273));
        setAreisdto(source.substring(273, 283));
        setOFFILLER15(source.substring(283, 286));
        setAcurbalc(source.substring(286, 287));
        setAcurbalp(source.substring(287, 288));
        setAcurbalh(source.substring(288, 289));
        setAcurbalv(source.substring(289, 290));
        setAcurbalo(source.substring(290, 305));
        setOFFILLER16(source.substring(305, 308));
        setAcrcycrc(source.substring(308, 309));
        setAcrcycrp(source.substring(309, 310));
        setAcrcycrh(source.substring(310, 311));
        setAcrcycrv(source.substring(311, 312));
        setAcrcycro(source.substring(312, 327));
        setOFFILLER17(source.substring(327, 330));
        setAaddgrpc(source.substring(330, 331));
        setAaddgrpp(source.substring(331, 332));
        setAaddgrph(source.substring(332, 333));
        setAaddgrpv(source.substring(333, 334));
        setAaddgrpo(source.substring(334, 344));
        setOFFILLER18(source.substring(344, 347));
        setAcrcydbc(source.substring(347, 348));
        setAcrcydbp(source.substring(348, 349));
        setAcrcydbh(source.substring(349, 350));
        setAcrcydbv(source.substring(350, 351));
        setAcrcydbo(source.substring(351, 366));
        setOFFILLER19(source.substring(366, 369));
        setAcstnumc(source.substring(369, 370));
        setAcstnump(source.substring(370, 371));
        setAcstnumh(source.substring(371, 372));
        setAcstnumv(source.substring(372, 373));
        setAcstnumo(source.substring(373, 382));
        setOFFILLER20(source.substring(382, 385));
        setAcstssnc(source.substring(385, 386));
        setAcstssnp(source.substring(386, 387));
        setAcstssnh(source.substring(387, 388));
        setAcstssnv(source.substring(388, 389));
        setAcstssno(source.substring(389, 401));
        setOFFILLER21(source.substring(401, 404));
        setAcstdobc(source.substring(404, 405));
        setAcstdobp(source.substring(405, 406));
        setAcstdobh(source.substring(406, 407));
        setAcstdobv(source.substring(407, 408));
        setAcstdobo(source.substring(408, 418));
        setOFFILLER22(source.substring(418, 421));
        setAcstfcoc(source.substring(421, 422));
        setAcstfcop(source.substring(422, 423));
        setAcstfcoh(source.substring(423, 424));
        setAcstfcov(source.substring(424, 425));
        setAcstfcoo(source.substring(425, 428));
        setOFFILLER23(source.substring(428, 431));
        setAcsfnamc(source.substring(431, 432));
        setAcsfnamp(source.substring(432, 433));
        setAcsfnamh(source.substring(433, 434));
        setAcsfnamv(source.substring(434, 435));
        setAcsfnamo(source.substring(435, 460));
        setOFFILLER24(source.substring(460, 463));
        setAcsmnamc(source.substring(463, 464));
        setAcsmnamp(source.substring(464, 465));
        setAcsmnamh(source.substring(465, 466));
        setAcsmnamv(source.substring(466, 467));
        setAcsmnamo(source.substring(467, 492));
        setOFFILLER25(source.substring(492, 495));
        setAcslnamc(source.substring(495, 496));
        setAcslnamp(source.substring(496, 497));
        setAcslnamh(source.substring(497, 498));
        setAcslnamv(source.substring(498, 499));
        setAcslnamo(source.substring(499, 524));
        setOFFILLER26(source.substring(524, 527));
        setAcsadl1c(source.substring(527, 528));
        setAcsadl1p(source.substring(528, 529));
        setAcsadl1h(source.substring(529, 530));
        setAcsadl1v(source.substring(530, 531));
        setAcsadl1o(source.substring(531, 581));
        setOFFILLER27(source.substring(581, 584));
        setAcssttec(source.substring(584, 585));
        setAcssttep(source.substring(585, 586));
        setAcsstteh(source.substring(586, 587));
        setAcssttev(source.substring(587, 588));
        setAcsstteo(source.substring(588, 590));
        setOFFILLER28(source.substring(590, 593));
        setAcsadl2c(source.substring(593, 594));
        setAcsadl2p(source.substring(594, 595));
        setAcsadl2h(source.substring(595, 596));
        setAcsadl2v(source.substring(596, 597));
        setAcsadl2o(source.substring(597, 647));
        setOFFILLER29(source.substring(647, 650));
        setAcszipcc(source.substring(650, 651));
        setAcszipcp(source.substring(651, 652));
        setAcszipch(source.substring(652, 653));
        setAcszipcv(source.substring(653, 654));
        setAcszipco(source.substring(654, 659));
        setOFFILLER30(source.substring(659, 662));
        setAcscityc(source.substring(662, 663));
        setAcscityp(source.substring(663, 664));
        setAcscityh(source.substring(664, 665));
        setAcscityv(source.substring(665, 666));
        setAcscityo(source.substring(666, 716));
        setOFFILLER31(source.substring(716, 719));
        setAcsctryc(source.substring(719, 720));
        setAcsctryp(source.substring(720, 721));
        setAcsctryh(source.substring(721, 722));
        setAcsctryv(source.substring(722, 723));
        setAcsctryo(source.substring(723, 726));
        setOFFILLER32(source.substring(726, 729));
        setAcsphn1c(source.substring(729, 730));
        setAcsphn1p(source.substring(730, 731));
        setAcsphn1h(source.substring(731, 732));
        setAcsphn1v(source.substring(732, 733));
        setAcsphn1o(source.substring(733, 746));
        setOFFILLER33(source.substring(746, 749));
        setAcsgovtc(source.substring(749, 750));
        setAcsgovtp(source.substring(750, 751));
        setAcsgovth(source.substring(751, 752));
        setAcsgovtv(source.substring(752, 753));
        setAcsgovto(source.substring(753, 773));
        setOFFILLER34(source.substring(773, 776));
        setAcsphn2c(source.substring(776, 777));
        setAcsphn2p(source.substring(777, 778));
        setAcsphn2h(source.substring(778, 779));
        setAcsphn2v(source.substring(779, 780));
        setAcsphn2o(source.substring(780, 793));
        setOFFILLER35(source.substring(793, 796));
        setAcseftcc(source.substring(796, 797));
        setAcseftcp(source.substring(797, 798));
        setAcseftch(source.substring(798, 799));
        setAcseftcv(source.substring(799, 800));
        setAcseftco(source.substring(800, 810));
        setOFFILLER36(source.substring(810, 813));
        setAcspflgc(source.substring(813, 814));
        setAcspflgp(source.substring(814, 815));
        setAcspflgh(source.substring(815, 816));
        setAcspflgv(source.substring(816, 817));
        setAcspflgo(source.substring(817, 818));
        setOFFILLER37(source.substring(818, 821));
        setInfomsgc(source.substring(821, 822));
        setInfomsgp(source.substring(822, 823));
        setInfomsgh(source.substring(823, 824));
        setInfomsgv(source.substring(824, 825));
        setInfomsgo(source.substring(825, 870));
        setOFFILLER38(source.substring(870, 873));
        setErrmsgc(source.substring(873, 874));
        setErrmsgp(source.substring(874, 875));
        setErrmsgh(source.substring(875, 876));
        setErrmsgv(source.substring(876, 877));
        setErrmsgo(source.substring(877, 955));
    }

    public void setCactvwao(CoactvwcCactvwao source) {
        setCactvwao(source.toString());
    }

    public String getOFFILLER1() {
        return getCactvwai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCactvwai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCactvwai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCactvwai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCactvwai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactvwai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCactvwai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCactvwai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactvwai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCactvwai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCactvwai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactvwai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCactvwai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCactvwai()
                .setOFFILLER3(
                        StringUtils.overlay(getCactvwai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCactvwai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCactvwai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCactvwai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCactvwai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCactvwai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactvwai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCactvwai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCactvwai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactvwai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCactvwai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCactvwai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactvwai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCactvwai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCactvwai()
                .setOFFILLER5(
                        StringUtils.overlay(getCactvwai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCactvwai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCactvwai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCactvwai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCactvwai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCactvwai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactvwai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCactvwai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCactvwai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactvwai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCactvwai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCactvwai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactvwai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCactvwai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCactvwai()
                .setOFFILLER7(
                        StringUtils.overlay(getCactvwai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCactvwai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCactvwai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCactvwai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCactvwai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCactvwai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactvwai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCactvwai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCactvwai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactvwai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCactvwai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCactvwai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactvwai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCactvwai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCactvwai()
                .setOFFILLER9(
                        StringUtils.overlay(getCactvwai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCactvwai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCactvwai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCactvwai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCactvwai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCactvwai().setOFFILLER11(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCactvwai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCactvwai().setOFFILLER11(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCactvwai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCactvwai().setOFFILLER11(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCactvwai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCactvwai().setOFFILLER11(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCactvwai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCactvwai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCactvwai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCactvwai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCactvwai().setOFFILLER13(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCactvwai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCactvwai().setOFFILLER13(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCactvwai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCactvwai().setOFFILLER13(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCactvwai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCactvwai().setOFFILLER13(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCactvwai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCactvwai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcctsidl());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCactvwai().getAcctsidf();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcctsidl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcctsidl(0);
        }
    }

    public String getAcctsidc() {
        return getCactvwai().getOFFILLER15().substring(0, 1);
    }

    public void setAcctsidc(String source) {
        getCactvwai().setOFFILLER15(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER15(), source, 0, 1));
    }

    public String getAcctsidp() {
        return getCactvwai().getOFFILLER15().substring(1, 2);
    }

    public void setAcctsidp(String source) {
        getCactvwai().setOFFILLER15(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER15(), source, 1, 2));
    }

    public String getAcctsidh() {
        return getCactvwai().getOFFILLER15().substring(2, 3);
    }

    public void setAcctsidh(String source) {
        getCactvwai().setOFFILLER15(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER15(), source, 2, 3));
    }

    public String getAcctsidv() {
        return getCactvwai().getOFFILLER15().substring(3);
    }

    public void setAcctsidv(String source) {
        getCactvwai().setOFFILLER15(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER15(), source, 3, 4));
    }

    public String getAcctsido() {
        String temp8 = DataConverter.convZonedLongToString(getCactvwai()
                .getAcctsidi(), 11);
        return temp8;
    }

    public void setAcctsido(String source) {
        getCactvwai().setAcctsidi(
                DataConverter.convZonedStringToLong(StringUtils.overlay(
                        DataConverter.convZonedLongToString(getCactvwai()
                                .getAcctsidi(), 11), source, 0, 11), 11));
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsttusl());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCactvwai().getAcsttusf();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsttusl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsttusl(0);
        }
    }

    public String getAcsttusc() {
        return getCactvwai().getOFFILLER17().substring(0, 1);
    }

    public void setAcsttusc(String source) {
        getCactvwai().setOFFILLER17(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER17(), source, 0, 1));
    }

    public String getAcsttusp() {
        return getCactvwai().getOFFILLER17().substring(1, 2);
    }

    public void setAcsttusp(String source) {
        getCactvwai().setOFFILLER17(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER17(), source, 1, 2));
    }

    public String getAcsttush() {
        return getCactvwai().getOFFILLER17().substring(2, 3);
    }

    public void setAcsttush(String source) {
        getCactvwai().setOFFILLER17(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER17(), source, 2, 3));
    }

    public String getAcsttusv() {
        return getCactvwai().getOFFILLER17().substring(3);
    }

    public void setAcsttusv(String source) {
        getCactvwai().setOFFILLER17(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER17(), source, 3, 4));
    }

    public String getAcsttuso() {
        return getCactvwai().getAcsttusi();
    }

    public void setAcsttuso(String source) {
        getCactvwai().setAcsttusi(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAdtopenl());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCactvwai().getAdtopenf();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAdtopenl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAdtopenl(0);
        }
    }

    public String getAdtopenc() {
        return getCactvwai().getOFFILLER19().substring(0, 1);
    }

    public void setAdtopenc(String source) {
        getCactvwai().setOFFILLER19(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER19(), source, 0, 1));
    }

    public String getAdtopenp() {
        return getCactvwai().getOFFILLER19().substring(1, 2);
    }

    public void setAdtopenp(String source) {
        getCactvwai().setOFFILLER19(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER19(), source, 1, 2));
    }

    public String getAdtopenh() {
        return getCactvwai().getOFFILLER19().substring(2, 3);
    }

    public void setAdtopenh(String source) {
        getCactvwai().setOFFILLER19(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER19(), source, 2, 3));
    }

    public String getAdtopenv() {
        return getCactvwai().getOFFILLER19().substring(3);
    }

    public void setAdtopenv(String source) {
        getCactvwai().setOFFILLER19(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER19(), source, 3, 4));
    }

    public String getAdtopeno() {
        return getCactvwai().getAdtopeni();
    }

    public void setAdtopeno(String source) {
        getCactvwai().setAdtopeni(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcrdliml());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCactvwai().getAcrdlimf();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcrdliml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcrdliml(0);
        }
    }

    public String getAcrdlimc() {
        return getCactvwai().getOFFILLER21().substring(0, 1);
    }

    public void setAcrdlimc(String source) {
        getCactvwai().setOFFILLER21(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER21(), source, 0, 1));
    }

    public String getAcrdlimp() {
        return getCactvwai().getOFFILLER21().substring(1, 2);
    }

    public void setAcrdlimp(String source) {
        getCactvwai().setOFFILLER21(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER21(), source, 1, 2));
    }

    public String getAcrdlimh() {
        return getCactvwai().getOFFILLER21().substring(2, 3);
    }

    public void setAcrdlimh(String source) {
        getCactvwai().setOFFILLER21(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER21(), source, 2, 3));
    }

    public String getAcrdlimv() {
        return getCactvwai().getOFFILLER21().substring(3);
    }

    public void setAcrdlimv(String source) {
        getCactvwai().setOFFILLER21(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER21(), source, 3, 4));
    }

    public String getAcrdlimo() {
        return getCactvwai().getAcrdlimi();
    }

    public void setAcrdlimo(String source) {
        getCactvwai().setAcrdlimi(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAexpdtl());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCactvwai().getAexpdtf();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAexpdtl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAexpdtl(0);
        }
    }

    public String getAexpdtc() {
        return getCactvwai().getOFFILLER23().substring(0, 1);
    }

    public void setAexpdtc(String source) {
        getCactvwai().setOFFILLER23(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER23(), source, 0, 1));
    }

    public String getAexpdtp() {
        return getCactvwai().getOFFILLER23().substring(1, 2);
    }

    public void setAexpdtp(String source) {
        getCactvwai().setOFFILLER23(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER23(), source, 1, 2));
    }

    public String getAexpdth() {
        return getCactvwai().getOFFILLER23().substring(2, 3);
    }

    public void setAexpdth(String source) {
        getCactvwai().setOFFILLER23(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER23(), source, 2, 3));
    }

    public String getAexpdtv() {
        return getCactvwai().getOFFILLER23().substring(3);
    }

    public void setAexpdtv(String source) {
        getCactvwai().setOFFILLER23(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER23(), source, 3, 4));
    }

    public String getAexpdto() {
        return getCactvwai().getAexpdti();
    }

    public void setAexpdto(String source) {
        getCactvwai().setAexpdti(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcshliml());
        tempByteBuffer1.flip();
        String temp13 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp13 + getCactvwai().getAcshlimf();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcshliml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcshliml(0);
        }
    }

    public String getAcshlimc() {
        return getCactvwai().getOFFILLER25().substring(0, 1);
    }

    public void setAcshlimc(String source) {
        getCactvwai().setOFFILLER25(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER25(), source, 0, 1));
    }

    public String getAcshlimp() {
        return getCactvwai().getOFFILLER25().substring(1, 2);
    }

    public void setAcshlimp(String source) {
        getCactvwai().setOFFILLER25(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER25(), source, 1, 2));
    }

    public String getAcshlimh() {
        return getCactvwai().getOFFILLER25().substring(2, 3);
    }

    public void setAcshlimh(String source) {
        getCactvwai().setOFFILLER25(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER25(), source, 2, 3));
    }

    public String getAcshlimv() {
        return getCactvwai().getOFFILLER25().substring(3);
    }

    public void setAcshlimv(String source) {
        getCactvwai().setOFFILLER25(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER25(), source, 3, 4));
    }

    public String getAcshlimo() {
        return getCactvwai().getAcshlimi();
    }

    public void setAcshlimo(String source) {
        getCactvwai().setAcshlimi(source);
    }

    public String getOFFILLER14() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAreisdtl());
        tempByteBuffer1.flip();
        String temp14 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp14 + getCactvwai().getAreisdtf();
    }

    public void setOFFILLER14(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAreisdtl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAreisdtl(0);
        }
    }

    public String getAreisdtc() {
        return getCactvwai().getOFFILLER27().substring(0, 1);
    }

    public void setAreisdtc(String source) {
        getCactvwai().setOFFILLER27(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER27(), source, 0, 1));
    }

    public String getAreisdtp() {
        return getCactvwai().getOFFILLER27().substring(1, 2);
    }

    public void setAreisdtp(String source) {
        getCactvwai().setOFFILLER27(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER27(), source, 1, 2));
    }

    public String getAreisdth() {
        return getCactvwai().getOFFILLER27().substring(2, 3);
    }

    public void setAreisdth(String source) {
        getCactvwai().setOFFILLER27(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER27(), source, 2, 3));
    }

    public String getAreisdtv() {
        return getCactvwai().getOFFILLER27().substring(3);
    }

    public void setAreisdtv(String source) {
        getCactvwai().setOFFILLER27(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER27(), source, 3, 4));
    }

    public String getAreisdto() {
        return getCactvwai().getAreisdti();
    }

    public void setAreisdto(String source) {
        getCactvwai().setAreisdti(source);
    }

    public String getOFFILLER15() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcurball());
        tempByteBuffer1.flip();
        String temp15 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp15 + getCactvwai().getAcurbalf();
    }

    public void setOFFILLER15(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcurball(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcurball(0);
        }
    }

    public String getAcurbalc() {
        return getCactvwai().getOFFILLER29().substring(0, 1);
    }

    public void setAcurbalc(String source) {
        getCactvwai().setOFFILLER29(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER29(), source, 0, 1));
    }

    public String getAcurbalp() {
        return getCactvwai().getOFFILLER29().substring(1, 2);
    }

    public void setAcurbalp(String source) {
        getCactvwai().setOFFILLER29(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER29(), source, 1, 2));
    }

    public String getAcurbalh() {
        return getCactvwai().getOFFILLER29().substring(2, 3);
    }

    public void setAcurbalh(String source) {
        getCactvwai().setOFFILLER29(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER29(), source, 2, 3));
    }

    public String getAcurbalv() {
        return getCactvwai().getOFFILLER29().substring(3);
    }

    public void setAcurbalv(String source) {
        getCactvwai().setOFFILLER29(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER29(), source, 3, 4));
    }

    public String getAcurbalo() {
        return getCactvwai().getAcurbali();
    }

    public void setAcurbalo(String source) {
        getCactvwai().setAcurbali(source);
    }

    public String getOFFILLER16() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcrcycrl());
        tempByteBuffer1.flip();
        String temp16 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp16 + getCactvwai().getAcrcycrf();
    }

    public void setOFFILLER16(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcrcycrl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcrcycrl(0);
        }
    }

    public String getAcrcycrc() {
        return getCactvwai().getOFFILLER31().substring(0, 1);
    }

    public void setAcrcycrc(String source) {
        getCactvwai().setOFFILLER31(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER31(), source, 0, 1));
    }

    public String getAcrcycrp() {
        return getCactvwai().getOFFILLER31().substring(1, 2);
    }

    public void setAcrcycrp(String source) {
        getCactvwai().setOFFILLER31(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER31(), source, 1, 2));
    }

    public String getAcrcycrh() {
        return getCactvwai().getOFFILLER31().substring(2, 3);
    }

    public void setAcrcycrh(String source) {
        getCactvwai().setOFFILLER31(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER31(), source, 2, 3));
    }

    public String getAcrcycrv() {
        return getCactvwai().getOFFILLER31().substring(3);
    }

    public void setAcrcycrv(String source) {
        getCactvwai().setOFFILLER31(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER31(), source, 3, 4));
    }

    public String getAcrcycro() {
        return getCactvwai().getAcrcycri();
    }

    public void setAcrcycro(String source) {
        getCactvwai().setAcrcycri(source);
    }

    public String getOFFILLER17() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAaddgrpl());
        tempByteBuffer1.flip();
        String temp17 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp17 + getCactvwai().getAaddgrpf();
    }

    public void setOFFILLER17(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAaddgrpl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAaddgrpl(0);
        }
    }

    public String getAaddgrpc() {
        return getCactvwai().getOFFILLER33().substring(0, 1);
    }

    public void setAaddgrpc(String source) {
        getCactvwai().setOFFILLER33(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER33(), source, 0, 1));
    }

    public String getAaddgrpp() {
        return getCactvwai().getOFFILLER33().substring(1, 2);
    }

    public void setAaddgrpp(String source) {
        getCactvwai().setOFFILLER33(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER33(), source, 1, 2));
    }

    public String getAaddgrph() {
        return getCactvwai().getOFFILLER33().substring(2, 3);
    }

    public void setAaddgrph(String source) {
        getCactvwai().setOFFILLER33(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER33(), source, 2, 3));
    }

    public String getAaddgrpv() {
        return getCactvwai().getOFFILLER33().substring(3);
    }

    public void setAaddgrpv(String source) {
        getCactvwai().setOFFILLER33(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER33(), source, 3, 4));
    }

    public String getAaddgrpo() {
        return getCactvwai().getAaddgrpi();
    }

    public void setAaddgrpo(String source) {
        getCactvwai().setAaddgrpi(source);
    }

    public String getOFFILLER18() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcrcydbl());
        tempByteBuffer1.flip();
        String temp18 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp18 + getCactvwai().getAcrcydbf();
    }

    public void setOFFILLER18(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcrcydbl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcrcydbl(0);
        }
    }

    public String getAcrcydbc() {
        return getCactvwai().getOFFILLER35().substring(0, 1);
    }

    public void setAcrcydbc(String source) {
        getCactvwai().setOFFILLER35(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER35(), source, 0, 1));
    }

    public String getAcrcydbp() {
        return getCactvwai().getOFFILLER35().substring(1, 2);
    }

    public void setAcrcydbp(String source) {
        getCactvwai().setOFFILLER35(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER35(), source, 1, 2));
    }

    public String getAcrcydbh() {
        return getCactvwai().getOFFILLER35().substring(2, 3);
    }

    public void setAcrcydbh(String source) {
        getCactvwai().setOFFILLER35(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER35(), source, 2, 3));
    }

    public String getAcrcydbv() {
        return getCactvwai().getOFFILLER35().substring(3);
    }

    public void setAcrcydbv(String source) {
        getCactvwai().setOFFILLER35(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER35(), source, 3, 4));
    }

    public String getAcrcydbo() {
        return getCactvwai().getAcrcydbi();
    }

    public void setAcrcydbo(String source) {
        getCactvwai().setAcrcydbi(source);
    }

    public String getOFFILLER19() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcstnuml());
        tempByteBuffer1.flip();
        String temp19 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp19 + getCactvwai().getAcstnumf();
    }

    public void setOFFILLER19(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcstnuml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcstnuml(0);
        }
    }

    public String getAcstnumc() {
        return getCactvwai().getOFFILLER37().substring(0, 1);
    }

    public void setAcstnumc(String source) {
        getCactvwai().setOFFILLER37(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER37(), source, 0, 1));
    }

    public String getAcstnump() {
        return getCactvwai().getOFFILLER37().substring(1, 2);
    }

    public void setAcstnump(String source) {
        getCactvwai().setOFFILLER37(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER37(), source, 1, 2));
    }

    public String getAcstnumh() {
        return getCactvwai().getOFFILLER37().substring(2, 3);
    }

    public void setAcstnumh(String source) {
        getCactvwai().setOFFILLER37(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER37(), source, 2, 3));
    }

    public String getAcstnumv() {
        return getCactvwai().getOFFILLER37().substring(3);
    }

    public void setAcstnumv(String source) {
        getCactvwai().setOFFILLER37(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER37(), source, 3, 4));
    }

    public String getAcstnumo() {
        return getCactvwai().getAcstnumi();
    }

    public void setAcstnumo(String source) {
        getCactvwai().setAcstnumi(source);
    }

    public String getOFFILLER20() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcstssnl());
        tempByteBuffer1.flip();
        String temp20 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp20 + getCactvwai().getAcstssnf();
    }

    public void setOFFILLER20(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcstssnl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcstssnl(0);
        }
    }

    public String getAcstssnc() {
        return getCactvwai().getOFFILLER39().substring(0, 1);
    }

    public void setAcstssnc(String source) {
        getCactvwai().setOFFILLER39(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER39(), source, 0, 1));
    }

    public String getAcstssnp() {
        return getCactvwai().getOFFILLER39().substring(1, 2);
    }

    public void setAcstssnp(String source) {
        getCactvwai().setOFFILLER39(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER39(), source, 1, 2));
    }

    public String getAcstssnh() {
        return getCactvwai().getOFFILLER39().substring(2, 3);
    }

    public void setAcstssnh(String source) {
        getCactvwai().setOFFILLER39(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER39(), source, 2, 3));
    }

    public String getAcstssnv() {
        return getCactvwai().getOFFILLER39().substring(3);
    }

    public void setAcstssnv(String source) {
        getCactvwai().setOFFILLER39(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER39(), source, 3, 4));
    }

    public String getAcstssno() {
        return getCactvwai().getAcstssni();
    }

    public void setAcstssno(String source) {
        getCactvwai().setAcstssni(source);
    }

    public String getOFFILLER21() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcstdobl());
        tempByteBuffer1.flip();
        String temp21 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp21 + getCactvwai().getAcstdobf();
    }

    public void setOFFILLER21(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcstdobl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcstdobl(0);
        }
    }

    public String getAcstdobc() {
        return getCactvwai().getOFFILLER41().substring(0, 1);
    }

    public void setAcstdobc(String source) {
        getCactvwai().setOFFILLER41(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER41(), source, 0, 1));
    }

    public String getAcstdobp() {
        return getCactvwai().getOFFILLER41().substring(1, 2);
    }

    public void setAcstdobp(String source) {
        getCactvwai().setOFFILLER41(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER41(), source, 1, 2));
    }

    public String getAcstdobh() {
        return getCactvwai().getOFFILLER41().substring(2, 3);
    }

    public void setAcstdobh(String source) {
        getCactvwai().setOFFILLER41(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER41(), source, 2, 3));
    }

    public String getAcstdobv() {
        return getCactvwai().getOFFILLER41().substring(3);
    }

    public void setAcstdobv(String source) {
        getCactvwai().setOFFILLER41(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER41(), source, 3, 4));
    }

    public String getAcstdobo() {
        return getCactvwai().getAcstdobi();
    }

    public void setAcstdobo(String source) {
        getCactvwai().setAcstdobi(source);
    }

    public String getOFFILLER22() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcstfcol());
        tempByteBuffer1.flip();
        String temp22 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp22 + getCactvwai().getAcstfcof();
    }

    public void setOFFILLER22(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcstfcol(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcstfcol(0);
        }
    }

    public String getAcstfcoc() {
        return getCactvwai().getOFFILLER43().substring(0, 1);
    }

    public void setAcstfcoc(String source) {
        getCactvwai().setOFFILLER43(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER43(), source, 0, 1));
    }

    public String getAcstfcop() {
        return getCactvwai().getOFFILLER43().substring(1, 2);
    }

    public void setAcstfcop(String source) {
        getCactvwai().setOFFILLER43(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER43(), source, 1, 2));
    }

    public String getAcstfcoh() {
        return getCactvwai().getOFFILLER43().substring(2, 3);
    }

    public void setAcstfcoh(String source) {
        getCactvwai().setOFFILLER43(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER43(), source, 2, 3));
    }

    public String getAcstfcov() {
        return getCactvwai().getOFFILLER43().substring(3);
    }

    public void setAcstfcov(String source) {
        getCactvwai().setOFFILLER43(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER43(), source, 3, 4));
    }

    public String getAcstfcoo() {
        return getCactvwai().getAcstfcoi();
    }

    public void setAcstfcoo(String source) {
        getCactvwai().setAcstfcoi(source);
    }

    public String getOFFILLER23() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsfnaml());
        tempByteBuffer1.flip();
        String temp23 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp23 + getCactvwai().getAcsfnamf();
    }

    public void setOFFILLER23(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsfnaml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsfnaml(0);
        }
    }

    public String getAcsfnamc() {
        return getCactvwai().getOFFILLER45().substring(0, 1);
    }

    public void setAcsfnamc(String source) {
        getCactvwai().setOFFILLER45(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER45(), source, 0, 1));
    }

    public String getAcsfnamp() {
        return getCactvwai().getOFFILLER45().substring(1, 2);
    }

    public void setAcsfnamp(String source) {
        getCactvwai().setOFFILLER45(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER45(), source, 1, 2));
    }

    public String getAcsfnamh() {
        return getCactvwai().getOFFILLER45().substring(2, 3);
    }

    public void setAcsfnamh(String source) {
        getCactvwai().setOFFILLER45(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER45(), source, 2, 3));
    }

    public String getAcsfnamv() {
        return getCactvwai().getOFFILLER45().substring(3);
    }

    public void setAcsfnamv(String source) {
        getCactvwai().setOFFILLER45(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER45(), source, 3, 4));
    }

    public String getAcsfnamo() {
        return getCactvwai().getAcsfnami();
    }

    public void setAcsfnamo(String source) {
        getCactvwai().setAcsfnami(source);
    }

    public String getOFFILLER24() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsmnaml());
        tempByteBuffer1.flip();
        String temp24 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp24 + getCactvwai().getAcsmnamf();
    }

    public void setOFFILLER24(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsmnaml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsmnaml(0);
        }
    }

    public String getAcsmnamc() {
        return getCactvwai().getOFFILLER47().substring(0, 1);
    }

    public void setAcsmnamc(String source) {
        getCactvwai().setOFFILLER47(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER47(), source, 0, 1));
    }

    public String getAcsmnamp() {
        return getCactvwai().getOFFILLER47().substring(1, 2);
    }

    public void setAcsmnamp(String source) {
        getCactvwai().setOFFILLER47(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER47(), source, 1, 2));
    }

    public String getAcsmnamh() {
        return getCactvwai().getOFFILLER47().substring(2, 3);
    }

    public void setAcsmnamh(String source) {
        getCactvwai().setOFFILLER47(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER47(), source, 2, 3));
    }

    public String getAcsmnamv() {
        return getCactvwai().getOFFILLER47().substring(3);
    }

    public void setAcsmnamv(String source) {
        getCactvwai().setOFFILLER47(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER47(), source, 3, 4));
    }

    public String getAcsmnamo() {
        return getCactvwai().getAcsmnami();
    }

    public void setAcsmnamo(String source) {
        getCactvwai().setAcsmnami(source);
    }

    public String getOFFILLER25() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcslnaml());
        tempByteBuffer1.flip();
        String temp25 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp25 + getCactvwai().getAcslnamf();
    }

    public void setOFFILLER25(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcslnaml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcslnaml(0);
        }
    }

    public String getAcslnamc() {
        return getCactvwai().getOFFILLER49().substring(0, 1);
    }

    public void setAcslnamc(String source) {
        getCactvwai().setOFFILLER49(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER49(), source, 0, 1));
    }

    public String getAcslnamp() {
        return getCactvwai().getOFFILLER49().substring(1, 2);
    }

    public void setAcslnamp(String source) {
        getCactvwai().setOFFILLER49(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER49(), source, 1, 2));
    }

    public String getAcslnamh() {
        return getCactvwai().getOFFILLER49().substring(2, 3);
    }

    public void setAcslnamh(String source) {
        getCactvwai().setOFFILLER49(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER49(), source, 2, 3));
    }

    public String getAcslnamv() {
        return getCactvwai().getOFFILLER49().substring(3);
    }

    public void setAcslnamv(String source) {
        getCactvwai().setOFFILLER49(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER49(), source, 3, 4));
    }

    public String getAcslnamo() {
        return getCactvwai().getAcslnami();
    }

    public void setAcslnamo(String source) {
        getCactvwai().setAcslnami(source);
    }

    public String getOFFILLER26() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsadl1l());
        tempByteBuffer1.flip();
        String temp26 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp26 + getCactvwai().getAcsadl1f();
    }

    public void setOFFILLER26(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsadl1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsadl1l(0);
        }
    }

    public String getAcsadl1c() {
        return getCactvwai().getOFFILLER51().substring(0, 1);
    }

    public void setAcsadl1c(String source) {
        getCactvwai().setOFFILLER51(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER51(), source, 0, 1));
    }

    public String getAcsadl1p() {
        return getCactvwai().getOFFILLER51().substring(1, 2);
    }

    public void setAcsadl1p(String source) {
        getCactvwai().setOFFILLER51(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER51(), source, 1, 2));
    }

    public String getAcsadl1h() {
        return getCactvwai().getOFFILLER51().substring(2, 3);
    }

    public void setAcsadl1h(String source) {
        getCactvwai().setOFFILLER51(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER51(), source, 2, 3));
    }

    public String getAcsadl1v() {
        return getCactvwai().getOFFILLER51().substring(3);
    }

    public void setAcsadl1v(String source) {
        getCactvwai().setOFFILLER51(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER51(), source, 3, 4));
    }

    public String getAcsadl1o() {
        return getCactvwai().getAcsadl1i();
    }

    public void setAcsadl1o(String source) {
        getCactvwai().setAcsadl1i(source);
    }

    public String getOFFILLER27() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcssttel());
        tempByteBuffer1.flip();
        String temp27 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp27 + getCactvwai().getAcssttef();
    }

    public void setOFFILLER27(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcssttel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcssttel(0);
        }
    }

    public String getAcssttec() {
        return getCactvwai().getOFFILLER53().substring(0, 1);
    }

    public void setAcssttec(String source) {
        getCactvwai().setOFFILLER53(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER53(), source, 0, 1));
    }

    public String getAcssttep() {
        return getCactvwai().getOFFILLER53().substring(1, 2);
    }

    public void setAcssttep(String source) {
        getCactvwai().setOFFILLER53(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER53(), source, 1, 2));
    }

    public String getAcsstteh() {
        return getCactvwai().getOFFILLER53().substring(2, 3);
    }

    public void setAcsstteh(String source) {
        getCactvwai().setOFFILLER53(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER53(), source, 2, 3));
    }

    public String getAcssttev() {
        return getCactvwai().getOFFILLER53().substring(3);
    }

    public void setAcssttev(String source) {
        getCactvwai().setOFFILLER53(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER53(), source, 3, 4));
    }

    public String getAcsstteo() {
        return getCactvwai().getAcssttei();
    }

    public void setAcsstteo(String source) {
        getCactvwai().setAcssttei(source);
    }

    public String getOFFILLER28() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsadl2l());
        tempByteBuffer1.flip();
        String temp28 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp28 + getCactvwai().getAcsadl2f();
    }

    public void setOFFILLER28(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsadl2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsadl2l(0);
        }
    }

    public String getAcsadl2c() {
        return getCactvwai().getOFFILLER55().substring(0, 1);
    }

    public void setAcsadl2c(String source) {
        getCactvwai().setOFFILLER55(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER55(), source, 0, 1));
    }

    public String getAcsadl2p() {
        return getCactvwai().getOFFILLER55().substring(1, 2);
    }

    public void setAcsadl2p(String source) {
        getCactvwai().setOFFILLER55(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER55(), source, 1, 2));
    }

    public String getAcsadl2h() {
        return getCactvwai().getOFFILLER55().substring(2, 3);
    }

    public void setAcsadl2h(String source) {
        getCactvwai().setOFFILLER55(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER55(), source, 2, 3));
    }

    public String getAcsadl2v() {
        return getCactvwai().getOFFILLER55().substring(3);
    }

    public void setAcsadl2v(String source) {
        getCactvwai().setOFFILLER55(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER55(), source, 3, 4));
    }

    public String getAcsadl2o() {
        return getCactvwai().getAcsadl2i();
    }

    public void setAcsadl2o(String source) {
        getCactvwai().setAcsadl2i(source);
    }

    public String getOFFILLER29() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcszipcl());
        tempByteBuffer1.flip();
        String temp29 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp29 + getCactvwai().getAcszipcf();
    }

    public void setOFFILLER29(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcszipcl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcszipcl(0);
        }
    }

    public String getAcszipcc() {
        return getCactvwai().getOFFILLER57().substring(0, 1);
    }

    public void setAcszipcc(String source) {
        getCactvwai().setOFFILLER57(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER57(), source, 0, 1));
    }

    public String getAcszipcp() {
        return getCactvwai().getOFFILLER57().substring(1, 2);
    }

    public void setAcszipcp(String source) {
        getCactvwai().setOFFILLER57(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER57(), source, 1, 2));
    }

    public String getAcszipch() {
        return getCactvwai().getOFFILLER57().substring(2, 3);
    }

    public void setAcszipch(String source) {
        getCactvwai().setOFFILLER57(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER57(), source, 2, 3));
    }

    public String getAcszipcv() {
        return getCactvwai().getOFFILLER57().substring(3);
    }

    public void setAcszipcv(String source) {
        getCactvwai().setOFFILLER57(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER57(), source, 3, 4));
    }

    public String getAcszipco() {
        return getCactvwai().getAcszipci();
    }

    public void setAcszipco(String source) {
        getCactvwai().setAcszipci(source);
    }

    public String getOFFILLER30() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcscityl());
        tempByteBuffer1.flip();
        String temp30 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp30 + getCactvwai().getAcscityf();
    }

    public void setOFFILLER30(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcscityl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcscityl(0);
        }
    }

    public String getAcscityc() {
        return getCactvwai().getOFFILLER59().substring(0, 1);
    }

    public void setAcscityc(String source) {
        getCactvwai().setOFFILLER59(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER59(), source, 0, 1));
    }

    public String getAcscityp() {
        return getCactvwai().getOFFILLER59().substring(1, 2);
    }

    public void setAcscityp(String source) {
        getCactvwai().setOFFILLER59(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER59(), source, 1, 2));
    }

    public String getAcscityh() {
        return getCactvwai().getOFFILLER59().substring(2, 3);
    }

    public void setAcscityh(String source) {
        getCactvwai().setOFFILLER59(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER59(), source, 2, 3));
    }

    public String getAcscityv() {
        return getCactvwai().getOFFILLER59().substring(3);
    }

    public void setAcscityv(String source) {
        getCactvwai().setOFFILLER59(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER59(), source, 3, 4));
    }

    public String getAcscityo() {
        return getCactvwai().getAcscityi();
    }

    public void setAcscityo(String source) {
        getCactvwai().setAcscityi(source);
    }

    public String getOFFILLER31() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsctryl());
        tempByteBuffer1.flip();
        String temp31 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp31 + getCactvwai().getAcsctryf();
    }

    public void setOFFILLER31(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsctryl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsctryl(0);
        }
    }

    public String getAcsctryc() {
        return getCactvwai().getOFFILLER61().substring(0, 1);
    }

    public void setAcsctryc(String source) {
        getCactvwai().setOFFILLER61(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER61(), source, 0, 1));
    }

    public String getAcsctryp() {
        return getCactvwai().getOFFILLER61().substring(1, 2);
    }

    public void setAcsctryp(String source) {
        getCactvwai().setOFFILLER61(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER61(), source, 1, 2));
    }

    public String getAcsctryh() {
        return getCactvwai().getOFFILLER61().substring(2, 3);
    }

    public void setAcsctryh(String source) {
        getCactvwai().setOFFILLER61(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER61(), source, 2, 3));
    }

    public String getAcsctryv() {
        return getCactvwai().getOFFILLER61().substring(3);
    }

    public void setAcsctryv(String source) {
        getCactvwai().setOFFILLER61(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER61(), source, 3, 4));
    }

    public String getAcsctryo() {
        return getCactvwai().getAcsctryi();
    }

    public void setAcsctryo(String source) {
        getCactvwai().setAcsctryi(source);
    }

    public String getOFFILLER32() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsphn1l());
        tempByteBuffer1.flip();
        String temp32 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp32 + getCactvwai().getAcsphn1f();
    }

    public void setOFFILLER32(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsphn1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsphn1l(0);
        }
    }

    public String getAcsphn1c() {
        return getCactvwai().getOFFILLER63().substring(0, 1);
    }

    public void setAcsphn1c(String source) {
        getCactvwai().setOFFILLER63(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER63(), source, 0, 1));
    }

    public String getAcsphn1p() {
        return getCactvwai().getOFFILLER63().substring(1, 2);
    }

    public void setAcsphn1p(String source) {
        getCactvwai().setOFFILLER63(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER63(), source, 1, 2));
    }

    public String getAcsphn1h() {
        return getCactvwai().getOFFILLER63().substring(2, 3);
    }

    public void setAcsphn1h(String source) {
        getCactvwai().setOFFILLER63(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER63(), source, 2, 3));
    }

    public String getAcsphn1v() {
        return getCactvwai().getOFFILLER63().substring(3);
    }

    public void setAcsphn1v(String source) {
        getCactvwai().setOFFILLER63(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER63(), source, 3, 4));
    }

    public String getAcsphn1o() {
        return getCactvwai().getAcsphn1i();
    }

    public void setAcsphn1o(String source) {
        getCactvwai().setAcsphn1i(source);
    }

    public String getOFFILLER33() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsgovtl());
        tempByteBuffer1.flip();
        String temp33 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp33 + getCactvwai().getAcsgovtf();
    }

    public void setOFFILLER33(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsgovtl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsgovtl(0);
        }
    }

    public String getAcsgovtc() {
        return getCactvwai().getOFFILLER65().substring(0, 1);
    }

    public void setAcsgovtc(String source) {
        getCactvwai().setOFFILLER65(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER65(), source, 0, 1));
    }

    public String getAcsgovtp() {
        return getCactvwai().getOFFILLER65().substring(1, 2);
    }

    public void setAcsgovtp(String source) {
        getCactvwai().setOFFILLER65(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER65(), source, 1, 2));
    }

    public String getAcsgovth() {
        return getCactvwai().getOFFILLER65().substring(2, 3);
    }

    public void setAcsgovth(String source) {
        getCactvwai().setOFFILLER65(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER65(), source, 2, 3));
    }

    public String getAcsgovtv() {
        return getCactvwai().getOFFILLER65().substring(3);
    }

    public void setAcsgovtv(String source) {
        getCactvwai().setOFFILLER65(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER65(), source, 3, 4));
    }

    public String getAcsgovto() {
        return getCactvwai().getAcsgovti();
    }

    public void setAcsgovto(String source) {
        getCactvwai().setAcsgovti(source);
    }

    public String getOFFILLER34() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcsphn2l());
        tempByteBuffer1.flip();
        String temp34 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp34 + getCactvwai().getAcsphn2f();
    }

    public void setOFFILLER34(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcsphn2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcsphn2l(0);
        }
    }

    public String getAcsphn2c() {
        return getCactvwai().getOFFILLER67().substring(0, 1);
    }

    public void setAcsphn2c(String source) {
        getCactvwai().setOFFILLER67(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER67(), source, 0, 1));
    }

    public String getAcsphn2p() {
        return getCactvwai().getOFFILLER67().substring(1, 2);
    }

    public void setAcsphn2p(String source) {
        getCactvwai().setOFFILLER67(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER67(), source, 1, 2));
    }

    public String getAcsphn2h() {
        return getCactvwai().getOFFILLER67().substring(2, 3);
    }

    public void setAcsphn2h(String source) {
        getCactvwai().setOFFILLER67(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER67(), source, 2, 3));
    }

    public String getAcsphn2v() {
        return getCactvwai().getOFFILLER67().substring(3);
    }

    public void setAcsphn2v(String source) {
        getCactvwai().setOFFILLER67(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER67(), source, 3, 4));
    }

    public String getAcsphn2o() {
        return getCactvwai().getAcsphn2i();
    }

    public void setAcsphn2o(String source) {
        getCactvwai().setAcsphn2i(source);
    }

    public String getOFFILLER35() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcseftcl());
        tempByteBuffer1.flip();
        String temp35 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp35 + getCactvwai().getAcseftcf();
    }

    public void setOFFILLER35(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcseftcl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcseftcl(0);
        }
    }

    public String getAcseftcc() {
        return getCactvwai().getOFFILLER69().substring(0, 1);
    }

    public void setAcseftcc(String source) {
        getCactvwai().setOFFILLER69(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER69(), source, 0, 1));
    }

    public String getAcseftcp() {
        return getCactvwai().getOFFILLER69().substring(1, 2);
    }

    public void setAcseftcp(String source) {
        getCactvwai().setOFFILLER69(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER69(), source, 1, 2));
    }

    public String getAcseftch() {
        return getCactvwai().getOFFILLER69().substring(2, 3);
    }

    public void setAcseftch(String source) {
        getCactvwai().setOFFILLER69(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER69(), source, 2, 3));
    }

    public String getAcseftcv() {
        return getCactvwai().getOFFILLER69().substring(3);
    }

    public void setAcseftcv(String source) {
        getCactvwai().setOFFILLER69(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER69(), source, 3, 4));
    }

    public String getAcseftco() {
        return getCactvwai().getAcseftci();
    }

    public void setAcseftco(String source) {
        getCactvwai().setAcseftci(source);
    }

    public String getOFFILLER36() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getAcspflgl());
        tempByteBuffer1.flip();
        String temp36 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp36 + getCactvwai().getAcspflgf();
    }

    public void setOFFILLER36(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setAcspflgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setAcspflgl(0);
        }
    }

    public String getAcspflgc() {
        return getCactvwai().getOFFILLER71().substring(0, 1);
    }

    public void setAcspflgc(String source) {
        getCactvwai().setOFFILLER71(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER71(), source, 0, 1));
    }

    public String getAcspflgp() {
        return getCactvwai().getOFFILLER71().substring(1, 2);
    }

    public void setAcspflgp(String source) {
        getCactvwai().setOFFILLER71(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER71(), source, 1, 2));
    }

    public String getAcspflgh() {
        return getCactvwai().getOFFILLER71().substring(2, 3);
    }

    public void setAcspflgh(String source) {
        getCactvwai().setOFFILLER71(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER71(), source, 2, 3));
    }

    public String getAcspflgv() {
        return getCactvwai().getOFFILLER71().substring(3);
    }

    public void setAcspflgv(String source) {
        getCactvwai().setOFFILLER71(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER71(), source, 3, 4));
    }

    public String getAcspflgo() {
        return getCactvwai().getAcspflgi();
    }

    public void setAcspflgo(String source) {
        getCactvwai().setAcspflgi(source);
    }

    public String getOFFILLER37() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getInfomsgl());
        tempByteBuffer1.flip();
        String temp37 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp37 + getCactvwai().getInfomsgf();
    }

    public void setOFFILLER37(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setInfomsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setInfomsgl(0);
        }
    }

    public String getInfomsgc() {
        return getCactvwai().getOFFILLER73().substring(0, 1);
    }

    public void setInfomsgc(String source) {
        getCactvwai().setOFFILLER73(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER73(), source, 0, 1));
    }

    public String getInfomsgp() {
        return getCactvwai().getOFFILLER73().substring(1, 2);
    }

    public void setInfomsgp(String source) {
        getCactvwai().setOFFILLER73(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER73(), source, 1, 2));
    }

    public String getInfomsgh() {
        return getCactvwai().getOFFILLER73().substring(2, 3);
    }

    public void setInfomsgh(String source) {
        getCactvwai().setOFFILLER73(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER73(), source, 2, 3));
    }

    public String getInfomsgv() {
        return getCactvwai().getOFFILLER73().substring(3);
    }

    public void setInfomsgv(String source) {
        getCactvwai().setOFFILLER73(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER73(), source, 3, 4));
    }

    public String getInfomsgo() {
        return getCactvwai().getInfomsgi();
    }

    public void setInfomsgo(String source) {
        getCactvwai().setInfomsgi(source);
    }

    public String getOFFILLER38() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCactvwai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp38 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp38 + getCactvwai().getErrmsgf();
    }

    public void setOFFILLER38(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCactvwai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCactvwai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCactvwai().getOFFILLER75().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCactvwai().setOFFILLER75(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER75(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCactvwai().getOFFILLER75().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCactvwai().setOFFILLER75(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER75(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCactvwai().getOFFILLER75().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCactvwai().setOFFILLER75(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER75(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCactvwai().getOFFILLER75().substring(3);
    }

    public void setErrmsgv(String source) {
        getCactvwai().setOFFILLER75(
                StringUtils
                        .overlay(getCactvwai().getOFFILLER75(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCactvwai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCactvwai().setErrmsgi(source);
    }

    // *Current Date                                                     
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter CoactvwcWsDateTime wsDateTime = new CoactvwcWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Common Messages                                                  
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter CoactvwcCcdaCommonMessages ccdaCommonMessages = new CoactvwcCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Abend Variables                                                  
    //       *COPY CSMSG02Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG02Y.cpy)
    // ***************************************************************** 
    // * CABENDD.CPY                                                   * 
    // *---------------------------------------------------------------* 
    // * Work areas for abend routine                                  * 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG02Y.cpy, LINE #22] ABEND-DATA (level: 1)
    private @Getter @Setter CoactvwcAbendData abendData = new CoactvwcAbendData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Signed on user data                                              
    //       *COPY CSUSR01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSUSR01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSUSR01Y.cpy, LINE #18] SEC-USER-DATA (level: 1)
    private @Getter @Setter CoactvwcSecUserData secUserData = new CoactvwcSecUserData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    // *ACCOUNT RECORD LAYOUT                                            
    //       *COPY CVACT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for  account entity (RECLN 300)               
    // ***************************************************************** 
    // [T-Up#INFO][CVACT01Y.cpy, LINE #5] ACCOUNT-RECORD (level: 1)
    private @Getter @Setter CoactvwcAccountRecord accountRecord = new CoactvwcAccountRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    // *CUSTOMER RECORD LAYOUT                                           
    //       *COPY CVACT02Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT02Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for card entity (RECLN 150)                   
    // ***************************************************************** 
    // [T-Up#INFO][CVACT02Y.cpy, LINE #5] CARD-RECORD (level: 1)
    private @Getter @Setter CoactvwcCardRecord cardRecord = new CoactvwcCardRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // *CARD XREF LAYOUT                                                 
    //       *COPY CVACT03Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT03Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for card xref (RECLN 50)                      
    // ***************************************************************** 
    // [T-Up#INFO][CVACT03Y.cpy, LINE #5] CARD-XREF-RECORD (level: 1)
    private @Getter @Setter CoactvwcCardXrefRecord cardXrefRecord = new CoactvwcCardXrefRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // *CUSTOMER LAYOUT                                                  
    //       *COPY CVCUS01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCUS01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for Customer entity (RECLN 500)               
    // ***************************************************************** 
    // [T-Up#INFO][CVCUS01Y.cpy, LINE #5] CUSTOMER-RECORD (level: 1)
    private @Getter @Setter CoactvwcCustomerRecord customerRecord = new CoactvwcCustomerRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // [T-Up#INFO][COACTVWC.cbl, LINE #256] DFHCOMMAREA (level: 1)
    private @Getter @Setter CoactvwcDfhcommarea dfhcommarea = new CoactvwcDfhcommarea();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CoactvwcCactvwao {
        // [T-Up#INFO][COACTVW.CPY, LINE #243] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COACTVW.CPY, LINE #244] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #245] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #246] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #247] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #248] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #249] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COACTVW.CPY, LINE #250] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #251] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #252] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #253] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #254] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #255] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COACTVW.CPY, LINE #256] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #257] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #258] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #259] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #260] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #261] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COACTVW.CPY, LINE #262] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #263] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #264] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #265] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #266] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #267] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COACTVW.CPY, LINE #268] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #269] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #270] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #271] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #272] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #273] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COACTVW.CPY, LINE #274] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #275] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #276] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #277] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #278] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #279] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COACTVW.CPY, LINE #280] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #281] ACCTSIDC (level: 2)
        private @Getter String acctsidc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #282] ACCTSIDP (level: 2)
        private @Getter String acctsidp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #283] ACCTSIDH (level: 2)
        private @Getter String acctsidh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #284] ACCTSIDV (level: 2)
        private @Getter String acctsidv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #285] ACCTSIDO (level: 2)
        private @Getter String acctsido = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COACTVW.CPY, LINE #286] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #287] ACSTTUSC (level: 2)
        private @Getter String acsttusc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #288] ACSTTUSP (level: 2)
        private @Getter String acsttusp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #289] ACSTTUSH (level: 2)
        private @Getter String acsttush = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #290] ACSTTUSV (level: 2)
        private @Getter String acsttusv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #291] ACSTTUSO (level: 2)
        private @Getter String acsttuso = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #292] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #293] ADTOPENC (level: 2)
        private @Getter String adtopenc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #294] ADTOPENP (level: 2)
        private @Getter String adtopenp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #295] ADTOPENH (level: 2)
        private @Getter String adtopenh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #296] ADTOPENV (level: 2)
        private @Getter String adtopenv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #297] ADTOPENO (level: 2)
        private @Getter String adtopeno = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTVW.CPY, LINE #298] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #299] ACRDLIMC (level: 2)
        private @Getter String acrdlimc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #300] ACRDLIMP (level: 2)
        private @Getter String acrdlimp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #301] ACRDLIMH (level: 2)
        private @Getter String acrdlimh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #302] ACRDLIMV (level: 2)
        private @Getter String acrdlimv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #303] ACRDLIMO (level: 2)
        private @Getter String acrdlimo = acrdlimoFormat.apply(BigDecimal.ZERO);
        private final static Function<BigDecimal, String> acrdlimoFormat = (
                data) -> {
            DecimalFormat nf = new DecimalFormat();
            nf.setNegativePrefix("");
            nf.applyPattern("+###,###,###.00;-###,###,###.00");
            return StringUtils.leftPad(nf.format(data), 11, ' ');
        };
        // [T-Up#INFO][COACTVW.CPY, LINE #304] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #305] AEXPDTC (level: 2)
        private @Getter String aexpdtc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #306] AEXPDTP (level: 2)
        private @Getter String aexpdtp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #307] AEXPDTH (level: 2)
        private @Getter String aexpdth = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #308] AEXPDTV (level: 2)
        private @Getter String aexpdtv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #309] AEXPDTO (level: 2)
        private @Getter String aexpdto = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTVW.CPY, LINE #310] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #311] ACSHLIMC (level: 2)
        private @Getter String acshlimc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #312] ACSHLIMP (level: 2)
        private @Getter String acshlimp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #313] ACSHLIMH (level: 2)
        private @Getter String acshlimh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #314] ACSHLIMV (level: 2)
        private @Getter String acshlimv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #315] ACSHLIMO (level: 2)
        private @Getter String acshlimo = acshlimoFormat.apply(BigDecimal.ZERO);
        private final static Function<BigDecimal, String> acshlimoFormat = (
                data) -> {
            DecimalFormat nf = new DecimalFormat();
            nf.setNegativePrefix("");
            nf.applyPattern("+###,###,###.00;-###,###,###.00");
            return StringUtils.leftPad(nf.format(data), 11, ' ');
        };
        // [T-Up#INFO][COACTVW.CPY, LINE #316] FILLER (level: 2)
        private @Getter String OFFILLER14 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #317] AREISDTC (level: 2)
        private @Getter String areisdtc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #318] AREISDTP (level: 2)
        private @Getter String areisdtp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #319] AREISDTH (level: 2)
        private @Getter String areisdth = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #320] AREISDTV (level: 2)
        private @Getter String areisdtv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #321] AREISDTO (level: 2)
        private @Getter String areisdto = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTVW.CPY, LINE #322] FILLER (level: 2)
        private @Getter String OFFILLER15 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #323] ACURBALC (level: 2)
        private @Getter String acurbalc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #324] ACURBALP (level: 2)
        private @Getter String acurbalp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #325] ACURBALH (level: 2)
        private @Getter String acurbalh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #326] ACURBALV (level: 2)
        private @Getter String acurbalv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #327] ACURBALO (level: 2)
        private @Getter String acurbalo = acurbaloFormat.apply(BigDecimal.ZERO);
        private final static Function<BigDecimal, String> acurbaloFormat = (
                data) -> {
            DecimalFormat nf = new DecimalFormat();
            nf.setNegativePrefix("");
            nf.applyPattern("+###,###,###.00;-###,###,###.00");
            return StringUtils.leftPad(nf.format(data), 11, ' ');
        };
        // [T-Up#INFO][COACTVW.CPY, LINE #328] FILLER (level: 2)
        private @Getter String OFFILLER16 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #329] ACRCYCRC (level: 2)
        private @Getter String acrcycrc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #330] ACRCYCRP (level: 2)
        private @Getter String acrcycrp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #331] ACRCYCRH (level: 2)
        private @Getter String acrcycrh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #332] ACRCYCRV (level: 2)
        private @Getter String acrcycrv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #333] ACRCYCRO (level: 2)
        private @Getter String acrcycro = acrcycroFormat.apply(BigDecimal.ZERO);
        private final static Function<BigDecimal, String> acrcycroFormat = (
                data) -> {
            DecimalFormat nf = new DecimalFormat();
            nf.setNegativePrefix("");
            nf.applyPattern("+###,###,###.00;-###,###,###.00");
            return StringUtils.leftPad(nf.format(data), 11, ' ');
        };
        // [T-Up#INFO][COACTVW.CPY, LINE #334] FILLER (level: 2)
        private @Getter String OFFILLER17 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #335] AADDGRPC (level: 2)
        private @Getter String aaddgrpc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #336] AADDGRPP (level: 2)
        private @Getter String aaddgrpp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #337] AADDGRPH (level: 2)
        private @Getter String aaddgrph = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #338] AADDGRPV (level: 2)
        private @Getter String aaddgrpv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #339] AADDGRPO (level: 2)
        private @Getter String aaddgrpo = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTVW.CPY, LINE #340] FILLER (level: 2)
        private @Getter String OFFILLER18 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #341] ACRCYDBC (level: 2)
        private @Getter String acrcydbc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #342] ACRCYDBP (level: 2)
        private @Getter String acrcydbp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #343] ACRCYDBH (level: 2)
        private @Getter String acrcydbh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #344] ACRCYDBV (level: 2)
        private @Getter String acrcydbv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #345] ACRCYDBO (level: 2)
        private @Getter String acrcydbo = acrcydboFormat.apply(BigDecimal.ZERO);
        private final static Function<BigDecimal, String> acrcydboFormat = (
                data) -> {
            DecimalFormat nf = new DecimalFormat();
            nf.setNegativePrefix("");
            nf.applyPattern("+###,###,###.00;-###,###,###.00");
            return StringUtils.leftPad(nf.format(data), 11, ' ');
        };
        // [T-Up#INFO][COACTVW.CPY, LINE #346] FILLER (level: 2)
        private @Getter String OFFILLER19 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #347] ACSTNUMC (level: 2)
        private @Getter String acstnumc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #348] ACSTNUMP (level: 2)
        private @Getter String acstnump = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #349] ACSTNUMH (level: 2)
        private @Getter String acstnumh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #350] ACSTNUMV (level: 2)
        private @Getter String acstnumv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #351] ACSTNUMO (level: 2)
        private @Getter String acstnumo = StringUtils.repeat(' ', 9);
        // [T-Up#INFO][COACTVW.CPY, LINE #352] FILLER (level: 2)
        private @Getter String OFFILLER20 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #353] ACSTSSNC (level: 2)
        private @Getter String acstssnc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #354] ACSTSSNP (level: 2)
        private @Getter String acstssnp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #355] ACSTSSNH (level: 2)
        private @Getter String acstssnh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #356] ACSTSSNV (level: 2)
        private @Getter String acstssnv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #357] ACSTSSNO (level: 2)
        private @Getter String acstssno = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COACTVW.CPY, LINE #358] FILLER (level: 2)
        private @Getter String OFFILLER21 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #359] ACSTDOBC (level: 2)
        private @Getter String acstdobc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #360] ACSTDOBP (level: 2)
        private @Getter String acstdobp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #361] ACSTDOBH (level: 2)
        private @Getter String acstdobh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #362] ACSTDOBV (level: 2)
        private @Getter String acstdobv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #363] ACSTDOBO (level: 2)
        private @Getter String acstdobo = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTVW.CPY, LINE #364] FILLER (level: 2)
        private @Getter String OFFILLER22 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #365] ACSTFCOC (level: 2)
        private @Getter String acstfcoc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #366] ACSTFCOP (level: 2)
        private @Getter String acstfcop = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #367] ACSTFCOH (level: 2)
        private @Getter String acstfcoh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #368] ACSTFCOV (level: 2)
        private @Getter String acstfcov = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #369] ACSTFCOO (level: 2)
        private @Getter String acstfcoo = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #370] FILLER (level: 2)
        private @Getter String OFFILLER23 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #371] ACSFNAMC (level: 2)
        private @Getter String acsfnamc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #372] ACSFNAMP (level: 2)
        private @Getter String acsfnamp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #373] ACSFNAMH (level: 2)
        private @Getter String acsfnamh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #374] ACSFNAMV (level: 2)
        private @Getter String acsfnamv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #375] ACSFNAMO (level: 2)
        private @Getter String acsfnamo = StringUtils.repeat(' ', 25);
        // [T-Up#INFO][COACTVW.CPY, LINE #376] FILLER (level: 2)
        private @Getter String OFFILLER24 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #377] ACSMNAMC (level: 2)
        private @Getter String acsmnamc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #378] ACSMNAMP (level: 2)
        private @Getter String acsmnamp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #379] ACSMNAMH (level: 2)
        private @Getter String acsmnamh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #380] ACSMNAMV (level: 2)
        private @Getter String acsmnamv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #381] ACSMNAMO (level: 2)
        private @Getter String acsmnamo = StringUtils.repeat(' ', 25);
        // [T-Up#INFO][COACTVW.CPY, LINE #382] FILLER (level: 2)
        private @Getter String OFFILLER25 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #383] ACSLNAMC (level: 2)
        private @Getter String acslnamc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #384] ACSLNAMP (level: 2)
        private @Getter String acslnamp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #385] ACSLNAMH (level: 2)
        private @Getter String acslnamh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #386] ACSLNAMV (level: 2)
        private @Getter String acslnamv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #387] ACSLNAMO (level: 2)
        private @Getter String acslnamo = StringUtils.repeat(' ', 25);
        // [T-Up#INFO][COACTVW.CPY, LINE #388] FILLER (level: 2)
        private @Getter String OFFILLER26 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #389] ACSADL1C (level: 2)
        private @Getter String acsadl1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #390] ACSADL1P (level: 2)
        private @Getter String acsadl1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #391] ACSADL1H (level: 2)
        private @Getter String acsadl1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #392] ACSADL1V (level: 2)
        private @Getter String acsadl1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #393] ACSADL1O (level: 2)
        private @Getter String acsadl1o = StringUtils.repeat(' ', 50);
        // [T-Up#INFO][COACTVW.CPY, LINE #394] FILLER (level: 2)
        private @Getter String OFFILLER27 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #395] ACSSTTEC (level: 2)
        private @Getter String acssttec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #396] ACSSTTEP (level: 2)
        private @Getter String acssttep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #397] ACSSTTEH (level: 2)
        private @Getter String acsstteh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #398] ACSSTTEV (level: 2)
        private @Getter String acssttev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #399] ACSSTTEO (level: 2)
        private @Getter String acsstteo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COACTVW.CPY, LINE #400] FILLER (level: 2)
        private @Getter String OFFILLER28 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #401] ACSADL2C (level: 2)
        private @Getter String acsadl2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #402] ACSADL2P (level: 2)
        private @Getter String acsadl2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #403] ACSADL2H (level: 2)
        private @Getter String acsadl2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #404] ACSADL2V (level: 2)
        private @Getter String acsadl2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #405] ACSADL2O (level: 2)
        private @Getter String acsadl2o = StringUtils.repeat(' ', 50);
        // [T-Up#INFO][COACTVW.CPY, LINE #406] FILLER (level: 2)
        private @Getter String OFFILLER29 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #407] ACSZIPCC (level: 2)
        private @Getter String acszipcc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #408] ACSZIPCP (level: 2)
        private @Getter String acszipcp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #409] ACSZIPCH (level: 2)
        private @Getter String acszipch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #410] ACSZIPCV (level: 2)
        private @Getter String acszipcv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #411] ACSZIPCO (level: 2)
        private @Getter String acszipco = StringUtils.repeat(' ', 5);
        // [T-Up#INFO][COACTVW.CPY, LINE #412] FILLER (level: 2)
        private @Getter String OFFILLER30 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #413] ACSCITYC (level: 2)
        private @Getter String acscityc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #414] ACSCITYP (level: 2)
        private @Getter String acscityp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #415] ACSCITYH (level: 2)
        private @Getter String acscityh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #416] ACSCITYV (level: 2)
        private @Getter String acscityv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #417] ACSCITYO (level: 2)
        private @Getter String acscityo = StringUtils.repeat(' ', 50);
        // [T-Up#INFO][COACTVW.CPY, LINE #418] FILLER (level: 2)
        private @Getter String OFFILLER31 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #419] ACSCTRYC (level: 2)
        private @Getter String acsctryc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #420] ACSCTRYP (level: 2)
        private @Getter String acsctryp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #421] ACSCTRYH (level: 2)
        private @Getter String acsctryh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #422] ACSCTRYV (level: 2)
        private @Getter String acsctryv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #423] ACSCTRYO (level: 2)
        private @Getter String acsctryo = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #424] FILLER (level: 2)
        private @Getter String OFFILLER32 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #425] ACSPHN1C (level: 2)
        private @Getter String acsphn1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #426] ACSPHN1P (level: 2)
        private @Getter String acsphn1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #427] ACSPHN1H (level: 2)
        private @Getter String acsphn1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #428] ACSPHN1V (level: 2)
        private @Getter String acsphn1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #429] ACSPHN1O (level: 2)
        private @Getter String acsphn1o = StringUtils.repeat(' ', 13);
        // [T-Up#INFO][COACTVW.CPY, LINE #430] FILLER (level: 2)
        private @Getter String OFFILLER33 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #431] ACSGOVTC (level: 2)
        private @Getter String acsgovtc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #432] ACSGOVTP (level: 2)
        private @Getter String acsgovtp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #433] ACSGOVTH (level: 2)
        private @Getter String acsgovth = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #434] ACSGOVTV (level: 2)
        private @Getter String acsgovtv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #435] ACSGOVTO (level: 2)
        private @Getter String acsgovto = StringUtils.repeat(' ', 20);
        // [T-Up#INFO][COACTVW.CPY, LINE #436] FILLER (level: 2)
        private @Getter String OFFILLER34 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #437] ACSPHN2C (level: 2)
        private @Getter String acsphn2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #438] ACSPHN2P (level: 2)
        private @Getter String acsphn2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #439] ACSPHN2H (level: 2)
        private @Getter String acsphn2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #440] ACSPHN2V (level: 2)
        private @Getter String acsphn2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #441] ACSPHN2O (level: 2)
        private @Getter String acsphn2o = StringUtils.repeat(' ', 13);
        // [T-Up#INFO][COACTVW.CPY, LINE #442] FILLER (level: 2)
        private @Getter String OFFILLER35 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #443] ACSEFTCC (level: 2)
        private @Getter String acseftcc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #444] ACSEFTCP (level: 2)
        private @Getter String acseftcp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #445] ACSEFTCH (level: 2)
        private @Getter String acseftch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #446] ACSEFTCV (level: 2)
        private @Getter String acseftcv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #447] ACSEFTCO (level: 2)
        private @Getter String acseftco = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COACTVW.CPY, LINE #448] FILLER (level: 2)
        private @Getter String OFFILLER36 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #449] ACSPFLGC (level: 2)
        private @Getter String acspflgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #450] ACSPFLGP (level: 2)
        private @Getter String acspflgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #451] ACSPFLGH (level: 2)
        private @Getter String acspflgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #452] ACSPFLGV (level: 2)
        private @Getter String acspflgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #453] ACSPFLGO (level: 2)
        private @Getter String acspflgo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #454] FILLER (level: 2)
        private @Getter String OFFILLER37 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #455] INFOMSGC (level: 2)
        private @Getter String infomsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #456] INFOMSGP (level: 2)
        private @Getter String infomsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #457] INFOMSGH (level: 2)
        private @Getter String infomsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #458] INFOMSGV (level: 2)
        private @Getter String infomsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #459] INFOMSGO (level: 2)
        private @Getter String infomsgo = StringUtils.repeat(' ', 45);
        // [T-Up#INFO][COACTVW.CPY, LINE #460] FILLER (level: 2)
        private @Getter String OFFILLER38 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COACTVW.CPY, LINE #461] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #462] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #463] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #464] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COACTVW.CPY, LINE #465] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER9);
            sb.append(acsttusc);
            sb.append(acsttusp);
            sb.append(acsttush);
            sb.append(acsttusv);
            sb.append(acsttuso);
            sb.append(OFFILLER10);
            sb.append(adtopenc);
            sb.append(adtopenp);
            sb.append(adtopenh);
            sb.append(adtopenv);
            sb.append(adtopeno);
            sb.append(OFFILLER11);
            sb.append(acrdlimc);
            sb.append(acrdlimp);
            sb.append(acrdlimh);
            sb.append(acrdlimv);
            sb.append(acrdlimo);
            sb.append(OFFILLER12);
            sb.append(aexpdtc);
            sb.append(aexpdtp);
            sb.append(aexpdth);
            sb.append(aexpdtv);
            sb.append(aexpdto);
            sb.append(OFFILLER13);
            sb.append(acshlimc);
            sb.append(acshlimp);
            sb.append(acshlimh);
            sb.append(acshlimv);
            sb.append(acshlimo);
            sb.append(OFFILLER14);
            sb.append(areisdtc);
            sb.append(areisdtp);
            sb.append(areisdth);
            sb.append(areisdtv);
            sb.append(areisdto);
            sb.append(OFFILLER15);
            sb.append(acurbalc);
            sb.append(acurbalp);
            sb.append(acurbalh);
            sb.append(acurbalv);
            sb.append(acurbalo);
            sb.append(OFFILLER16);
            sb.append(acrcycrc);
            sb.append(acrcycrp);
            sb.append(acrcycrh);
            sb.append(acrcycrv);
            sb.append(acrcycro);
            sb.append(OFFILLER17);
            sb.append(aaddgrpc);
            sb.append(aaddgrpp);
            sb.append(aaddgrph);
            sb.append(aaddgrpv);
            sb.append(aaddgrpo);
            sb.append(OFFILLER18);
            sb.append(acrcydbc);
            sb.append(acrcydbp);
            sb.append(acrcydbh);
            sb.append(acrcydbv);
            sb.append(acrcydbo);
            sb.append(OFFILLER19);
            sb.append(acstnumc);
            sb.append(acstnump);
            sb.append(acstnumh);
            sb.append(acstnumv);
            sb.append(acstnumo);
            sb.append(OFFILLER20);
            sb.append(acstssnc);
            sb.append(acstssnp);
            sb.append(acstssnh);
            sb.append(acstssnv);
            sb.append(acstssno);
            sb.append(OFFILLER21);
            sb.append(acstdobc);
            sb.append(acstdobp);
            sb.append(acstdobh);
            sb.append(acstdobv);
            sb.append(acstdobo);
            sb.append(OFFILLER22);
            sb.append(acstfcoc);
            sb.append(acstfcop);
            sb.append(acstfcoh);
            sb.append(acstfcov);
            sb.append(acstfcoo);
            sb.append(OFFILLER23);
            sb.append(acsfnamc);
            sb.append(acsfnamp);
            sb.append(acsfnamh);
            sb.append(acsfnamv);
            sb.append(acsfnamo);
            sb.append(OFFILLER24);
            sb.append(acsmnamc);
            sb.append(acsmnamp);
            sb.append(acsmnamh);
            sb.append(acsmnamv);
            sb.append(acsmnamo);
            sb.append(OFFILLER25);
            sb.append(acslnamc);
            sb.append(acslnamp);
            sb.append(acslnamh);
            sb.append(acslnamv);
            sb.append(acslnamo);
            sb.append(OFFILLER26);
            sb.append(acsadl1c);
            sb.append(acsadl1p);
            sb.append(acsadl1h);
            sb.append(acsadl1v);
            sb.append(acsadl1o);
            sb.append(OFFILLER27);
            sb.append(acssttec);
            sb.append(acssttep);
            sb.append(acsstteh);
            sb.append(acssttev);
            sb.append(acsstteo);
            sb.append(OFFILLER28);
            sb.append(acsadl2c);
            sb.append(acsadl2p);
            sb.append(acsadl2h);
            sb.append(acsadl2v);
            sb.append(acsadl2o);
            sb.append(OFFILLER29);
            sb.append(acszipcc);
            sb.append(acszipcp);
            sb.append(acszipch);
            sb.append(acszipcv);
            sb.append(acszipco);
            sb.append(OFFILLER30);
            sb.append(acscityc);
            sb.append(acscityp);
            sb.append(acscityh);
            sb.append(acscityv);
            sb.append(acscityo);
            sb.append(OFFILLER31);
            sb.append(acsctryc);
            sb.append(acsctryp);
            sb.append(acsctryh);
            sb.append(acsctryv);
            sb.append(acsctryo);
            sb.append(OFFILLER32);
            sb.append(acsphn1c);
            sb.append(acsphn1p);
            sb.append(acsphn1h);
            sb.append(acsphn1v);
            sb.append(acsphn1o);
            sb.append(OFFILLER33);
            sb.append(acsgovtc);
            sb.append(acsgovtp);
            sb.append(acsgovth);
            sb.append(acsgovtv);
            sb.append(acsgovto);
            sb.append(OFFILLER34);
            sb.append(acsphn2c);
            sb.append(acsphn2p);
            sb.append(acsphn2h);
            sb.append(acsphn2v);
            sb.append(acsphn2o);
            sb.append(OFFILLER35);
            sb.append(acseftcc);
            sb.append(acseftcp);
            sb.append(acseftch);
            sb.append(acseftcv);
            sb.append(acseftco);
            sb.append(OFFILLER36);
            sb.append(acspflgc);
            sb.append(acspflgp);
            sb.append(acspflgh);
            sb.append(acspflgv);
            sb.append(acspflgo);
            sb.append(OFFILLER37);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER38);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER9);
            sb.append(acsttusc);
            sb.append(acsttusp);
            sb.append(acsttush);
            sb.append(acsttusv);
            sb.append(acsttuso);
            sb.append(OFFILLER10);
            sb.append(adtopenc);
            sb.append(adtopenp);
            sb.append(adtopenh);
            sb.append(adtopenv);
            sb.append(adtopeno);
            sb.append(OFFILLER11);
            sb.append(acrdlimc);
            sb.append(acrdlimp);
            sb.append(acrdlimh);
            sb.append(acrdlimv);
            sb.append(acrdlimo);
            sb.append(OFFILLER12);
            sb.append(aexpdtc);
            sb.append(aexpdtp);
            sb.append(aexpdth);
            sb.append(aexpdtv);
            sb.append(aexpdto);
            sb.append(OFFILLER13);
            sb.append(acshlimc);
            sb.append(acshlimp);
            sb.append(acshlimh);
            sb.append(acshlimv);
            sb.append(acshlimo);
            sb.append(OFFILLER14);
            sb.append(areisdtc);
            sb.append(areisdtp);
            sb.append(areisdth);
            sb.append(areisdtv);
            sb.append(areisdto);
            sb.append(OFFILLER15);
            sb.append(acurbalc);
            sb.append(acurbalp);
            sb.append(acurbalh);
            sb.append(acurbalv);
            sb.append(acurbalo);
            sb.append(OFFILLER16);
            sb.append(acrcycrc);
            sb.append(acrcycrp);
            sb.append(acrcycrh);
            sb.append(acrcycrv);
            sb.append(acrcycro);
            sb.append(OFFILLER17);
            sb.append(aaddgrpc);
            sb.append(aaddgrpp);
            sb.append(aaddgrph);
            sb.append(aaddgrpv);
            sb.append(aaddgrpo);
            sb.append(OFFILLER18);
            sb.append(acrcydbc);
            sb.append(acrcydbp);
            sb.append(acrcydbh);
            sb.append(acrcydbv);
            sb.append(acrcydbo);
            sb.append(OFFILLER19);
            sb.append(acstnumc);
            sb.append(acstnump);
            sb.append(acstnumh);
            sb.append(acstnumv);
            sb.append(acstnumo);
            sb.append(OFFILLER20);
            sb.append(acstssnc);
            sb.append(acstssnp);
            sb.append(acstssnh);
            sb.append(acstssnv);
            sb.append(acstssno);
            sb.append(OFFILLER21);
            sb.append(acstdobc);
            sb.append(acstdobp);
            sb.append(acstdobh);
            sb.append(acstdobv);
            sb.append(acstdobo);
            sb.append(OFFILLER22);
            sb.append(acstfcoc);
            sb.append(acstfcop);
            sb.append(acstfcoh);
            sb.append(acstfcov);
            sb.append(acstfcoo);
            sb.append(OFFILLER23);
            sb.append(acsfnamc);
            sb.append(acsfnamp);
            sb.append(acsfnamh);
            sb.append(acsfnamv);
            sb.append(acsfnamo);
            sb.append(OFFILLER24);
            sb.append(acsmnamc);
            sb.append(acsmnamp);
            sb.append(acsmnamh);
            sb.append(acsmnamv);
            sb.append(acsmnamo);
            sb.append(OFFILLER25);
            sb.append(acslnamc);
            sb.append(acslnamp);
            sb.append(acslnamh);
            sb.append(acslnamv);
            sb.append(acslnamo);
            sb.append(OFFILLER26);
            sb.append(acsadl1c);
            sb.append(acsadl1p);
            sb.append(acsadl1h);
            sb.append(acsadl1v);
            sb.append(acsadl1o);
            sb.append(OFFILLER27);
            sb.append(acssttec);
            sb.append(acssttep);
            sb.append(acsstteh);
            sb.append(acssttev);
            sb.append(acsstteo);
            sb.append(OFFILLER28);
            sb.append(acsadl2c);
            sb.append(acsadl2p);
            sb.append(acsadl2h);
            sb.append(acsadl2v);
            sb.append(acsadl2o);
            sb.append(OFFILLER29);
            sb.append(acszipcc);
            sb.append(acszipcp);
            sb.append(acszipch);
            sb.append(acszipcv);
            sb.append(acszipco);
            sb.append(OFFILLER30);
            sb.append(acscityc);
            sb.append(acscityp);
            sb.append(acscityh);
            sb.append(acscityv);
            sb.append(acscityo);
            sb.append(OFFILLER31);
            sb.append(acsctryc);
            sb.append(acsctryp);
            sb.append(acsctryh);
            sb.append(acsctryv);
            sb.append(acsctryo);
            sb.append(OFFILLER32);
            sb.append(acsphn1c);
            sb.append(acsphn1p);
            sb.append(acsphn1h);
            sb.append(acsphn1v);
            sb.append(acsphn1o);
            sb.append(OFFILLER33);
            sb.append(acsgovtc);
            sb.append(acsgovtp);
            sb.append(acsgovth);
            sb.append(acsgovtv);
            sb.append(acsgovto);
            sb.append(OFFILLER34);
            sb.append(acsphn2c);
            sb.append(acsphn2p);
            sb.append(acsphn2h);
            sb.append(acsphn2v);
            sb.append(acsphn2o);
            sb.append(OFFILLER35);
            sb.append(acseftcc);
            sb.append(acseftcp);
            sb.append(acseftch);
            sb.append(acseftcv);
            sb.append(acseftco);
            sb.append(OFFILLER36);
            sb.append(acspflgc);
            sb.append(acspflgp);
            sb.append(acspflgh);
            sb.append(acspflgv);
            sb.append(acspflgo);
            sb.append(OFFILLER37);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER38);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }
    }

    public void setWsCommarea(String source) {
        wsCommarea = StringUtils.truncate(StringUtils.rightPad(source, 2000),
                2000);
    }
}
