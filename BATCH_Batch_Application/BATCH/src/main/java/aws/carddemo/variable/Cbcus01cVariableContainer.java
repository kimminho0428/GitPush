package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:55 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class Cbcus01cVariableContainer {
    // ***************************************************************** 
    //       *COPY CVCUS01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCUS01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for Customer entity (RECLN 500)               
    // ***************************************************************** 
    // [T-Up#INFO][CVCUS01Y.cpy, LINE #5] CUSTOMER-RECORD (level: 1)
    private @Getter @Setter Cbcus01cCustomerRecord customerRecord = new Cbcus01cCustomerRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // [T-Up#INFO][CBCUS01C.cbl, LINE #46] CUSTFILE-STATUS (level: 1)
    private @Getter @Setter Cbcus01cCustfileStatus custfileStatus = new Cbcus01cCustfileStatus();
    // [T-Up#INFO][CBCUS01C.cbl, LINE #50] IO-STATUS (level: 1)
    private @Getter @Setter Cbcus01cIoStatus ioStatus = new Cbcus01cIoStatus();
    // [T-Up#INFO][CBCUS01C.cbl, LINE #53] TWO-BYTES-BINARY (level: 1)
    private @Getter @Setter int twoBytesBinary;

    public Cbcus01cTwoBytesAlpha getTwoBytesAlpha() {
        return Cbcus01cTwoBytesAlpha.builder().twoBytesLeft(getTwoBytesLeft())
                .twoBytesRight(getTwoBytesRight()).build();
    }

    public void setTwoBytesAlpha(String source) {
        setTwoBytesLeft(source.substring(0, 1));
        setTwoBytesRight(source.substring(1, 2));
    }

    public void setTwoBytesAlpha(Cbcus01cTwoBytesAlpha source) {
        setTwoBytesAlpha(source.toString());
    }

    public String getTwoBytesLeft() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getTwoBytesBinary());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1.substring(0, 1);
    }

    public void setTwoBytesLeft(String source) {
        ByteBuffer tempByteBuffer1;
        ByteBuffer tempByteBuffer2;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getTwoBytesBinary());
        tempByteBuffer1.flip();
        tempByteBuffer2 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer2.put(StringUtils.overlay(
                StandardCharsets.ISO_8859_1.decode(tempByteBuffer1).toString(),
                source, 0, 1).getBytes(StandardCharsets.ISO_8859_1));
        tempByteBuffer2.flip();
        setTwoBytesBinary(tempByteBuffer2.getShort());
    }

    public String getTwoBytesRight() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getTwoBytesBinary());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1.substring(1);
    }

    public void setTwoBytesRight(String source) {
        ByteBuffer tempByteBuffer1;
        ByteBuffer tempByteBuffer2;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getTwoBytesBinary());
        tempByteBuffer1.flip();
        tempByteBuffer2 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer2.put(StringUtils.overlay(
                StandardCharsets.ISO_8859_1.decode(tempByteBuffer1).toString(),
                source, 1, 2).getBytes(StandardCharsets.ISO_8859_1));
        tempByteBuffer2.flip();
        setTwoBytesBinary(tempByteBuffer2.getShort());
    }

    // [T-Up#INFO][CBCUS01C.cbl, LINE #57] IO-STATUS-04 (level: 1)
    private @Getter @Setter Cbcus01cIoStatus04 ioStatus04 = new Cbcus01cIoStatus04();
    // [T-Up#INFO][CBCUS01C.cbl, LINE #61] APPL-RESULT (level: 1)
    private @Getter @Setter int applResult;
    // [T-Up#INFO][CBCUS01C.cbl, LINE #62] APPL-AOK (level: 88)
    public static final int APPL_AOK = 0;
    // [T-Up#INFO][CBCUS01C.cbl, LINE #63] APPL-EOF (level: 88)
    public static final int APPL_EOF = 16;
    // [T-Up#INFO][CBCUS01C.cbl, LINE #65] END-OF-FILE (level: 1)
    private @Getter String endOfFile = "N";
    // [T-Up#INFO][CBCUS01C.cbl, LINE #66] ABCODE (level: 1)
    private @Getter @Setter int abcode;
    // [T-Up#INFO][CBCUS01C.cbl, LINE #67] TIMING (level: 1)
    private @Getter @Setter int timing;
    // [T-Up#INFO][CBCUS01C.cbl, LINE #38] FD-CUSTFILE-REC (level: 1)
    private @Getter @Setter Cbcus01cFdCustfileRec fdCustfileRec = new Cbcus01cFdCustfileRec();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class Cbcus01cTwoBytesAlpha {
        // [T-Up#INFO][CBCUS01C.cbl, LINE #55] TWO-BYTES-LEFT (level: 5)
        private @Getter String twoBytesLeft = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBCUS01C.cbl, LINE #56] TWO-BYTES-RIGHT (level: 5)
        private @Getter String twoBytesRight = StringUtils.repeat(' ', 1);

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(twoBytesLeft);
            sb.append(twoBytesRight);
            return sb.toString();
        }
    }

    public void setEndOfFile(String source) {
        endOfFile = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }
}
