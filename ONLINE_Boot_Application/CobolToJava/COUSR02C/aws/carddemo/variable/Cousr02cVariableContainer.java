package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:51 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class Cousr02cVariableContainer {
    // *----------------------------------------------------------------*
    // *                     WORKING STORAGE SECTION                     
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COUSR02C.cbl, LINE #35] WS-VARIABLES (level: 1)
    private @Getter @Setter Cousr02cWsVariables wsVariables = new Cousr02cWsVariables();
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter Cousr02cCarddemoCommarea carddemoCommarea = new Cousr02cCarddemoCommarea();
    //       *COPY COUSR02.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COUSR02.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COUSR02.CPY, LINE #18] COUSR2AI (level: 1)
    private @Getter @Setter Cousr02cCousr2ai cousr2ai = new Cousr02cCousr2ai();

    public Cousr02cCousr2ao getCousr2ao() {
        return Cousr02cCousr2ao.builder().OFFILLER1(getOFFILLER1())
                .OFFILLER2(getOFFILLER2()).trnnamec(getTrnnamec())
                .trnnamep(getTrnnamep()).trnnameh(getTrnnameh())
                .trnnamev(getTrnnamev()).trnnameo(getTrnnameo())
                .OFFILLER3(getOFFILLER3()).title01c(getTitle01c())
                .title01p(getTitle01p()).title01h(getTitle01h())
                .title01v(getTitle01v()).title01o(getTitle01o())
                .OFFILLER4(getOFFILLER4()).curdatec(getCurdatec())
                .curdatep(getCurdatep()).curdateh(getCurdateh())
                .curdatev(getCurdatev()).curdateo(getCurdateo())
                .OFFILLER5(getOFFILLER5()).pgmnamec(getPgmnamec())
                .pgmnamep(getPgmnamep()).pgmnameh(getPgmnameh())
                .pgmnamev(getPgmnamev()).pgmnameo(getPgmnameo())
                .OFFILLER6(getOFFILLER6()).title02c(getTitle02c())
                .title02p(getTitle02p()).title02h(getTitle02h())
                .title02v(getTitle02v()).title02o(getTitle02o())
                .OFFILLER7(getOFFILLER7()).curtimec(getCurtimec())
                .curtimep(getCurtimep()).curtimeh(getCurtimeh())
                .curtimev(getCurtimev()).curtimeo(getCurtimeo())
                .OFFILLER8(getOFFILLER8()).usridinc(getUsridinc())
                .usridinp(getUsridinp()).usridinh(getUsridinh())
                .usridinv(getUsridinv()).usridino(getUsridino())
                .OFFILLER9(getOFFILLER9()).fnamec(getFnamec())
                .fnamep(getFnamep()).fnameh(getFnameh()).fnamev(getFnamev())
                .fnameo(getFnameo()).OFFILLER10(getOFFILLER10())
                .lnamec(getLnamec()).lnamep(getLnamep()).lnameh(getLnameh())
                .lnamev(getLnamev()).lnameo(getLnameo())
                .OFFILLER11(getOFFILLER11()).passwdc(getPasswdc())
                .passwdp(getPasswdp()).passwdh(getPasswdh())
                .passwdv(getPasswdv()).passwdo(getPasswdo())
                .OFFILLER12(getOFFILLER12()).usrtypec(getUsrtypec())
                .usrtypep(getUsrtypep()).usrtypeh(getUsrtypeh())
                .usrtypev(getUsrtypev()).usrtypeo(getUsrtypeo())
                .OFFILLER13(getOFFILLER13()).errmsgc(getErrmsgc())
                .errmsgp(getErrmsgp()).errmsgh(getErrmsgh())
                .errmsgv(getErrmsgv()).errmsgo(getErrmsgo()).build();
    }

    public void setCousr2ao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setUsridinc(source.substring(165, 166));
        setUsridinp(source.substring(166, 167));
        setUsridinh(source.substring(167, 168));
        setUsridinv(source.substring(168, 169));
        setUsridino(source.substring(169, 177));
        setOFFILLER9(source.substring(177, 180));
        setFnamec(source.substring(180, 181));
        setFnamep(source.substring(181, 182));
        setFnameh(source.substring(182, 183));
        setFnamev(source.substring(183, 184));
        setFnameo(source.substring(184, 204));
        setOFFILLER10(source.substring(204, 207));
        setLnamec(source.substring(207, 208));
        setLnamep(source.substring(208, 209));
        setLnameh(source.substring(209, 210));
        setLnamev(source.substring(210, 211));
        setLnameo(source.substring(211, 231));
        setOFFILLER11(source.substring(231, 234));
        setPasswdc(source.substring(234, 235));
        setPasswdp(source.substring(235, 236));
        setPasswdh(source.substring(236, 237));
        setPasswdv(source.substring(237, 238));
        setPasswdo(source.substring(238, 246));
        setOFFILLER12(source.substring(246, 249));
        setUsrtypec(source.substring(249, 250));
        setUsrtypep(source.substring(250, 251));
        setUsrtypeh(source.substring(251, 252));
        setUsrtypev(source.substring(252, 253));
        setUsrtypeo(source.substring(253, 254));
        setOFFILLER13(source.substring(254, 257));
        setErrmsgc(source.substring(257, 258));
        setErrmsgp(source.substring(258, 259));
        setErrmsgh(source.substring(259, 260));
        setErrmsgv(source.substring(260, 261));
        setErrmsgo(source.substring(261, 339));
    }

    public void setCousr2ao(Cousr02cCousr2ao source) {
        setCousr2ao(source.toString());
    }

    public String getOFFILLER1() {
        return getCousr2ai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCousr2ai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCousr2ai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCousr2ai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCousr2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCousr2ai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCousr2ai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCousr2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCousr2ai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCousr2ai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCousr2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCousr2ai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCousr2ai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCousr2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCousr2ai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCousr2ai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCousr2ai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCousr2ai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCousr2ai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCousr2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCousr2ai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCousr2ai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCousr2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCousr2ai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCousr2ai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCousr2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCousr2ai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCousr2ai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCousr2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCousr2ai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCousr2ai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCousr2ai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCousr2ai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCousr2ai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCousr2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCousr2ai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCousr2ai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCousr2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCousr2ai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCousr2ai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCousr2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCousr2ai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCousr2ai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCousr2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCousr2ai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCousr2ai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCousr2ai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCousr2ai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCousr2ai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCousr2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCousr2ai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCousr2ai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCousr2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCousr2ai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCousr2ai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCousr2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCousr2ai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCousr2ai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCousr2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCousr2ai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCousr2ai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCousr2ai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCousr2ai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCousr2ai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCousr2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCousr2ai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCousr2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCousr2ai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCousr2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCousr2ai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCousr2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCousr2ai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCousr2ai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCousr2ai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCousr2ai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCousr2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCousr2ai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCousr2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCousr2ai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCousr2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCousr2ai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCousr2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCousr2ai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCousr2ai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getUsridinl());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCousr2ai().getUsridinf();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setUsridinl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setUsridinl(0);
        }
    }

    public String getUsridinc() {
        return getCousr2ai().getOFFILLER15().substring(0, 1);
    }

    public void setUsridinc(String source) {
        getCousr2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER15(), source, 0, 1));
    }

    public String getUsridinp() {
        return getCousr2ai().getOFFILLER15().substring(1, 2);
    }

    public void setUsridinp(String source) {
        getCousr2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER15(), source, 1, 2));
    }

    public String getUsridinh() {
        return getCousr2ai().getOFFILLER15().substring(2, 3);
    }

    public void setUsridinh(String source) {
        getCousr2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER15(), source, 2, 3));
    }

    public String getUsridinv() {
        return getCousr2ai().getOFFILLER15().substring(3);
    }

    public void setUsridinv(String source) {
        getCousr2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER15(), source, 3, 4));
    }

    public String getUsridino() {
        return getCousr2ai().getUsridini();
    }

    public void setUsridino(String source) {
        getCousr2ai().setUsridini(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getFnamel());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCousr2ai().getFnamef();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setFnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setFnamel(0);
        }
    }

    public String getFnamec() {
        return getCousr2ai().getOFFILLER17().substring(0, 1);
    }

    public void setFnamec(String source) {
        getCousr2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER17(), source, 0, 1));
    }

    public String getFnamep() {
        return getCousr2ai().getOFFILLER17().substring(1, 2);
    }

    public void setFnamep(String source) {
        getCousr2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER17(), source, 1, 2));
    }

    public String getFnameh() {
        return getCousr2ai().getOFFILLER17().substring(2, 3);
    }

    public void setFnameh(String source) {
        getCousr2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER17(), source, 2, 3));
    }

    public String getFnamev() {
        return getCousr2ai().getOFFILLER17().substring(3);
    }

    public void setFnamev(String source) {
        getCousr2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER17(), source, 3, 4));
    }

    public String getFnameo() {
        return getCousr2ai().getFnamei();
    }

    public void setFnameo(String source) {
        getCousr2ai().setFnamei(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getLnamel());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCousr2ai().getLnamef();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setLnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setLnamel(0);
        }
    }

    public String getLnamec() {
        return getCousr2ai().getOFFILLER19().substring(0, 1);
    }

    public void setLnamec(String source) {
        getCousr2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER19(), source, 0, 1));
    }

    public String getLnamep() {
        return getCousr2ai().getOFFILLER19().substring(1, 2);
    }

    public void setLnamep(String source) {
        getCousr2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER19(), source, 1, 2));
    }

    public String getLnameh() {
        return getCousr2ai().getOFFILLER19().substring(2, 3);
    }

    public void setLnameh(String source) {
        getCousr2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER19(), source, 2, 3));
    }

    public String getLnamev() {
        return getCousr2ai().getOFFILLER19().substring(3);
    }

    public void setLnamev(String source) {
        getCousr2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER19(), source, 3, 4));
    }

    public String getLnameo() {
        return getCousr2ai().getLnamei();
    }

    public void setLnameo(String source) {
        getCousr2ai().setLnamei(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getPasswdl());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCousr2ai().getPasswdf();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setPasswdl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setPasswdl(0);
        }
    }

    public String getPasswdc() {
        return getCousr2ai().getOFFILLER21().substring(0, 1);
    }

    public void setPasswdc(String source) {
        getCousr2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER21(), source, 0, 1));
    }

    public String getPasswdp() {
        return getCousr2ai().getOFFILLER21().substring(1, 2);
    }

    public void setPasswdp(String source) {
        getCousr2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER21(), source, 1, 2));
    }

    public String getPasswdh() {
        return getCousr2ai().getOFFILLER21().substring(2, 3);
    }

    public void setPasswdh(String source) {
        getCousr2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER21(), source, 2, 3));
    }

    public String getPasswdv() {
        return getCousr2ai().getOFFILLER21().substring(3);
    }

    public void setPasswdv(String source) {
        getCousr2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER21(), source, 3, 4));
    }

    public String getPasswdo() {
        return getCousr2ai().getPasswdi();
    }

    public void setPasswdo(String source) {
        getCousr2ai().setPasswdi(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getUsrtypel());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCousr2ai().getUsrtypef();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setUsrtypel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setUsrtypel(0);
        }
    }

    public String getUsrtypec() {
        return getCousr2ai().getOFFILLER23().substring(0, 1);
    }

    public void setUsrtypec(String source) {
        getCousr2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER23(), source, 0, 1));
    }

    public String getUsrtypep() {
        return getCousr2ai().getOFFILLER23().substring(1, 2);
    }

    public void setUsrtypep(String source) {
        getCousr2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER23(), source, 1, 2));
    }

    public String getUsrtypeh() {
        return getCousr2ai().getOFFILLER23().substring(2, 3);
    }

    public void setUsrtypeh(String source) {
        getCousr2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER23(), source, 2, 3));
    }

    public String getUsrtypev() {
        return getCousr2ai().getOFFILLER23().substring(3);
    }

    public void setUsrtypev(String source) {
        getCousr2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER23(), source, 3, 4));
    }

    public String getUsrtypeo() {
        return getCousr2ai().getUsrtypei();
    }

    public void setUsrtypeo(String source) {
        getCousr2ai().setUsrtypei(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCousr2ai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCousr2ai().getErrmsgf();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCousr2ai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCousr2ai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCousr2ai().getOFFILLER25().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCousr2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER25(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCousr2ai().getOFFILLER25().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCousr2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER25(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCousr2ai().getOFFILLER25().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCousr2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER25(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCousr2ai().getOFFILLER25().substring(3);
    }

    public void setErrmsgv(String source) {
        getCousr2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCousr2ai().getOFFILLER25(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCousr2ai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCousr2ai().setErrmsgi(source);
    }

    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter Cousr02cCcdaScreenTitle ccdaScreenTitle = new Cousr02cCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter Cousr02cWsDateTime wsDateTime = new Cousr02cWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter Cousr02cCcdaCommonMessages ccdaCommonMessages = new Cousr02cCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSUSR01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSUSR01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSUSR01Y.cpy, LINE #18] SEC-USER-DATA (level: 1)
    private @Getter @Setter Cousr02cSecUserData secUserData = new Cousr02cSecUserData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter Cousr02cDfhaid dfhaid = new Cousr02cDfhaid();
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter Cousr02cDfhbmsca dfhbmsca = new Cousr02cDfhbmsca();
    // *----------------------------------------------------------------*
    // *                        LINKAGE SECTION                          
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COUSR02C.cbl, LINE #74] DFHCOMMAREA (level: 1)
    private @Getter @Setter Cousr02cDfhcommarea dfhcommarea = new Cousr02cDfhcommarea();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class Cousr02cCousr2ao {
        // [T-Up#INFO][COUSR02.CPY, LINE #93] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COUSR02.CPY, LINE #94] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #95] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #96] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #97] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #98] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #99] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COUSR02.CPY, LINE #100] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #101] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #102] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #103] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #104] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #105] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COUSR02.CPY, LINE #106] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #107] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #108] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #109] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #110] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #111] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COUSR02.CPY, LINE #112] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #113] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #114] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #115] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #116] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #117] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COUSR02.CPY, LINE #118] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #119] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #120] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #121] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #122] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #123] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COUSR02.CPY, LINE #124] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #125] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #126] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #127] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #128] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #129] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COUSR02.CPY, LINE #130] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #131] USRIDINC (level: 2)
        private @Getter String usridinc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #132] USRIDINP (level: 2)
        private @Getter String usridinp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #133] USRIDINH (level: 2)
        private @Getter String usridinh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #134] USRIDINV (level: 2)
        private @Getter String usridinv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #135] USRIDINO (level: 2)
        private @Getter String usridino = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COUSR02.CPY, LINE #136] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #137] FNAMEC (level: 2)
        private @Getter String fnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #138] FNAMEP (level: 2)
        private @Getter String fnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #139] FNAMEH (level: 2)
        private @Getter String fnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #140] FNAMEV (level: 2)
        private @Getter String fnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #141] FNAMEO (level: 2)
        private @Getter String fnameo = StringUtils.repeat(' ', 20);
        // [T-Up#INFO][COUSR02.CPY, LINE #142] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #143] LNAMEC (level: 2)
        private @Getter String lnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #144] LNAMEP (level: 2)
        private @Getter String lnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #145] LNAMEH (level: 2)
        private @Getter String lnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #146] LNAMEV (level: 2)
        private @Getter String lnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #147] LNAMEO (level: 2)
        private @Getter String lnameo = StringUtils.repeat(' ', 20);
        // [T-Up#INFO][COUSR02.CPY, LINE #148] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #149] PASSWDC (level: 2)
        private @Getter String passwdc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #150] PASSWDP (level: 2)
        private @Getter String passwdp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #151] PASSWDH (level: 2)
        private @Getter String passwdh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #152] PASSWDV (level: 2)
        private @Getter String passwdv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #153] PASSWDO (level: 2)
        private @Getter String passwdo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COUSR02.CPY, LINE #154] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #155] USRTYPEC (level: 2)
        private @Getter String usrtypec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #156] USRTYPEP (level: 2)
        private @Getter String usrtypep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #157] USRTYPEH (level: 2)
        private @Getter String usrtypeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #158] USRTYPEV (level: 2)
        private @Getter String usrtypev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #159] USRTYPEO (level: 2)
        private @Getter String usrtypeo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #160] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COUSR02.CPY, LINE #161] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #162] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #163] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #164] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COUSR02.CPY, LINE #165] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(usridinc);
            sb.append(usridinp);
            sb.append(usridinh);
            sb.append(usridinv);
            sb.append(usridino);
            sb.append(OFFILLER9);
            sb.append(fnamec);
            sb.append(fnamep);
            sb.append(fnameh);
            sb.append(fnamev);
            sb.append(fnameo);
            sb.append(OFFILLER10);
            sb.append(lnamec);
            sb.append(lnamep);
            sb.append(lnameh);
            sb.append(lnamev);
            sb.append(lnameo);
            sb.append(OFFILLER11);
            sb.append(passwdc);
            sb.append(passwdp);
            sb.append(passwdh);
            sb.append(passwdv);
            sb.append(passwdo);
            sb.append(OFFILLER12);
            sb.append(usrtypec);
            sb.append(usrtypep);
            sb.append(usrtypeh);
            sb.append(usrtypev);
            sb.append(usrtypeo);
            sb.append(OFFILLER13);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(usridinc);
            sb.append(usridinp);
            sb.append(usridinh);
            sb.append(usridinv);
            sb.append(usridino);
            sb.append(OFFILLER9);
            sb.append(fnamec);
            sb.append(fnamep);
            sb.append(fnameh);
            sb.append(fnamev);
            sb.append(fnameo);
            sb.append(OFFILLER10);
            sb.append(lnamec);
            sb.append(lnamep);
            sb.append(lnameh);
            sb.append(lnamev);
            sb.append(lnameo);
            sb.append(OFFILLER11);
            sb.append(passwdc);
            sb.append(passwdp);
            sb.append(passwdh);
            sb.append(passwdv);
            sb.append(passwdo);
            sb.append(OFFILLER12);
            sb.append(usrtypec);
            sb.append(usrtypep);
            sb.append(usrtypeh);
            sb.append(usrtypev);
            sb.append(usrtypeo);
            sb.append(OFFILLER13);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }
    }
}
