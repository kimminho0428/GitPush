package aws.carddemo.variable.group;

import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:52 UTC</p>
 */
public @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CoactupcCactupai {
    // [T-Up#INFO][COACTUP.CPY, LINE #19] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER1 = StringUtils.repeat(' ',
            12);
    // [T-Up#INFO][COACTUP.CPY, LINE #20] TRNNAMEL (level: 2)
    private @Getter @Setter int trnnamel;
    // [T-Up#INFO][COACTUP.CPY, LINE #21] TRNNAMEF (level: 2)
    private @Getter @Builder.Default String trnnamef = StringUtils.repeat(' ',
            1);

    public _OFFILLER2 getOFFILLER2() {
        return _OFFILLER2.builder().trnnamea(getTrnnamea()).build();
    }

    public void setOFFILLER2(String source) {
        setTrnnamea(source.substring(0, 1));
    }

    public void setOFFILLER2(_OFFILLER2 source) {
        setOFFILLER2(source.toString());
    }

    public String getTrnnamea() {
        return getTrnnamef();
    }

    public void setTrnnamea(String source) {
        setTrnnamef(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #24] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER3 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #25] TRNNAMEI (level: 2)
    private @Getter @Builder.Default String trnnamei = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #26] TITLE01L (level: 2)
    private @Getter @Setter int title01l;
    // [T-Up#INFO][COACTUP.CPY, LINE #27] TITLE01F (level: 2)
    private @Getter @Builder.Default String title01f = StringUtils.repeat(' ',
            1);

    public _OFFILLER4 getOFFILLER4() {
        return _OFFILLER4.builder().title01a(getTitle01a()).build();
    }

    public void setOFFILLER4(String source) {
        setTitle01a(source.substring(0, 1));
    }

    public void setOFFILLER4(_OFFILLER4 source) {
        setOFFILLER4(source.toString());
    }

    public String getTitle01a() {
        return getTitle01f();
    }

    public void setTitle01a(String source) {
        setTitle01f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #30] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER5 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #31] TITLE01I (level: 2)
    private @Getter @Builder.Default String title01i = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COACTUP.CPY, LINE #32] CURDATEL (level: 2)
    private @Getter @Setter int curdatel;
    // [T-Up#INFO][COACTUP.CPY, LINE #33] CURDATEF (level: 2)
    private @Getter @Builder.Default String curdatef = StringUtils.repeat(' ',
            1);

    public _OFFILLER6 getOFFILLER6() {
        return _OFFILLER6.builder().curdatea(getCurdatea()).build();
    }

    public void setOFFILLER6(String source) {
        setCurdatea(source.substring(0, 1));
    }

    public void setOFFILLER6(_OFFILLER6 source) {
        setOFFILLER6(source.toString());
    }

    public String getCurdatea() {
        return getCurdatef();
    }

    public void setCurdatea(String source) {
        setCurdatef(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #36] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER7 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #37] CURDATEI (level: 2)
    private @Getter @Builder.Default String curdatei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COACTUP.CPY, LINE #38] PGMNAMEL (level: 2)
    private @Getter @Setter int pgmnamel;
    // [T-Up#INFO][COACTUP.CPY, LINE #39] PGMNAMEF (level: 2)
    private @Getter @Builder.Default String pgmnamef = StringUtils.repeat(' ',
            1);

    public _OFFILLER8 getOFFILLER8() {
        return _OFFILLER8.builder().pgmnamea(getPgmnamea()).build();
    }

    public void setOFFILLER8(String source) {
        setPgmnamea(source.substring(0, 1));
    }

    public void setOFFILLER8(_OFFILLER8 source) {
        setOFFILLER8(source.toString());
    }

    public String getPgmnamea() {
        return getPgmnamef();
    }

    public void setPgmnamea(String source) {
        setPgmnamef(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #42] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER9 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #43] PGMNAMEI (level: 2)
    private @Getter @Builder.Default String pgmnamei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COACTUP.CPY, LINE #44] TITLE02L (level: 2)
    private @Getter @Setter int title02l;
    // [T-Up#INFO][COACTUP.CPY, LINE #45] TITLE02F (level: 2)
    private @Getter @Builder.Default String title02f = StringUtils.repeat(' ',
            1);

    public _OFFILLER10 getOFFILLER10() {
        return _OFFILLER10.builder().title02a(getTitle02a()).build();
    }

    public void setOFFILLER10(String source) {
        setTitle02a(source.substring(0, 1));
    }

    public void setOFFILLER10(_OFFILLER10 source) {
        setOFFILLER10(source.toString());
    }

    public String getTitle02a() {
        return getTitle02f();
    }

    public void setTitle02a(String source) {
        setTitle02f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #48] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER11 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #49] TITLE02I (level: 2)
    private @Getter @Builder.Default String title02i = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COACTUP.CPY, LINE #50] CURTIMEL (level: 2)
    private @Getter @Setter int curtimel;
    // [T-Up#INFO][COACTUP.CPY, LINE #51] CURTIMEF (level: 2)
    private @Getter @Builder.Default String curtimef = StringUtils.repeat(' ',
            1);

    public _OFFILLER12 getOFFILLER12() {
        return _OFFILLER12.builder().curtimea(getCurtimea()).build();
    }

    public void setOFFILLER12(String source) {
        setCurtimea(source.substring(0, 1));
    }

    public void setOFFILLER12(_OFFILLER12 source) {
        setOFFILLER12(source.toString());
    }

    public String getCurtimea() {
        return getCurtimef();
    }

    public void setCurtimea(String source) {
        setCurtimef(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #54] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER13 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #55] CURTIMEI (level: 2)
    private @Getter @Builder.Default String curtimei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COACTUP.CPY, LINE #56] ACCTSIDL (level: 2)
    private @Getter @Setter int acctsidl;
    // [T-Up#INFO][COACTUP.CPY, LINE #57] ACCTSIDF (level: 2)
    private @Getter @Builder.Default String acctsidf = StringUtils.repeat(' ',
            1);

    public _OFFILLER14 getOFFILLER14() {
        return _OFFILLER14.builder().acctsida(getAcctsida()).build();
    }

    public void setOFFILLER14(String source) {
        setAcctsida(source.substring(0, 1));
    }

    public void setOFFILLER14(_OFFILLER14 source) {
        setOFFILLER14(source.toString());
    }

    public String getAcctsida() {
        return getAcctsidf();
    }

    public void setAcctsida(String source) {
        setAcctsidf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #60] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER15 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #61] ACCTSIDI (level: 2)
    private @Getter @Builder.Default String acctsidi = StringUtils.repeat(' ',
            11);
    // [T-Up#INFO][COACTUP.CPY, LINE #62] ACSTTUSL (level: 2)
    private @Getter @Setter int acsttusl;
    // [T-Up#INFO][COACTUP.CPY, LINE #63] ACSTTUSF (level: 2)
    private @Getter @Builder.Default String acsttusf = StringUtils.repeat(' ',
            1);

    public _OFFILLER16 getOFFILLER16() {
        return _OFFILLER16.builder().acsttusa(getAcsttusa()).build();
    }

    public void setOFFILLER16(String source) {
        setAcsttusa(source.substring(0, 1));
    }

    public void setOFFILLER16(_OFFILLER16 source) {
        setOFFILLER16(source.toString());
    }

    public String getAcsttusa() {
        return getAcsttusf();
    }

    public void setAcsttusa(String source) {
        setAcsttusf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #66] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER17 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #67] ACSTTUSI (level: 2)
    private @Getter @Builder.Default String acsttusi = StringUtils.repeat(' ',
            1);
    // [T-Up#INFO][COACTUP.CPY, LINE #68] OPNYEARL (level: 2)
    private @Getter @Setter int opnyearl;
    // [T-Up#INFO][COACTUP.CPY, LINE #69] OPNYEARF (level: 2)
    private @Getter @Builder.Default String opnyearf = StringUtils.repeat(' ',
            1);

    public _OFFILLER18 getOFFILLER18() {
        return _OFFILLER18.builder().opnyeara(getOpnyeara()).build();
    }

    public void setOFFILLER18(String source) {
        setOpnyeara(source.substring(0, 1));
    }

    public void setOFFILLER18(_OFFILLER18 source) {
        setOFFILLER18(source.toString());
    }

    public String getOpnyeara() {
        return getOpnyearf();
    }

    public void setOpnyeara(String source) {
        setOpnyearf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #72] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER19 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #73] OPNYEARI (level: 2)
    private @Getter @Builder.Default String opnyeari = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #74] OPNMONL (level: 2)
    private @Getter @Setter int opnmonl;
    // [T-Up#INFO][COACTUP.CPY, LINE #75] OPNMONF (level: 2)
    private @Getter @Builder.Default String opnmonf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER20 getOFFILLER20() {
        return _OFFILLER20.builder().opnmona(getOpnmona()).build();
    }

    public void setOFFILLER20(String source) {
        setOpnmona(source.substring(0, 1));
    }

    public void setOFFILLER20(_OFFILLER20 source) {
        setOFFILLER20(source.toString());
    }

    public String getOpnmona() {
        return getOpnmonf();
    }

    public void setOpnmona(String source) {
        setOpnmonf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #78] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER21 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #79] OPNMONI (level: 2)
    private @Getter @Builder.Default String opnmoni = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #80] OPNDAYL (level: 2)
    private @Getter @Setter int opndayl;
    // [T-Up#INFO][COACTUP.CPY, LINE #81] OPNDAYF (level: 2)
    private @Getter @Builder.Default String opndayf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER22 getOFFILLER22() {
        return _OFFILLER22.builder().opndaya(getOpndaya()).build();
    }

    public void setOFFILLER22(String source) {
        setOpndaya(source.substring(0, 1));
    }

    public void setOFFILLER22(_OFFILLER22 source) {
        setOFFILLER22(source.toString());
    }

    public String getOpndaya() {
        return getOpndayf();
    }

    public void setOpndaya(String source) {
        setOpndayf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #84] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER23 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #85] OPNDAYI (level: 2)
    private @Getter @Builder.Default String opndayi = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #86] ACRDLIML (level: 2)
    private @Getter @Setter int acrdliml;
    // [T-Up#INFO][COACTUP.CPY, LINE #87] ACRDLIMF (level: 2)
    private @Getter @Builder.Default String acrdlimf = StringUtils.repeat(' ',
            1);

    public _OFFILLER24 getOFFILLER24() {
        return _OFFILLER24.builder().acrdlima(getAcrdlima()).build();
    }

    public void setOFFILLER24(String source) {
        setAcrdlima(source.substring(0, 1));
    }

    public void setOFFILLER24(_OFFILLER24 source) {
        setOFFILLER24(source.toString());
    }

    public String getAcrdlima() {
        return getAcrdlimf();
    }

    public void setAcrdlima(String source) {
        setAcrdlimf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #90] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER25 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #91] ACRDLIMI (level: 2)
    private @Getter @Builder.Default String acrdlimi = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTUP.CPY, LINE #92] EXPYEARL (level: 2)
    private @Getter @Setter int expyearl;
    // [T-Up#INFO][COACTUP.CPY, LINE #93] EXPYEARF (level: 2)
    private @Getter @Builder.Default String expyearf = StringUtils.repeat(' ',
            1);

    public _OFFILLER26 getOFFILLER26() {
        return _OFFILLER26.builder().expyeara(getExpyeara()).build();
    }

    public void setOFFILLER26(String source) {
        setExpyeara(source.substring(0, 1));
    }

    public void setOFFILLER26(_OFFILLER26 source) {
        setOFFILLER26(source.toString());
    }

    public String getExpyeara() {
        return getExpyearf();
    }

    public void setExpyeara(String source) {
        setExpyearf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #96] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER27 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #97] EXPYEARI (level: 2)
    private @Getter @Builder.Default String expyeari = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #98] EXPMONL (level: 2)
    private @Getter @Setter int expmonl;
    // [T-Up#INFO][COACTUP.CPY, LINE #99] EXPMONF (level: 2)
    private @Getter @Builder.Default String expmonf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER28 getOFFILLER28() {
        return _OFFILLER28.builder().expmona(getExpmona()).build();
    }

    public void setOFFILLER28(String source) {
        setExpmona(source.substring(0, 1));
    }

    public void setOFFILLER28(_OFFILLER28 source) {
        setOFFILLER28(source.toString());
    }

    public String getExpmona() {
        return getExpmonf();
    }

    public void setExpmona(String source) {
        setExpmonf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #102] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER29 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #103] EXPMONI (level: 2)
    private @Getter @Builder.Default String expmoni = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #104] EXPDAYL (level: 2)
    private @Getter @Setter int expdayl;
    // [T-Up#INFO][COACTUP.CPY, LINE #105] EXPDAYF (level: 2)
    private @Getter @Builder.Default String expdayf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER30 getOFFILLER30() {
        return _OFFILLER30.builder().expdaya(getExpdaya()).build();
    }

    public void setOFFILLER30(String source) {
        setExpdaya(source.substring(0, 1));
    }

    public void setOFFILLER30(_OFFILLER30 source) {
        setOFFILLER30(source.toString());
    }

    public String getExpdaya() {
        return getExpdayf();
    }

    public void setExpdaya(String source) {
        setExpdayf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #108] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER31 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #109] EXPDAYI (level: 2)
    private @Getter @Builder.Default String expdayi = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #110] ACSHLIML (level: 2)
    private @Getter @Setter int acshliml;
    // [T-Up#INFO][COACTUP.CPY, LINE #111] ACSHLIMF (level: 2)
    private @Getter @Builder.Default String acshlimf = StringUtils.repeat(' ',
            1);

    public _OFFILLER32 getOFFILLER32() {
        return _OFFILLER32.builder().acshlima(getAcshlima()).build();
    }

    public void setOFFILLER32(String source) {
        setAcshlima(source.substring(0, 1));
    }

    public void setOFFILLER32(_OFFILLER32 source) {
        setOFFILLER32(source.toString());
    }

    public String getAcshlima() {
        return getAcshlimf();
    }

    public void setAcshlima(String source) {
        setAcshlimf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #114] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER33 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #115] ACSHLIMI (level: 2)
    private @Getter @Builder.Default String acshlimi = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTUP.CPY, LINE #116] RISYEARL (level: 2)
    private @Getter @Setter int risyearl;
    // [T-Up#INFO][COACTUP.CPY, LINE #117] RISYEARF (level: 2)
    private @Getter @Builder.Default String risyearf = StringUtils.repeat(' ',
            1);

    public _OFFILLER34 getOFFILLER34() {
        return _OFFILLER34.builder().risyeara(getRisyeara()).build();
    }

    public void setOFFILLER34(String source) {
        setRisyeara(source.substring(0, 1));
    }

    public void setOFFILLER34(_OFFILLER34 source) {
        setOFFILLER34(source.toString());
    }

    public String getRisyeara() {
        return getRisyearf();
    }

    public void setRisyeara(String source) {
        setRisyearf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #120] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER35 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #121] RISYEARI (level: 2)
    private @Getter @Builder.Default String risyeari = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #122] RISMONL (level: 2)
    private @Getter @Setter int rismonl;
    // [T-Up#INFO][COACTUP.CPY, LINE #123] RISMONF (level: 2)
    private @Getter @Builder.Default String rismonf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER36 getOFFILLER36() {
        return _OFFILLER36.builder().rismona(getRismona()).build();
    }

    public void setOFFILLER36(String source) {
        setRismona(source.substring(0, 1));
    }

    public void setOFFILLER36(_OFFILLER36 source) {
        setOFFILLER36(source.toString());
    }

    public String getRismona() {
        return getRismonf();
    }

    public void setRismona(String source) {
        setRismonf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #126] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER37 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #127] RISMONI (level: 2)
    private @Getter @Builder.Default String rismoni = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #128] RISDAYL (level: 2)
    private @Getter @Setter int risdayl;
    // [T-Up#INFO][COACTUP.CPY, LINE #129] RISDAYF (level: 2)
    private @Getter @Builder.Default String risdayf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER38 getOFFILLER38() {
        return _OFFILLER38.builder().risdaya(getRisdaya()).build();
    }

    public void setOFFILLER38(String source) {
        setRisdaya(source.substring(0, 1));
    }

    public void setOFFILLER38(_OFFILLER38 source) {
        setOFFILLER38(source.toString());
    }

    public String getRisdaya() {
        return getRisdayf();
    }

    public void setRisdaya(String source) {
        setRisdayf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #132] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER39 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #133] RISDAYI (level: 2)
    private @Getter @Builder.Default String risdayi = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #134] ACURBALL (level: 2)
    private @Getter @Setter int acurball;
    // [T-Up#INFO][COACTUP.CPY, LINE #135] ACURBALF (level: 2)
    private @Getter @Builder.Default String acurbalf = StringUtils.repeat(' ',
            1);

    public _OFFILLER40 getOFFILLER40() {
        return _OFFILLER40.builder().acurbala(getAcurbala()).build();
    }

    public void setOFFILLER40(String source) {
        setAcurbala(source.substring(0, 1));
    }

    public void setOFFILLER40(_OFFILLER40 source) {
        setOFFILLER40(source.toString());
    }

    public String getAcurbala() {
        return getAcurbalf();
    }

    public void setAcurbala(String source) {
        setAcurbalf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #138] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER41 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #139] ACURBALI (level: 2)
    private @Getter @Builder.Default String acurbali = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTUP.CPY, LINE #140] ACRCYCRL (level: 2)
    private @Getter @Setter int acrcycrl;
    // [T-Up#INFO][COACTUP.CPY, LINE #141] ACRCYCRF (level: 2)
    private @Getter @Builder.Default String acrcycrf = StringUtils.repeat(' ',
            1);

    public _OFFILLER42 getOFFILLER42() {
        return _OFFILLER42.builder().acrcycra(getAcrcycra()).build();
    }

    public void setOFFILLER42(String source) {
        setAcrcycra(source.substring(0, 1));
    }

    public void setOFFILLER42(_OFFILLER42 source) {
        setOFFILLER42(source.toString());
    }

    public String getAcrcycra() {
        return getAcrcycrf();
    }

    public void setAcrcycra(String source) {
        setAcrcycrf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #144] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER43 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #145] ACRCYCRI (level: 2)
    private @Getter @Builder.Default String acrcycri = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTUP.CPY, LINE #146] AADDGRPL (level: 2)
    private @Getter @Setter int aaddgrpl;
    // [T-Up#INFO][COACTUP.CPY, LINE #147] AADDGRPF (level: 2)
    private @Getter @Builder.Default String aaddgrpf = StringUtils.repeat(' ',
            1);

    public _OFFILLER44 getOFFILLER44() {
        return _OFFILLER44.builder().aaddgrpa(getAaddgrpa()).build();
    }

    public void setOFFILLER44(String source) {
        setAaddgrpa(source.substring(0, 1));
    }

    public void setOFFILLER44(_OFFILLER44 source) {
        setOFFILLER44(source.toString());
    }

    public String getAaddgrpa() {
        return getAaddgrpf();
    }

    public void setAaddgrpa(String source) {
        setAaddgrpf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #150] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER45 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #151] AADDGRPI (level: 2)
    private @Getter @Builder.Default String aaddgrpi = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTUP.CPY, LINE #152] ACRCYDBL (level: 2)
    private @Getter @Setter int acrcydbl;
    // [T-Up#INFO][COACTUP.CPY, LINE #153] ACRCYDBF (level: 2)
    private @Getter @Builder.Default String acrcydbf = StringUtils.repeat(' ',
            1);

    public _OFFILLER46 getOFFILLER46() {
        return _OFFILLER46.builder().acrcydba(getAcrcydba()).build();
    }

    public void setOFFILLER46(String source) {
        setAcrcydba(source.substring(0, 1));
    }

    public void setOFFILLER46(_OFFILLER46 source) {
        setOFFILLER46(source.toString());
    }

    public String getAcrcydba() {
        return getAcrcydbf();
    }

    public void setAcrcydba(String source) {
        setAcrcydbf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #156] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER47 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #157] ACRCYDBI (level: 2)
    private @Getter @Builder.Default String acrcydbi = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTUP.CPY, LINE #158] ACSTNUML (level: 2)
    private @Getter @Setter int acstnuml;
    // [T-Up#INFO][COACTUP.CPY, LINE #159] ACSTNUMF (level: 2)
    private @Getter @Builder.Default String acstnumf = StringUtils.repeat(' ',
            1);

    public _OFFILLER48 getOFFILLER48() {
        return _OFFILLER48.builder().acstnuma(getAcstnuma()).build();
    }

    public void setOFFILLER48(String source) {
        setAcstnuma(source.substring(0, 1));
    }

    public void setOFFILLER48(_OFFILLER48 source) {
        setOFFILLER48(source.toString());
    }

    public String getAcstnuma() {
        return getAcstnumf();
    }

    public void setAcstnuma(String source) {
        setAcstnumf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #162] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER49 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #163] ACSTNUMI (level: 2)
    private @Getter @Builder.Default String acstnumi = StringUtils.repeat(' ',
            9);
    // [T-Up#INFO][COACTUP.CPY, LINE #164] ACTSSN1L (level: 2)
    private @Getter @Setter int actssn1l;
    // [T-Up#INFO][COACTUP.CPY, LINE #165] ACTSSN1F (level: 2)
    private @Getter @Builder.Default String actssn1f = StringUtils.repeat(' ',
            1);

    public _OFFILLER50 getOFFILLER50() {
        return _OFFILLER50.builder().actssn1a(getActssn1a()).build();
    }

    public void setOFFILLER50(String source) {
        setActssn1a(source.substring(0, 1));
    }

    public void setOFFILLER50(_OFFILLER50 source) {
        setOFFILLER50(source.toString());
    }

    public String getActssn1a() {
        return getActssn1f();
    }

    public void setActssn1a(String source) {
        setActssn1f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #168] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER51 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #169] ACTSSN1I (level: 2)
    private @Getter @Builder.Default String actssn1i = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTUP.CPY, LINE #170] ACTSSN2L (level: 2)
    private @Getter @Setter int actssn2l;
    // [T-Up#INFO][COACTUP.CPY, LINE #171] ACTSSN2F (level: 2)
    private @Getter @Builder.Default String actssn2f = StringUtils.repeat(' ',
            1);

    public _OFFILLER52 getOFFILLER52() {
        return _OFFILLER52.builder().actssn2a(getActssn2a()).build();
    }

    public void setOFFILLER52(String source) {
        setActssn2a(source.substring(0, 1));
    }

    public void setOFFILLER52(_OFFILLER52 source) {
        setOFFILLER52(source.toString());
    }

    public String getActssn2a() {
        return getActssn2f();
    }

    public void setActssn2a(String source) {
        setActssn2f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #174] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER53 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #175] ACTSSN2I (level: 2)
    private @Getter @Builder.Default String actssn2i = StringUtils.repeat(' ',
            2);
    // [T-Up#INFO][COACTUP.CPY, LINE #176] ACTSSN3L (level: 2)
    private @Getter @Setter int actssn3l;
    // [T-Up#INFO][COACTUP.CPY, LINE #177] ACTSSN3F (level: 2)
    private @Getter @Builder.Default String actssn3f = StringUtils.repeat(' ',
            1);

    public _OFFILLER54 getOFFILLER54() {
        return _OFFILLER54.builder().actssn3a(getActssn3a()).build();
    }

    public void setOFFILLER54(String source) {
        setActssn3a(source.substring(0, 1));
    }

    public void setOFFILLER54(_OFFILLER54 source) {
        setOFFILLER54(source.toString());
    }

    public String getActssn3a() {
        return getActssn3f();
    }

    public void setActssn3a(String source) {
        setActssn3f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #180] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER55 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #181] ACTSSN3I (level: 2)
    private @Getter @Builder.Default String actssn3i = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #182] DOBYEARL (level: 2)
    private @Getter @Setter int dobyearl;
    // [T-Up#INFO][COACTUP.CPY, LINE #183] DOBYEARF (level: 2)
    private @Getter @Builder.Default String dobyearf = StringUtils.repeat(' ',
            1);

    public _OFFILLER56 getOFFILLER56() {
        return _OFFILLER56.builder().dobyeara(getDobyeara()).build();
    }

    public void setOFFILLER56(String source) {
        setDobyeara(source.substring(0, 1));
    }

    public void setOFFILLER56(_OFFILLER56 source) {
        setOFFILLER56(source.toString());
    }

    public String getDobyeara() {
        return getDobyearf();
    }

    public void setDobyeara(String source) {
        setDobyearf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #186] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER57 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #187] DOBYEARI (level: 2)
    private @Getter @Builder.Default String dobyeari = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #188] DOBMONL (level: 2)
    private @Getter @Setter int dobmonl;
    // [T-Up#INFO][COACTUP.CPY, LINE #189] DOBMONF (level: 2)
    private @Getter @Builder.Default String dobmonf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER58 getOFFILLER58() {
        return _OFFILLER58.builder().dobmona(getDobmona()).build();
    }

    public void setOFFILLER58(String source) {
        setDobmona(source.substring(0, 1));
    }

    public void setOFFILLER58(_OFFILLER58 source) {
        setOFFILLER58(source.toString());
    }

    public String getDobmona() {
        return getDobmonf();
    }

    public void setDobmona(String source) {
        setDobmonf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #192] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER59 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #193] DOBMONI (level: 2)
    private @Getter @Builder.Default String dobmoni = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #194] DOBDAYL (level: 2)
    private @Getter @Setter int dobdayl;
    // [T-Up#INFO][COACTUP.CPY, LINE #195] DOBDAYF (level: 2)
    private @Getter @Builder.Default String dobdayf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER60 getOFFILLER60() {
        return _OFFILLER60.builder().dobdaya(getDobdaya()).build();
    }

    public void setOFFILLER60(String source) {
        setDobdaya(source.substring(0, 1));
    }

    public void setOFFILLER60(_OFFILLER60 source) {
        setOFFILLER60(source.toString());
    }

    public String getDobdaya() {
        return getDobdayf();
    }

    public void setDobdaya(String source) {
        setDobdayf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #198] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER61 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #199] DOBDAYI (level: 2)
    private @Getter @Builder.Default String dobdayi = StringUtils
            .repeat(' ', 2);
    // [T-Up#INFO][COACTUP.CPY, LINE #200] ACSTFCOL (level: 2)
    private @Getter @Setter int acstfcol;
    // [T-Up#INFO][COACTUP.CPY, LINE #201] ACSTFCOF (level: 2)
    private @Getter @Builder.Default String acstfcof = StringUtils.repeat(' ',
            1);

    public _OFFILLER62 getOFFILLER62() {
        return _OFFILLER62.builder().acstfcoa(getAcstfcoa()).build();
    }

    public void setOFFILLER62(String source) {
        setAcstfcoa(source.substring(0, 1));
    }

    public void setOFFILLER62(_OFFILLER62 source) {
        setOFFILLER62(source.toString());
    }

    public String getAcstfcoa() {
        return getAcstfcof();
    }

    public void setAcstfcoa(String source) {
        setAcstfcof(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #204] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER63 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #205] ACSTFCOI (level: 2)
    private @Getter @Builder.Default String acstfcoi = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTUP.CPY, LINE #206] ACSFNAML (level: 2)
    private @Getter @Setter int acsfnaml;
    // [T-Up#INFO][COACTUP.CPY, LINE #207] ACSFNAMF (level: 2)
    private @Getter @Builder.Default String acsfnamf = StringUtils.repeat(' ',
            1);

    public _OFFILLER64 getOFFILLER64() {
        return _OFFILLER64.builder().acsfnama(getAcsfnama()).build();
    }

    public void setOFFILLER64(String source) {
        setAcsfnama(source.substring(0, 1));
    }

    public void setOFFILLER64(_OFFILLER64 source) {
        setOFFILLER64(source.toString());
    }

    public String getAcsfnama() {
        return getAcsfnamf();
    }

    public void setAcsfnama(String source) {
        setAcsfnamf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #210] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER65 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #211] ACSFNAMI (level: 2)
    private @Getter @Builder.Default String acsfnami = StringUtils.repeat(' ',
            25);
    // [T-Up#INFO][COACTUP.CPY, LINE #212] ACSMNAML (level: 2)
    private @Getter @Setter int acsmnaml;
    // [T-Up#INFO][COACTUP.CPY, LINE #213] ACSMNAMF (level: 2)
    private @Getter @Builder.Default String acsmnamf = StringUtils.repeat(' ',
            1);

    public _OFFILLER66 getOFFILLER66() {
        return _OFFILLER66.builder().acsmnama(getAcsmnama()).build();
    }

    public void setOFFILLER66(String source) {
        setAcsmnama(source.substring(0, 1));
    }

    public void setOFFILLER66(_OFFILLER66 source) {
        setOFFILLER66(source.toString());
    }

    public String getAcsmnama() {
        return getAcsmnamf();
    }

    public void setAcsmnama(String source) {
        setAcsmnamf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #216] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER67 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #217] ACSMNAMI (level: 2)
    private @Getter @Builder.Default String acsmnami = StringUtils.repeat(' ',
            25);
    // [T-Up#INFO][COACTUP.CPY, LINE #218] ACSLNAML (level: 2)
    private @Getter @Setter int acslnaml;
    // [T-Up#INFO][COACTUP.CPY, LINE #219] ACSLNAMF (level: 2)
    private @Getter @Builder.Default String acslnamf = StringUtils.repeat(' ',
            1);

    public _OFFILLER68 getOFFILLER68() {
        return _OFFILLER68.builder().acslnama(getAcslnama()).build();
    }

    public void setOFFILLER68(String source) {
        setAcslnama(source.substring(0, 1));
    }

    public void setOFFILLER68(_OFFILLER68 source) {
        setOFFILLER68(source.toString());
    }

    public String getAcslnama() {
        return getAcslnamf();
    }

    public void setAcslnama(String source) {
        setAcslnamf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #222] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER69 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #223] ACSLNAMI (level: 2)
    private @Getter @Builder.Default String acslnami = StringUtils.repeat(' ',
            25);
    // [T-Up#INFO][COACTUP.CPY, LINE #224] ACSADL1L (level: 2)
    private @Getter @Setter int acsadl1l;
    // [T-Up#INFO][COACTUP.CPY, LINE #225] ACSADL1F (level: 2)
    private @Getter @Builder.Default String acsadl1f = StringUtils.repeat(' ',
            1);

    public _OFFILLER70 getOFFILLER70() {
        return _OFFILLER70.builder().acsadl1a(getAcsadl1a()).build();
    }

    public void setOFFILLER70(String source) {
        setAcsadl1a(source.substring(0, 1));
    }

    public void setOFFILLER70(_OFFILLER70 source) {
        setOFFILLER70(source.toString());
    }

    public String getAcsadl1a() {
        return getAcsadl1f();
    }

    public void setAcsadl1a(String source) {
        setAcsadl1f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #228] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER71 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #229] ACSADL1I (level: 2)
    private @Getter @Builder.Default String acsadl1i = StringUtils.repeat(' ',
            50);
    // [T-Up#INFO][COACTUP.CPY, LINE #230] ACSSTTEL (level: 2)
    private @Getter @Setter int acssttel;
    // [T-Up#INFO][COACTUP.CPY, LINE #231] ACSSTTEF (level: 2)
    private @Getter @Builder.Default String acssttef = StringUtils.repeat(' ',
            1);

    public _OFFILLER72 getOFFILLER72() {
        return _OFFILLER72.builder().acssttea(getAcssttea()).build();
    }

    public void setOFFILLER72(String source) {
        setAcssttea(source.substring(0, 1));
    }

    public void setOFFILLER72(_OFFILLER72 source) {
        setOFFILLER72(source.toString());
    }

    public String getAcssttea() {
        return getAcssttef();
    }

    public void setAcssttea(String source) {
        setAcssttef(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #234] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER73 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #235] ACSSTTEI (level: 2)
    private @Getter @Builder.Default String acssttei = StringUtils.repeat(' ',
            2);
    // [T-Up#INFO][COACTUP.CPY, LINE #236] ACSADL2L (level: 2)
    private @Getter @Setter int acsadl2l;
    // [T-Up#INFO][COACTUP.CPY, LINE #237] ACSADL2F (level: 2)
    private @Getter @Builder.Default String acsadl2f = StringUtils.repeat(' ',
            1);

    public _OFFILLER74 getOFFILLER74() {
        return _OFFILLER74.builder().acsadl2a(getAcsadl2a()).build();
    }

    public void setOFFILLER74(String source) {
        setAcsadl2a(source.substring(0, 1));
    }

    public void setOFFILLER74(_OFFILLER74 source) {
        setOFFILLER74(source.toString());
    }

    public String getAcsadl2a() {
        return getAcsadl2f();
    }

    public void setAcsadl2a(String source) {
        setAcsadl2f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #240] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER75 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #241] ACSADL2I (level: 2)
    private @Getter @Builder.Default String acsadl2i = StringUtils.repeat(' ',
            50);
    // [T-Up#INFO][COACTUP.CPY, LINE #242] ACSZIPCL (level: 2)
    private @Getter @Setter int acszipcl;
    // [T-Up#INFO][COACTUP.CPY, LINE #243] ACSZIPCF (level: 2)
    private @Getter @Builder.Default String acszipcf = StringUtils.repeat(' ',
            1);

    public _OFFILLER76 getOFFILLER76() {
        return _OFFILLER76.builder().acszipca(getAcszipca()).build();
    }

    public void setOFFILLER76(String source) {
        setAcszipca(source.substring(0, 1));
    }

    public void setOFFILLER76(_OFFILLER76 source) {
        setOFFILLER76(source.toString());
    }

    public String getAcszipca() {
        return getAcszipcf();
    }

    public void setAcszipca(String source) {
        setAcszipcf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #246] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER77 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #247] ACSZIPCI (level: 2)
    private @Getter @Builder.Default String acszipci = StringUtils.repeat(' ',
            5);
    // [T-Up#INFO][COACTUP.CPY, LINE #248] ACSCITYL (level: 2)
    private @Getter @Setter int acscityl;
    // [T-Up#INFO][COACTUP.CPY, LINE #249] ACSCITYF (level: 2)
    private @Getter @Builder.Default String acscityf = StringUtils.repeat(' ',
            1);

    public _OFFILLER78 getOFFILLER78() {
        return _OFFILLER78.builder().acscitya(getAcscitya()).build();
    }

    public void setOFFILLER78(String source) {
        setAcscitya(source.substring(0, 1));
    }

    public void setOFFILLER78(_OFFILLER78 source) {
        setOFFILLER78(source.toString());
    }

    public String getAcscitya() {
        return getAcscityf();
    }

    public void setAcscitya(String source) {
        setAcscityf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #252] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER79 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #253] ACSCITYI (level: 2)
    private @Getter @Builder.Default String acscityi = StringUtils.repeat(' ',
            50);
    // [T-Up#INFO][COACTUP.CPY, LINE #254] ACSCTRYL (level: 2)
    private @Getter @Setter int acsctryl;
    // [T-Up#INFO][COACTUP.CPY, LINE #255] ACSCTRYF (level: 2)
    private @Getter @Builder.Default String acsctryf = StringUtils.repeat(' ',
            1);

    public _OFFILLER80 getOFFILLER80() {
        return _OFFILLER80.builder().acsctrya(getAcsctrya()).build();
    }

    public void setOFFILLER80(String source) {
        setAcsctrya(source.substring(0, 1));
    }

    public void setOFFILLER80(_OFFILLER80 source) {
        setOFFILLER80(source.toString());
    }

    public String getAcsctrya() {
        return getAcsctryf();
    }

    public void setAcsctrya(String source) {
        setAcsctryf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #258] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER81 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #259] ACSCTRYI (level: 2)
    private @Getter @Builder.Default String acsctryi = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTUP.CPY, LINE #260] ACSPH1AL (level: 2)
    private @Getter @Setter int acsph1al;
    // [T-Up#INFO][COACTUP.CPY, LINE #261] ACSPH1AF (level: 2)
    private @Getter @Builder.Default String acsph1af = StringUtils.repeat(' ',
            1);

    public _OFFILLER82 getOFFILLER82() {
        return _OFFILLER82.builder().acsph1aa(getAcsph1aa()).build();
    }

    public void setOFFILLER82(String source) {
        setAcsph1aa(source.substring(0, 1));
    }

    public void setOFFILLER82(_OFFILLER82 source) {
        setOFFILLER82(source.toString());
    }

    public String getAcsph1aa() {
        return getAcsph1af();
    }

    public void setAcsph1aa(String source) {
        setAcsph1af(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #264] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER83 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #265] ACSPH1AI (level: 2)
    private @Getter @Builder.Default String acsph1ai = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTUP.CPY, LINE #266] ACSPH1BL (level: 2)
    private @Getter @Setter int acsph1bl;
    // [T-Up#INFO][COACTUP.CPY, LINE #267] ACSPH1BF (level: 2)
    private @Getter @Builder.Default String acsph1bf = StringUtils.repeat(' ',
            1);

    public _OFFILLER84 getOFFILLER84() {
        return _OFFILLER84.builder().acsph1ba(getAcsph1ba()).build();
    }

    public void setOFFILLER84(String source) {
        setAcsph1ba(source.substring(0, 1));
    }

    public void setOFFILLER84(_OFFILLER84 source) {
        setOFFILLER84(source.toString());
    }

    public String getAcsph1ba() {
        return getAcsph1bf();
    }

    public void setAcsph1ba(String source) {
        setAcsph1bf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #270] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER85 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #271] ACSPH1BI (level: 2)
    private @Getter @Builder.Default String acsph1bi = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTUP.CPY, LINE #272] ACSPH1CL (level: 2)
    private @Getter @Setter int acsph1cl;
    // [T-Up#INFO][COACTUP.CPY, LINE #273] ACSPH1CF (level: 2)
    private @Getter @Builder.Default String acsph1cf = StringUtils.repeat(' ',
            1);

    public _OFFILLER86 getOFFILLER86() {
        return _OFFILLER86.builder().acsph1ca(getAcsph1ca()).build();
    }

    public void setOFFILLER86(String source) {
        setAcsph1ca(source.substring(0, 1));
    }

    public void setOFFILLER86(_OFFILLER86 source) {
        setOFFILLER86(source.toString());
    }

    public String getAcsph1ca() {
        return getAcsph1cf();
    }

    public void setAcsph1ca(String source) {
        setAcsph1cf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #276] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER87 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #277] ACSPH1CI (level: 2)
    private @Getter @Builder.Default String acsph1ci = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #278] ACSGOVTL (level: 2)
    private @Getter @Setter int acsgovtl;
    // [T-Up#INFO][COACTUP.CPY, LINE #279] ACSGOVTF (level: 2)
    private @Getter @Builder.Default String acsgovtf = StringUtils.repeat(' ',
            1);

    public _OFFILLER88 getOFFILLER88() {
        return _OFFILLER88.builder().acsgovta(getAcsgovta()).build();
    }

    public void setOFFILLER88(String source) {
        setAcsgovta(source.substring(0, 1));
    }

    public void setOFFILLER88(_OFFILLER88 source) {
        setOFFILLER88(source.toString());
    }

    public String getAcsgovta() {
        return getAcsgovtf();
    }

    public void setAcsgovta(String source) {
        setAcsgovtf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #282] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER89 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #283] ACSGOVTI (level: 2)
    private @Getter @Builder.Default String acsgovti = StringUtils.repeat(' ',
            20);
    // [T-Up#INFO][COACTUP.CPY, LINE #284] ACSPH2AL (level: 2)
    private @Getter @Setter int acsph2al;
    // [T-Up#INFO][COACTUP.CPY, LINE #285] ACSPH2AF (level: 2)
    private @Getter @Builder.Default String acsph2af = StringUtils.repeat(' ',
            1);

    public _OFFILLER90 getOFFILLER90() {
        return _OFFILLER90.builder().acsph2aa(getAcsph2aa()).build();
    }

    public void setOFFILLER90(String source) {
        setAcsph2aa(source.substring(0, 1));
    }

    public void setOFFILLER90(_OFFILLER90 source) {
        setOFFILLER90(source.toString());
    }

    public String getAcsph2aa() {
        return getAcsph2af();
    }

    public void setAcsph2aa(String source) {
        setAcsph2af(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #288] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER91 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #289] ACSPH2AI (level: 2)
    private @Getter @Builder.Default String acsph2ai = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTUP.CPY, LINE #290] ACSPH2BL (level: 2)
    private @Getter @Setter int acsph2bl;
    // [T-Up#INFO][COACTUP.CPY, LINE #291] ACSPH2BF (level: 2)
    private @Getter @Builder.Default String acsph2bf = StringUtils.repeat(' ',
            1);

    public _OFFILLER92 getOFFILLER92() {
        return _OFFILLER92.builder().acsph2ba(getAcsph2ba()).build();
    }

    public void setOFFILLER92(String source) {
        setAcsph2ba(source.substring(0, 1));
    }

    public void setOFFILLER92(_OFFILLER92 source) {
        setOFFILLER92(source.toString());
    }

    public String getAcsph2ba() {
        return getAcsph2bf();
    }

    public void setAcsph2ba(String source) {
        setAcsph2bf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #294] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER93 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #295] ACSPH2BI (level: 2)
    private @Getter @Builder.Default String acsph2bi = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTUP.CPY, LINE #296] ACSPH2CL (level: 2)
    private @Getter @Setter int acsph2cl;
    // [T-Up#INFO][COACTUP.CPY, LINE #297] ACSPH2CF (level: 2)
    private @Getter @Builder.Default String acsph2cf = StringUtils.repeat(' ',
            1);

    public _OFFILLER94 getOFFILLER94() {
        return _OFFILLER94.builder().acsph2ca(getAcsph2ca()).build();
    }

    public void setOFFILLER94(String source) {
        setAcsph2ca(source.substring(0, 1));
    }

    public void setOFFILLER94(_OFFILLER94 source) {
        setOFFILLER94(source.toString());
    }

    public String getAcsph2ca() {
        return getAcsph2cf();
    }

    public void setAcsph2ca(String source) {
        setAcsph2cf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #300] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER95 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #301] ACSPH2CI (level: 2)
    private @Getter @Builder.Default String acsph2ci = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTUP.CPY, LINE #302] ACSEFTCL (level: 2)
    private @Getter @Setter int acseftcl;
    // [T-Up#INFO][COACTUP.CPY, LINE #303] ACSEFTCF (level: 2)
    private @Getter @Builder.Default String acseftcf = StringUtils.repeat(' ',
            1);

    public _OFFILLER96 getOFFILLER96() {
        return _OFFILLER96.builder().acseftca(getAcseftca()).build();
    }

    public void setOFFILLER96(String source) {
        setAcseftca(source.substring(0, 1));
    }

    public void setOFFILLER96(_OFFILLER96 source) {
        setOFFILLER96(source.toString());
    }

    public String getAcseftca() {
        return getAcseftcf();
    }

    public void setAcseftca(String source) {
        setAcseftcf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #306] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER97 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #307] ACSEFTCI (level: 2)
    private @Getter @Builder.Default String acseftci = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTUP.CPY, LINE #308] ACSPFLGL (level: 2)
    private @Getter @Setter int acspflgl;
    // [T-Up#INFO][COACTUP.CPY, LINE #309] ACSPFLGF (level: 2)
    private @Getter @Builder.Default String acspflgf = StringUtils.repeat(' ',
            1);

    public _OFFILLER98 getOFFILLER98() {
        return _OFFILLER98.builder().acspflga(getAcspflga()).build();
    }

    public void setOFFILLER98(String source) {
        setAcspflga(source.substring(0, 1));
    }

    public void setOFFILLER98(_OFFILLER98 source) {
        setOFFILLER98(source.toString());
    }

    public String getAcspflga() {
        return getAcspflgf();
    }

    public void setAcspflga(String source) {
        setAcspflgf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #312] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER99 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #313] ACSPFLGI (level: 2)
    private @Getter @Builder.Default String acspflgi = StringUtils.repeat(' ',
            1);
    // [T-Up#INFO][COACTUP.CPY, LINE #314] INFOMSGL (level: 2)
    private @Getter @Setter int infomsgl;
    // [T-Up#INFO][COACTUP.CPY, LINE #315] INFOMSGF (level: 2)
    private @Getter @Builder.Default String infomsgf = StringUtils.repeat(' ',
            1);

    public _OFFILLER100 getOFFILLER100() {
        return _OFFILLER100.builder().infomsga(getInfomsga()).build();
    }

    public void setOFFILLER100(String source) {
        setInfomsga(source.substring(0, 1));
    }

    public void setOFFILLER100(_OFFILLER100 source) {
        setOFFILLER100(source.toString());
    }

    public String getInfomsga() {
        return getInfomsgf();
    }

    public void setInfomsga(String source) {
        setInfomsgf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #318] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER101 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #319] INFOMSGI (level: 2)
    private @Getter @Builder.Default String infomsgi = StringUtils.repeat(' ',
            45);
    // [T-Up#INFO][COACTUP.CPY, LINE #320] ERRMSGL (level: 2)
    private @Getter @Setter int errmsgl;
    // [T-Up#INFO][COACTUP.CPY, LINE #321] ERRMSGF (level: 2)
    private @Getter @Builder.Default String errmsgf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER102 getOFFILLER102() {
        return _OFFILLER102.builder().errmsga(getErrmsga()).build();
    }

    public void setOFFILLER102(String source) {
        setErrmsga(source.substring(0, 1));
    }

    public void setOFFILLER102(_OFFILLER102 source) {
        setOFFILLER102(source.toString());
    }

    public String getErrmsga() {
        return getErrmsgf();
    }

    public void setErrmsga(String source) {
        setErrmsgf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #324] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER103 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #325] ERRMSGI (level: 2)
    private @Getter @Builder.Default String errmsgi = StringUtils.repeat(' ',
            78);
    // [T-Up#INFO][COACTUP.CPY, LINE #326] FKEYSL (level: 2)
    private @Getter @Setter int fkeysl;
    // [T-Up#INFO][COACTUP.CPY, LINE #327] FKEYSF (level: 2)
    private @Getter @Builder.Default String fkeysf = StringUtils.repeat(' ', 1);

    public _OFFILLER104 getOFFILLER104() {
        return _OFFILLER104.builder().fkeysa(getFkeysa()).build();
    }

    public void setOFFILLER104(String source) {
        setFkeysa(source.substring(0, 1));
    }

    public void setOFFILLER104(_OFFILLER104 source) {
        setOFFILLER104(source.toString());
    }

    public String getFkeysa() {
        return getFkeysf();
    }

    public void setFkeysa(String source) {
        setFkeysf(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #330] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER105 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #331] FKEYSI (level: 2)
    private @Getter @Builder.Default String fkeysi = StringUtils
            .repeat(' ', 21);
    // [T-Up#INFO][COACTUP.CPY, LINE #332] FKEY05L (level: 2)
    private @Getter @Setter int fkey05l;
    // [T-Up#INFO][COACTUP.CPY, LINE #333] FKEY05F (level: 2)
    private @Getter @Builder.Default String fkey05f = StringUtils
            .repeat(' ', 1);

    public _OFFILLER106 getOFFILLER106() {
        return _OFFILLER106.builder().fkey05a(getFkey05a()).build();
    }

    public void setOFFILLER106(String source) {
        setFkey05a(source.substring(0, 1));
    }

    public void setOFFILLER106(_OFFILLER106 source) {
        setOFFILLER106(source.toString());
    }

    public String getFkey05a() {
        return getFkey05f();
    }

    public void setFkey05a(String source) {
        setFkey05f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #336] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER107 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #337] FKEY05I (level: 2)
    private @Getter @Builder.Default String fkey05i = StringUtils
            .repeat(' ', 7);
    // [T-Up#INFO][COACTUP.CPY, LINE #338] FKEY12L (level: 2)
    private @Getter @Setter int fkey12l;
    // [T-Up#INFO][COACTUP.CPY, LINE #339] FKEY12F (level: 2)
    private @Getter @Builder.Default String fkey12f = StringUtils
            .repeat(' ', 1);

    public _OFFILLER108 getOFFILLER108() {
        return _OFFILLER108.builder().fkey12a(getFkey12a()).build();
    }

    public void setOFFILLER108(String source) {
        setFkey12a(source.substring(0, 1));
    }

    public void setOFFILLER108(_OFFILLER108 source) {
        setOFFILLER108(source.toString());
    }

    public String getFkey12a() {
        return getFkey12f();
    }

    public void setFkey12a(String source) {
        setFkey12f(source);
    }

    // [T-Up#INFO][COACTUP.CPY, LINE #342] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER109 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTUP.CPY, LINE #343] FKEY12I (level: 2)
    private @Getter @Builder.Default String fkey12i = StringUtils.repeat(' ',
            10);

    public void setOFFILLER1(String source) {
        OFFILLER1 = StringUtils.truncate(StringUtils.rightPad(source, 12), 12);
    }

    public void setTrnnamef(String source) {
        trnnamef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER3(String source) {
        OFFILLER3 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTrnnamei(String source) {
        trnnamei = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle01f(String source) {
        title01f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER5(String source) {
        OFFILLER5 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle01i(String source) {
        title01i = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setCurdatef(String source) {
        curdatef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER7(String source) {
        OFFILLER7 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCurdatei(String source) {
        curdatei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setPgmnamef(String source) {
        pgmnamef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER9(String source) {
        OFFILLER9 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setPgmnamei(String source) {
        pgmnamei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setTitle02f(String source) {
        title02f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER11(String source) {
        OFFILLER11 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle02i(String source) {
        title02i = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setCurtimef(String source) {
        curtimef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER13(String source) {
        OFFILLER13 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCurtimei(String source) {
        curtimei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setAcctsidf(String source) {
        acctsidf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER15(String source) {
        OFFILLER15 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcctsidi(String source) {
        acctsidi = StringUtils.truncate(StringUtils.rightPad(source, 11), 11);
    }

    public void setAcsttusf(String source) {
        acsttusf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER17(String source) {
        OFFILLER17 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsttusi(String source) {
        acsttusi = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOpnyearf(String source) {
        opnyearf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER19(String source) {
        OFFILLER19 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setOpnyeari(String source) {
        opnyeari = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setOpnmonf(String source) {
        opnmonf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER21(String source) {
        OFFILLER21 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setOpnmoni(String source) {
        opnmoni = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setOpndayf(String source) {
        opndayf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER23(String source) {
        OFFILLER23 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setOpndayi(String source) {
        opndayi = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setAcrdlimf(String source) {
        acrdlimf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER25(String source) {
        OFFILLER25 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcrdlimi(String source) {
        acrdlimi = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setExpyearf(String source) {
        expyearf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER27(String source) {
        OFFILLER27 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpyeari(String source) {
        expyeari = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpmonf(String source) {
        expmonf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER29(String source) {
        OFFILLER29 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpmoni(String source) {
        expmoni = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setExpdayf(String source) {
        expdayf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER31(String source) {
        OFFILLER31 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setExpdayi(String source) {
        expdayi = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setAcshlimf(String source) {
        acshlimf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER33(String source) {
        OFFILLER33 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcshlimi(String source) {
        acshlimi = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setRisyearf(String source) {
        risyearf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER35(String source) {
        OFFILLER35 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setRisyeari(String source) {
        risyeari = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setRismonf(String source) {
        rismonf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER37(String source) {
        OFFILLER37 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setRismoni(String source) {
        rismoni = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setRisdayf(String source) {
        risdayf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER39(String source) {
        OFFILLER39 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setRisdayi(String source) {
        risdayi = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setAcurbalf(String source) {
        acurbalf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER41(String source) {
        OFFILLER41 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcurbali(String source) {
        acurbali = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAcrcycrf(String source) {
        acrcycrf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER43(String source) {
        OFFILLER43 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcrcycri(String source) {
        acrcycri = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAaddgrpf(String source) {
        aaddgrpf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER45(String source) {
        OFFILLER45 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAaddgrpi(String source) {
        aaddgrpi = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcrcydbf(String source) {
        acrcydbf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER47(String source) {
        OFFILLER47 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcrcydbi(String source) {
        acrcydbi = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAcstnumf(String source) {
        acstnumf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER49(String source) {
        OFFILLER49 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcstnumi(String source) {
        acstnumi = StringUtils.truncate(StringUtils.rightPad(source, 9), 9);
    }

    public void setActssn1f(String source) {
        actssn1f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER51(String source) {
        OFFILLER51 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setActssn1i(String source) {
        actssn1i = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setActssn2f(String source) {
        actssn2f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER53(String source) {
        OFFILLER53 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setActssn2i(String source) {
        actssn2i = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setActssn3f(String source) {
        actssn3f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER55(String source) {
        OFFILLER55 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setActssn3i(String source) {
        actssn3i = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setDobyearf(String source) {
        dobyearf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER57(String source) {
        OFFILLER57 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setDobyeari(String source) {
        dobyeari = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setDobmonf(String source) {
        dobmonf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER59(String source) {
        OFFILLER59 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setDobmoni(String source) {
        dobmoni = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setDobdayf(String source) {
        dobdayf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER61(String source) {
        OFFILLER61 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setDobdayi(String source) {
        dobdayi = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setAcstfcof(String source) {
        acstfcof = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER63(String source) {
        OFFILLER63 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcstfcoi(String source) {
        acstfcoi = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsfnamf(String source) {
        acsfnamf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER65(String source) {
        OFFILLER65 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsfnami(String source) {
        acsfnami = StringUtils.truncate(StringUtils.rightPad(source, 25), 25);
    }

    public void setAcsmnamf(String source) {
        acsmnamf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER67(String source) {
        OFFILLER67 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsmnami(String source) {
        acsmnami = StringUtils.truncate(StringUtils.rightPad(source, 25), 25);
    }

    public void setAcslnamf(String source) {
        acslnamf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER69(String source) {
        OFFILLER69 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcslnami(String source) {
        acslnami = StringUtils.truncate(StringUtils.rightPad(source, 25), 25);
    }

    public void setAcsadl1f(String source) {
        acsadl1f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER71(String source) {
        OFFILLER71 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsadl1i(String source) {
        acsadl1i = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
    }

    public void setAcssttef(String source) {
        acssttef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER73(String source) {
        OFFILLER73 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcssttei(String source) {
        acssttei = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setAcsadl2f(String source) {
        acsadl2f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER75(String source) {
        OFFILLER75 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsadl2i(String source) {
        acsadl2i = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
    }

    public void setAcszipcf(String source) {
        acszipcf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER77(String source) {
        OFFILLER77 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcszipci(String source) {
        acszipci = StringUtils.truncate(StringUtils.rightPad(source, 5), 5);
    }

    public void setAcscityf(String source) {
        acscityf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER79(String source) {
        OFFILLER79 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcscityi(String source) {
        acscityi = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
    }

    public void setAcsctryf(String source) {
        acsctryf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER81(String source) {
        OFFILLER81 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsctryi(String source) {
        acsctryi = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsph1af(String source) {
        acsph1af = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER83(String source) {
        OFFILLER83 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsph1ai(String source) {
        acsph1ai = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsph1bf(String source) {
        acsph1bf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER85(String source) {
        OFFILLER85 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsph1bi(String source) {
        acsph1bi = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsph1cf(String source) {
        acsph1cf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER87(String source) {
        OFFILLER87 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsph1ci(String source) {
        acsph1ci = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsgovtf(String source) {
        acsgovtf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER89(String source) {
        OFFILLER89 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsgovti(String source) {
        acsgovti = StringUtils.truncate(StringUtils.rightPad(source, 20), 20);
    }

    public void setAcsph2af(String source) {
        acsph2af = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER91(String source) {
        OFFILLER91 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsph2ai(String source) {
        acsph2ai = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsph2bf(String source) {
        acsph2bf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER93(String source) {
        OFFILLER93 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsph2bi(String source) {
        acsph2bi = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsph2cf(String source) {
        acsph2cf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER95(String source) {
        OFFILLER95 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsph2ci(String source) {
        acsph2ci = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcseftcf(String source) {
        acseftcf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER97(String source) {
        OFFILLER97 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcseftci(String source) {
        acseftci = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcspflgf(String source) {
        acspflgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER99(String source) {
        OFFILLER99 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcspflgi(String source) {
        acspflgi = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setInfomsgf(String source) {
        infomsgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER101(String source) {
        OFFILLER101 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setInfomsgi(String source) {
        infomsgi = StringUtils.truncate(StringUtils.rightPad(source, 45), 45);
    }

    public void setErrmsgf(String source) {
        errmsgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER103(String source) {
        OFFILLER103 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setErrmsgi(String source) {
        errmsgi = StringUtils.truncate(StringUtils.rightPad(source, 78), 78);
    }

    public void setFkeysf(String source) {
        fkeysf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER105(String source) {
        OFFILLER105 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setFkeysi(String source) {
        fkeysi = StringUtils.truncate(StringUtils.rightPad(source, 21), 21);
    }

    public void setFkey05f(String source) {
        fkey05f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER107(String source) {
        OFFILLER107 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setFkey05i(String source) {
        fkey05i = StringUtils.truncate(StringUtils.rightPad(source, 7), 7);
    }

    public void setFkey12f(String source) {
        fkey12f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER109(String source) {
        OFFILLER109 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setFkey12i(String source) {
        fkey12i = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public static CoactupcCactupai createDefaultValueInstance() {
        return new CoactupcCactupai.builder().build();
    }

    public void set(String source) {
        ByteBuffer tempByteBuffer1;
        source = StringUtils.truncate(StringUtils.rightPad(source, 1095), 1095);
        OFFILLER1 = source.substring(0, 12);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(12, 14).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            trnnamel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            trnnamel = 0;
        }
        trnnamef = source.substring(14, 15);
        OFFILLER3 = source.substring(15, 19);
        trnnamei = source.substring(19, 23);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(23, 25).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            title01l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            title01l = 0;
        }
        title01f = source.substring(25, 26);
        OFFILLER5 = source.substring(26, 30);
        title01i = source.substring(30, 70);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(70, 72).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            curdatel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            curdatel = 0;
        }
        curdatef = source.substring(72, 73);
        OFFILLER7 = source.substring(73, 77);
        curdatei = source.substring(77, 85);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(85, 87).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            pgmnamel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            pgmnamel = 0;
        }
        pgmnamef = source.substring(87, 88);
        OFFILLER9 = source.substring(88, 92);
        pgmnamei = source.substring(92, 100);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(100, 102).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            title02l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            title02l = 0;
        }
        title02f = source.substring(102, 103);
        OFFILLER11 = source.substring(103, 107);
        title02i = source.substring(107, 147);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(147, 149).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            curtimel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            curtimel = 0;
        }
        curtimef = source.substring(149, 150);
        OFFILLER13 = source.substring(150, 154);
        curtimei = source.substring(154, 162);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(162, 164).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acctsidl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acctsidl = 0;
        }
        acctsidf = source.substring(164, 165);
        OFFILLER15 = source.substring(165, 169);
        acctsidi = source.substring(169, 180);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(180, 182).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsttusl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsttusl = 0;
        }
        acsttusf = source.substring(182, 183);
        OFFILLER17 = source.substring(183, 187);
        acsttusi = source.substring(187, 188);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(188, 190).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            opnyearl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            opnyearl = 0;
        }
        opnyearf = source.substring(190, 191);
        OFFILLER19 = source.substring(191, 195);
        opnyeari = source.substring(195, 199);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(199, 201).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            opnmonl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            opnmonl = 0;
        }
        opnmonf = source.substring(201, 202);
        OFFILLER21 = source.substring(202, 206);
        opnmoni = source.substring(206, 208);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(208, 210).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            opndayl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            opndayl = 0;
        }
        opndayf = source.substring(210, 211);
        OFFILLER23 = source.substring(211, 215);
        opndayi = source.substring(215, 217);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(217, 219).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acrdliml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acrdliml = 0;
        }
        acrdlimf = source.substring(219, 220);
        OFFILLER25 = source.substring(220, 224);
        acrdlimi = source.substring(224, 239);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(239, 241).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            expyearl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            expyearl = 0;
        }
        expyearf = source.substring(241, 242);
        OFFILLER27 = source.substring(242, 246);
        expyeari = source.substring(246, 250);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(250, 252).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            expmonl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            expmonl = 0;
        }
        expmonf = source.substring(252, 253);
        OFFILLER29 = source.substring(253, 257);
        expmoni = source.substring(257, 259);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(259, 261).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            expdayl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            expdayl = 0;
        }
        expdayf = source.substring(261, 262);
        OFFILLER31 = source.substring(262, 266);
        expdayi = source.substring(266, 268);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(268, 270).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acshliml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acshliml = 0;
        }
        acshlimf = source.substring(270, 271);
        OFFILLER33 = source.substring(271, 275);
        acshlimi = source.substring(275, 290);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(290, 292).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            risyearl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            risyearl = 0;
        }
        risyearf = source.substring(292, 293);
        OFFILLER35 = source.substring(293, 297);
        risyeari = source.substring(297, 301);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(301, 303).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            rismonl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            rismonl = 0;
        }
        rismonf = source.substring(303, 304);
        OFFILLER37 = source.substring(304, 308);
        rismoni = source.substring(308, 310);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(310, 312).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            risdayl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            risdayl = 0;
        }
        risdayf = source.substring(312, 313);
        OFFILLER39 = source.substring(313, 317);
        risdayi = source.substring(317, 319);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(319, 321).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acurball = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acurball = 0;
        }
        acurbalf = source.substring(321, 322);
        OFFILLER41 = source.substring(322, 326);
        acurbali = source.substring(326, 341);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(341, 343).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acrcycrl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acrcycrl = 0;
        }
        acrcycrf = source.substring(343, 344);
        OFFILLER43 = source.substring(344, 348);
        acrcycri = source.substring(348, 363);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(363, 365).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            aaddgrpl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            aaddgrpl = 0;
        }
        aaddgrpf = source.substring(365, 366);
        OFFILLER45 = source.substring(366, 370);
        aaddgrpi = source.substring(370, 380);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(380, 382).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acrcydbl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acrcydbl = 0;
        }
        acrcydbf = source.substring(382, 383);
        OFFILLER47 = source.substring(383, 387);
        acrcydbi = source.substring(387, 402);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(402, 404).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acstnuml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acstnuml = 0;
        }
        acstnumf = source.substring(404, 405);
        OFFILLER49 = source.substring(405, 409);
        acstnumi = source.substring(409, 418);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(418, 420).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            actssn1l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            actssn1l = 0;
        }
        actssn1f = source.substring(420, 421);
        OFFILLER51 = source.substring(421, 425);
        actssn1i = source.substring(425, 428);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(428, 430).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            actssn2l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            actssn2l = 0;
        }
        actssn2f = source.substring(430, 431);
        OFFILLER53 = source.substring(431, 435);
        actssn2i = source.substring(435, 437);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(437, 439).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            actssn3l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            actssn3l = 0;
        }
        actssn3f = source.substring(439, 440);
        OFFILLER55 = source.substring(440, 444);
        actssn3i = source.substring(444, 448);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(448, 450).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            dobyearl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            dobyearl = 0;
        }
        dobyearf = source.substring(450, 451);
        OFFILLER57 = source.substring(451, 455);
        dobyeari = source.substring(455, 459);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(459, 461).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            dobmonl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            dobmonl = 0;
        }
        dobmonf = source.substring(461, 462);
        OFFILLER59 = source.substring(462, 466);
        dobmoni = source.substring(466, 468);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(468, 470).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            dobdayl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            dobdayl = 0;
        }
        dobdayf = source.substring(470, 471);
        OFFILLER61 = source.substring(471, 475);
        dobdayi = source.substring(475, 477);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(477, 479).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acstfcol = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acstfcol = 0;
        }
        acstfcof = source.substring(479, 480);
        OFFILLER63 = source.substring(480, 484);
        acstfcoi = source.substring(484, 487);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(487, 489).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsfnaml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsfnaml = 0;
        }
        acsfnamf = source.substring(489, 490);
        OFFILLER65 = source.substring(490, 494);
        acsfnami = source.substring(494, 519);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(519, 521).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsmnaml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsmnaml = 0;
        }
        acsmnamf = source.substring(521, 522);
        OFFILLER67 = source.substring(522, 526);
        acsmnami = source.substring(526, 551);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(551, 553).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acslnaml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acslnaml = 0;
        }
        acslnamf = source.substring(553, 554);
        OFFILLER69 = source.substring(554, 558);
        acslnami = source.substring(558, 583);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(583, 585).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsadl1l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsadl1l = 0;
        }
        acsadl1f = source.substring(585, 586);
        OFFILLER71 = source.substring(586, 590);
        acsadl1i = source.substring(590, 640);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(640, 642).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acssttel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acssttel = 0;
        }
        acssttef = source.substring(642, 643);
        OFFILLER73 = source.substring(643, 647);
        acssttei = source.substring(647, 649);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(649, 651).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsadl2l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsadl2l = 0;
        }
        acsadl2f = source.substring(651, 652);
        OFFILLER75 = source.substring(652, 656);
        acsadl2i = source.substring(656, 706);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(706, 708).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acszipcl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acszipcl = 0;
        }
        acszipcf = source.substring(708, 709);
        OFFILLER77 = source.substring(709, 713);
        acszipci = source.substring(713, 718);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(718, 720).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acscityl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acscityl = 0;
        }
        acscityf = source.substring(720, 721);
        OFFILLER79 = source.substring(721, 725);
        acscityi = source.substring(725, 775);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(775, 777).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsctryl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsctryl = 0;
        }
        acsctryf = source.substring(777, 778);
        OFFILLER81 = source.substring(778, 782);
        acsctryi = source.substring(782, 785);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(785, 787).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsph1al = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsph1al = 0;
        }
        acsph1af = source.substring(787, 788);
        OFFILLER83 = source.substring(788, 792);
        acsph1ai = source.substring(792, 795);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(795, 797).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsph1bl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsph1bl = 0;
        }
        acsph1bf = source.substring(797, 798);
        OFFILLER85 = source.substring(798, 802);
        acsph1bi = source.substring(802, 805);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(805, 807).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsph1cl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsph1cl = 0;
        }
        acsph1cf = source.substring(807, 808);
        OFFILLER87 = source.substring(808, 812);
        acsph1ci = source.substring(812, 816);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(816, 818).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsgovtl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsgovtl = 0;
        }
        acsgovtf = source.substring(818, 819);
        OFFILLER89 = source.substring(819, 823);
        acsgovti = source.substring(823, 843);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(843, 845).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsph2al = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsph2al = 0;
        }
        acsph2af = source.substring(845, 846);
        OFFILLER91 = source.substring(846, 850);
        acsph2ai = source.substring(850, 853);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(853, 855).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsph2bl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsph2bl = 0;
        }
        acsph2bf = source.substring(855, 856);
        OFFILLER93 = source.substring(856, 860);
        acsph2bi = source.substring(860, 863);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(863, 865).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsph2cl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsph2cl = 0;
        }
        acsph2cf = source.substring(865, 866);
        OFFILLER95 = source.substring(866, 870);
        acsph2ci = source.substring(870, 874);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(874, 876).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acseftcl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acseftcl = 0;
        }
        acseftcf = source.substring(876, 877);
        OFFILLER97 = source.substring(877, 881);
        acseftci = source.substring(881, 891);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(891, 893).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acspflgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acspflgl = 0;
        }
        acspflgf = source.substring(893, 894);
        OFFILLER99 = source.substring(894, 898);
        acspflgi = source.substring(898, 899);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(899, 901).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            infomsgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            infomsgl = 0;
        }
        infomsgf = source.substring(901, 902);
        OFFILLER101 = source.substring(902, 906);
        infomsgi = source.substring(906, 951);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(951, 953).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            errmsgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            errmsgl = 0;
        }
        errmsgf = source.substring(953, 954);
        OFFILLER103 = source.substring(954, 958);
        errmsgi = source.substring(958, 1036);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(1036, 1038).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            fkeysl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            fkeysl = 0;
        }
        fkeysf = source.substring(1038, 1039);
        OFFILLER105 = source.substring(1039, 1043);
        fkeysi = source.substring(1043, 1064);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(1064, 1066).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            fkey05l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            fkey05l = 0;
        }
        fkey05f = source.substring(1066, 1067);
        OFFILLER107 = source.substring(1067, 1071);
        fkey05i = source.substring(1071, 1078);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(1078, 1080).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            fkey12l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            fkey12l = 0;
        }
        fkey12f = source.substring(1080, 1081);
        OFFILLER109 = source.substring(1081, 1085);
        fkey12i = source.substring(1085, 1095);
    }

    public String get() {
        ByteBuffer tempByteBuffer1;
        StringBuilder sb = new StringBuilder();
        sb.append(OFFILLER1);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) trnnamel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(trnnamef);
        sb.append(OFFILLER3);
        sb.append(trnnamei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) title01l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(title01f);
        sb.append(OFFILLER5);
        sb.append(title01i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) curdatel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(curdatef);
        sb.append(OFFILLER7);
        sb.append(curdatei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) pgmnamel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(pgmnamef);
        sb.append(OFFILLER9);
        sb.append(pgmnamei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) title02l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(title02f);
        sb.append(OFFILLER11);
        sb.append(title02i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) curtimel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(curtimef);
        sb.append(OFFILLER13);
        sb.append(curtimei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acctsidl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acctsidf);
        sb.append(OFFILLER15);
        sb.append(acctsidi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsttusl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsttusf);
        sb.append(OFFILLER17);
        sb.append(acsttusi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) opnyearl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(opnyearf);
        sb.append(OFFILLER19);
        sb.append(opnyeari);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) opnmonl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(opnmonf);
        sb.append(OFFILLER21);
        sb.append(opnmoni);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) opndayl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(opndayf);
        sb.append(OFFILLER23);
        sb.append(opndayi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acrdliml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acrdlimf);
        sb.append(OFFILLER25);
        sb.append(acrdlimi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) expyearl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(expyearf);
        sb.append(OFFILLER27);
        sb.append(expyeari);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) expmonl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(expmonf);
        sb.append(OFFILLER29);
        sb.append(expmoni);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) expdayl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(expdayf);
        sb.append(OFFILLER31);
        sb.append(expdayi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acshliml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acshlimf);
        sb.append(OFFILLER33);
        sb.append(acshlimi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) risyearl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(risyearf);
        sb.append(OFFILLER35);
        sb.append(risyeari);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) rismonl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(rismonf);
        sb.append(OFFILLER37);
        sb.append(rismoni);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) risdayl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(risdayf);
        sb.append(OFFILLER39);
        sb.append(risdayi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acurball);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acurbalf);
        sb.append(OFFILLER41);
        sb.append(acurbali);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acrcycrl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acrcycrf);
        sb.append(OFFILLER43);
        sb.append(acrcycri);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) aaddgrpl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(aaddgrpf);
        sb.append(OFFILLER45);
        sb.append(aaddgrpi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acrcydbl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acrcydbf);
        sb.append(OFFILLER47);
        sb.append(acrcydbi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acstnuml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acstnumf);
        sb.append(OFFILLER49);
        sb.append(acstnumi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) actssn1l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(actssn1f);
        sb.append(OFFILLER51);
        sb.append(actssn1i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) actssn2l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(actssn2f);
        sb.append(OFFILLER53);
        sb.append(actssn2i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) actssn3l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(actssn3f);
        sb.append(OFFILLER55);
        sb.append(actssn3i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) dobyearl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(dobyearf);
        sb.append(OFFILLER57);
        sb.append(dobyeari);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) dobmonl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(dobmonf);
        sb.append(OFFILLER59);
        sb.append(dobmoni);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) dobdayl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(dobdayf);
        sb.append(OFFILLER61);
        sb.append(dobdayi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acstfcol);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acstfcof);
        sb.append(OFFILLER63);
        sb.append(acstfcoi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsfnaml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsfnamf);
        sb.append(OFFILLER65);
        sb.append(acsfnami);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsmnaml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsmnamf);
        sb.append(OFFILLER67);
        sb.append(acsmnami);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acslnaml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acslnamf);
        sb.append(OFFILLER69);
        sb.append(acslnami);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsadl1l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsadl1f);
        sb.append(OFFILLER71);
        sb.append(acsadl1i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acssttel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acssttef);
        sb.append(OFFILLER73);
        sb.append(acssttei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsadl2l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsadl2f);
        sb.append(OFFILLER75);
        sb.append(acsadl2i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acszipcl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acszipcf);
        sb.append(OFFILLER77);
        sb.append(acszipci);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acscityl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acscityf);
        sb.append(OFFILLER79);
        sb.append(acscityi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsctryl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsctryf);
        sb.append(OFFILLER81);
        sb.append(acsctryi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsph1al);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsph1af);
        sb.append(OFFILLER83);
        sb.append(acsph1ai);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsph1bl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsph1bf);
        sb.append(OFFILLER85);
        sb.append(acsph1bi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsph1cl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsph1cf);
        sb.append(OFFILLER87);
        sb.append(acsph1ci);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsgovtl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsgovtf);
        sb.append(OFFILLER89);
        sb.append(acsgovti);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsph2al);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsph2af);
        sb.append(OFFILLER91);
        sb.append(acsph2ai);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsph2bl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsph2bf);
        sb.append(OFFILLER93);
        sb.append(acsph2bi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsph2cl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsph2cf);
        sb.append(OFFILLER95);
        sb.append(acsph2ci);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acseftcl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acseftcf);
        sb.append(OFFILLER97);
        sb.append(acseftci);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acspflgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acspflgf);
        sb.append(OFFILLER99);
        sb.append(acspflgi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) infomsgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(infomsgf);
        sb.append(OFFILLER101);
        sb.append(infomsgi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) errmsgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(errmsgf);
        sb.append(OFFILLER103);
        sb.append(errmsgi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) fkeysl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(fkeysf);
        sb.append(OFFILLER105);
        sb.append(fkeysi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) fkey05l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(fkey05f);
        sb.append(OFFILLER107);
        sb.append(fkey05i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) fkey12l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(fkey12f);
        sb.append(OFFILLER109);
        sb.append(fkey12i);
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(OFFILLER1);
        sb.append(String.valueOf(getTrnnamel()));
        sb.append(getTrnnamef());
        sb.append(OFFILLER3);
        sb.append(getTrnnamei());
        sb.append(String.valueOf(getTitle01l()));
        sb.append(getTitle01f());
        sb.append(OFFILLER5);
        sb.append(getTitle01i());
        sb.append(String.valueOf(getCurdatel()));
        sb.append(getCurdatef());
        sb.append(OFFILLER7);
        sb.append(getCurdatei());
        sb.append(String.valueOf(getPgmnamel()));
        sb.append(getPgmnamef());
        sb.append(OFFILLER9);
        sb.append(getPgmnamei());
        sb.append(String.valueOf(getTitle02l()));
        sb.append(getTitle02f());
        sb.append(OFFILLER11);
        sb.append(getTitle02i());
        sb.append(String.valueOf(getCurtimel()));
        sb.append(getCurtimef());
        sb.append(OFFILLER13);
        sb.append(getCurtimei());
        sb.append(String.valueOf(getAcctsidl()));
        sb.append(getAcctsidf());
        sb.append(OFFILLER15);
        sb.append(getAcctsidi());
        sb.append(String.valueOf(getAcsttusl()));
        sb.append(getAcsttusf());
        sb.append(OFFILLER17);
        sb.append(getAcsttusi());
        sb.append(String.valueOf(getOpnyearl()));
        sb.append(getOpnyearf());
        sb.append(OFFILLER19);
        sb.append(getOpnyeari());
        sb.append(String.valueOf(getOpnmonl()));
        sb.append(getOpnmonf());
        sb.append(OFFILLER21);
        sb.append(getOpnmoni());
        sb.append(String.valueOf(getOpndayl()));
        sb.append(getOpndayf());
        sb.append(OFFILLER23);
        sb.append(getOpndayi());
        sb.append(String.valueOf(getAcrdliml()));
        sb.append(getAcrdlimf());
        sb.append(OFFILLER25);
        sb.append(getAcrdlimi());
        sb.append(String.valueOf(getExpyearl()));
        sb.append(getExpyearf());
        sb.append(OFFILLER27);
        sb.append(getExpyeari());
        sb.append(String.valueOf(getExpmonl()));
        sb.append(getExpmonf());
        sb.append(OFFILLER29);
        sb.append(getExpmoni());
        sb.append(String.valueOf(getExpdayl()));
        sb.append(getExpdayf());
        sb.append(OFFILLER31);
        sb.append(getExpdayi());
        sb.append(String.valueOf(getAcshliml()));
        sb.append(getAcshlimf());
        sb.append(OFFILLER33);
        sb.append(getAcshlimi());
        sb.append(String.valueOf(getRisyearl()));
        sb.append(getRisyearf());
        sb.append(OFFILLER35);
        sb.append(getRisyeari());
        sb.append(String.valueOf(getRismonl()));
        sb.append(getRismonf());
        sb.append(OFFILLER37);
        sb.append(getRismoni());
        sb.append(String.valueOf(getRisdayl()));
        sb.append(getRisdayf());
        sb.append(OFFILLER39);
        sb.append(getRisdayi());
        sb.append(String.valueOf(getAcurball()));
        sb.append(getAcurbalf());
        sb.append(OFFILLER41);
        sb.append(getAcurbali());
        sb.append(String.valueOf(getAcrcycrl()));
        sb.append(getAcrcycrf());
        sb.append(OFFILLER43);
        sb.append(getAcrcycri());
        sb.append(String.valueOf(getAaddgrpl()));
        sb.append(getAaddgrpf());
        sb.append(OFFILLER45);
        sb.append(getAaddgrpi());
        sb.append(String.valueOf(getAcrcydbl()));
        sb.append(getAcrcydbf());
        sb.append(OFFILLER47);
        sb.append(getAcrcydbi());
        sb.append(String.valueOf(getAcstnuml()));
        sb.append(getAcstnumf());
        sb.append(OFFILLER49);
        sb.append(getAcstnumi());
        sb.append(String.valueOf(getActssn1l()));
        sb.append(getActssn1f());
        sb.append(OFFILLER51);
        sb.append(getActssn1i());
        sb.append(String.valueOf(getActssn2l()));
        sb.append(getActssn2f());
        sb.append(OFFILLER53);
        sb.append(getActssn2i());
        sb.append(String.valueOf(getActssn3l()));
        sb.append(getActssn3f());
        sb.append(OFFILLER55);
        sb.append(getActssn3i());
        sb.append(String.valueOf(getDobyearl()));
        sb.append(getDobyearf());
        sb.append(OFFILLER57);
        sb.append(getDobyeari());
        sb.append(String.valueOf(getDobmonl()));
        sb.append(getDobmonf());
        sb.append(OFFILLER59);
        sb.append(getDobmoni());
        sb.append(String.valueOf(getDobdayl()));
        sb.append(getDobdayf());
        sb.append(OFFILLER61);
        sb.append(getDobdayi());
        sb.append(String.valueOf(getAcstfcol()));
        sb.append(getAcstfcof());
        sb.append(OFFILLER63);
        sb.append(getAcstfcoi());
        sb.append(String.valueOf(getAcsfnaml()));
        sb.append(getAcsfnamf());
        sb.append(OFFILLER65);
        sb.append(getAcsfnami());
        sb.append(String.valueOf(getAcsmnaml()));
        sb.append(getAcsmnamf());
        sb.append(OFFILLER67);
        sb.append(getAcsmnami());
        sb.append(String.valueOf(getAcslnaml()));
        sb.append(getAcslnamf());
        sb.append(OFFILLER69);
        sb.append(getAcslnami());
        sb.append(String.valueOf(getAcsadl1l()));
        sb.append(getAcsadl1f());
        sb.append(OFFILLER71);
        sb.append(getAcsadl1i());
        sb.append(String.valueOf(getAcssttel()));
        sb.append(getAcssttef());
        sb.append(OFFILLER73);
        sb.append(getAcssttei());
        sb.append(String.valueOf(getAcsadl2l()));
        sb.append(getAcsadl2f());
        sb.append(OFFILLER75);
        sb.append(getAcsadl2i());
        sb.append(String.valueOf(getAcszipcl()));
        sb.append(getAcszipcf());
        sb.append(OFFILLER77);
        sb.append(getAcszipci());
        sb.append(String.valueOf(getAcscityl()));
        sb.append(getAcscityf());
        sb.append(OFFILLER79);
        sb.append(getAcscityi());
        sb.append(String.valueOf(getAcsctryl()));
        sb.append(getAcsctryf());
        sb.append(OFFILLER81);
        sb.append(getAcsctryi());
        sb.append(String.valueOf(getAcsph1al()));
        sb.append(getAcsph1af());
        sb.append(OFFILLER83);
        sb.append(getAcsph1ai());
        sb.append(String.valueOf(getAcsph1bl()));
        sb.append(getAcsph1bf());
        sb.append(OFFILLER85);
        sb.append(getAcsph1bi());
        sb.append(String.valueOf(getAcsph1cl()));
        sb.append(getAcsph1cf());
        sb.append(OFFILLER87);
        sb.append(getAcsph1ci());
        sb.append(String.valueOf(getAcsgovtl()));
        sb.append(getAcsgovtf());
        sb.append(OFFILLER89);
        sb.append(getAcsgovti());
        sb.append(String.valueOf(getAcsph2al()));
        sb.append(getAcsph2af());
        sb.append(OFFILLER91);
        sb.append(getAcsph2ai());
        sb.append(String.valueOf(getAcsph2bl()));
        sb.append(getAcsph2bf());
        sb.append(OFFILLER93);
        sb.append(getAcsph2bi());
        sb.append(String.valueOf(getAcsph2cl()));
        sb.append(getAcsph2cf());
        sb.append(OFFILLER95);
        sb.append(getAcsph2ci());
        sb.append(String.valueOf(getAcseftcl()));
        sb.append(getAcseftcf());
        sb.append(OFFILLER97);
        sb.append(getAcseftci());
        sb.append(String.valueOf(getAcspflgl()));
        sb.append(getAcspflgf());
        sb.append(OFFILLER99);
        sb.append(getAcspflgi());
        sb.append(String.valueOf(getInfomsgl()));
        sb.append(getInfomsgf());
        sb.append(OFFILLER101);
        sb.append(getInfomsgi());
        sb.append(String.valueOf(getErrmsgl()));
        sb.append(getErrmsgf());
        sb.append(OFFILLER103);
        sb.append(getErrmsgi());
        sb.append(String.valueOf(getFkeysl()));
        sb.append(getFkeysf());
        sb.append(OFFILLER105);
        sb.append(getFkeysi());
        sb.append(String.valueOf(getFkey05l()));
        sb.append(getFkey05f());
        sb.append(OFFILLER107);
        sb.append(getFkey05i());
        sb.append(String.valueOf(getFkey12l()));
        sb.append(getFkey12f());
        sb.append(OFFILLER109);
        sb.append(getFkey12i());
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER2 {
        // [T-Up#INFO][COACTUP.CPY, LINE #23] TRNNAMEA (level: 3)
        private @Getter String trnnamea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(trnnamea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(trnnamea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER4 {
        // [T-Up#INFO][COACTUP.CPY, LINE #29] TITLE01A (level: 3)
        private @Getter String title01a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(title01a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(title01a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER6 {
        // [T-Up#INFO][COACTUP.CPY, LINE #35] CURDATEA (level: 3)
        private @Getter String curdatea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(curdatea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(curdatea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER8 {
        // [T-Up#INFO][COACTUP.CPY, LINE #41] PGMNAMEA (level: 3)
        private @Getter String pgmnamea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(pgmnamea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(pgmnamea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER10 {
        // [T-Up#INFO][COACTUP.CPY, LINE #47] TITLE02A (level: 3)
        private @Getter String title02a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(title02a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(title02a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER12 {
        // [T-Up#INFO][COACTUP.CPY, LINE #53] CURTIMEA (level: 3)
        private @Getter String curtimea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(curtimea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(curtimea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER14 {
        // [T-Up#INFO][COACTUP.CPY, LINE #59] ACCTSIDA (level: 3)
        private @Getter String acctsida = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acctsida);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acctsida);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER16 {
        // [T-Up#INFO][COACTUP.CPY, LINE #65] ACSTTUSA (level: 3)
        private @Getter String acsttusa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsttusa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsttusa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER18 {
        // [T-Up#INFO][COACTUP.CPY, LINE #71] OPNYEARA (level: 3)
        private @Getter String opnyeara = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(opnyeara);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(opnyeara);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER20 {
        // [T-Up#INFO][COACTUP.CPY, LINE #77] OPNMONA (level: 3)
        private @Getter String opnmona = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(opnmona);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(opnmona);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER22 {
        // [T-Up#INFO][COACTUP.CPY, LINE #83] OPNDAYA (level: 3)
        private @Getter String opndaya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(opndaya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(opndaya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER24 {
        // [T-Up#INFO][COACTUP.CPY, LINE #89] ACRDLIMA (level: 3)
        private @Getter String acrdlima = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrdlima);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrdlima);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER26 {
        // [T-Up#INFO][COACTUP.CPY, LINE #95] EXPYEARA (level: 3)
        private @Getter String expyeara = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(expyeara);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(expyeara);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER28 {
        // [T-Up#INFO][COACTUP.CPY, LINE #101] EXPMONA (level: 3)
        private @Getter String expmona = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(expmona);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(expmona);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER30 {
        // [T-Up#INFO][COACTUP.CPY, LINE #107] EXPDAYA (level: 3)
        private @Getter String expdaya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(expdaya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(expdaya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER32 {
        // [T-Up#INFO][COACTUP.CPY, LINE #113] ACSHLIMA (level: 3)
        private @Getter String acshlima = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acshlima);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acshlima);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER34 {
        // [T-Up#INFO][COACTUP.CPY, LINE #119] RISYEARA (level: 3)
        private @Getter String risyeara = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(risyeara);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(risyeara);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER36 {
        // [T-Up#INFO][COACTUP.CPY, LINE #125] RISMONA (level: 3)
        private @Getter String rismona = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(rismona);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(rismona);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER38 {
        // [T-Up#INFO][COACTUP.CPY, LINE #131] RISDAYA (level: 3)
        private @Getter String risdaya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(risdaya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(risdaya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER40 {
        // [T-Up#INFO][COACTUP.CPY, LINE #137] ACURBALA (level: 3)
        private @Getter String acurbala = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acurbala);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acurbala);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER42 {
        // [T-Up#INFO][COACTUP.CPY, LINE #143] ACRCYCRA (level: 3)
        private @Getter String acrcycra = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcycra);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcycra);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER44 {
        // [T-Up#INFO][COACTUP.CPY, LINE #149] AADDGRPA (level: 3)
        private @Getter String aaddgrpa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(aaddgrpa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(aaddgrpa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER46 {
        // [T-Up#INFO][COACTUP.CPY, LINE #155] ACRCYDBA (level: 3)
        private @Getter String acrcydba = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcydba);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcydba);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER48 {
        // [T-Up#INFO][COACTUP.CPY, LINE #161] ACSTNUMA (level: 3)
        private @Getter String acstnuma = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstnuma);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstnuma);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER50 {
        // [T-Up#INFO][COACTUP.CPY, LINE #167] ACTSSN1A (level: 3)
        private @Getter String actssn1a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(actssn1a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(actssn1a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER52 {
        // [T-Up#INFO][COACTUP.CPY, LINE #173] ACTSSN2A (level: 3)
        private @Getter String actssn2a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(actssn2a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(actssn2a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER54 {
        // [T-Up#INFO][COACTUP.CPY, LINE #179] ACTSSN3A (level: 3)
        private @Getter String actssn3a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(actssn3a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(actssn3a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER56 {
        // [T-Up#INFO][COACTUP.CPY, LINE #185] DOBYEARA (level: 3)
        private @Getter String dobyeara = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(dobyeara);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(dobyeara);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER58 {
        // [T-Up#INFO][COACTUP.CPY, LINE #191] DOBMONA (level: 3)
        private @Getter String dobmona = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(dobmona);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(dobmona);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER60 {
        // [T-Up#INFO][COACTUP.CPY, LINE #197] DOBDAYA (level: 3)
        private @Getter String dobdaya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(dobdaya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(dobdaya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER62 {
        // [T-Up#INFO][COACTUP.CPY, LINE #203] ACSTFCOA (level: 3)
        private @Getter String acstfcoa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstfcoa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstfcoa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER64 {
        // [T-Up#INFO][COACTUP.CPY, LINE #209] ACSFNAMA (level: 3)
        private @Getter String acsfnama = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsfnama);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsfnama);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER66 {
        // [T-Up#INFO][COACTUP.CPY, LINE #215] ACSMNAMA (level: 3)
        private @Getter String acsmnama = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsmnama);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsmnama);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER68 {
        // [T-Up#INFO][COACTUP.CPY, LINE #221] ACSLNAMA (level: 3)
        private @Getter String acslnama = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acslnama);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acslnama);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER70 {
        // [T-Up#INFO][COACTUP.CPY, LINE #227] ACSADL1A (level: 3)
        private @Getter String acsadl1a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl1a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl1a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER72 {
        // [T-Up#INFO][COACTUP.CPY, LINE #233] ACSSTTEA (level: 3)
        private @Getter String acssttea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acssttea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acssttea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER74 {
        // [T-Up#INFO][COACTUP.CPY, LINE #239] ACSADL2A (level: 3)
        private @Getter String acsadl2a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl2a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl2a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER76 {
        // [T-Up#INFO][COACTUP.CPY, LINE #245] ACSZIPCA (level: 3)
        private @Getter String acszipca = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acszipca);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acszipca);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER78 {
        // [T-Up#INFO][COACTUP.CPY, LINE #251] ACSCITYA (level: 3)
        private @Getter String acscitya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acscitya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acscitya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER80 {
        // [T-Up#INFO][COACTUP.CPY, LINE #257] ACSCTRYA (level: 3)
        private @Getter String acsctrya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsctrya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsctrya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER82 {
        // [T-Up#INFO][COACTUP.CPY, LINE #263] ACSPH1AA (level: 3)
        private @Getter String acsph1aa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph1aa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph1aa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER84 {
        // [T-Up#INFO][COACTUP.CPY, LINE #269] ACSPH1BA (level: 3)
        private @Getter String acsph1ba = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph1ba);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph1ba);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER86 {
        // [T-Up#INFO][COACTUP.CPY, LINE #275] ACSPH1CA (level: 3)
        private @Getter String acsph1ca = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph1ca);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph1ca);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER88 {
        // [T-Up#INFO][COACTUP.CPY, LINE #281] ACSGOVTA (level: 3)
        private @Getter String acsgovta = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsgovta);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsgovta);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER90 {
        // [T-Up#INFO][COACTUP.CPY, LINE #287] ACSPH2AA (level: 3)
        private @Getter String acsph2aa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph2aa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph2aa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER92 {
        // [T-Up#INFO][COACTUP.CPY, LINE #293] ACSPH2BA (level: 3)
        private @Getter String acsph2ba = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph2ba);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph2ba);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER94 {
        // [T-Up#INFO][COACTUP.CPY, LINE #299] ACSPH2CA (level: 3)
        private @Getter String acsph2ca = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph2ca);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsph2ca);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER96 {
        // [T-Up#INFO][COACTUP.CPY, LINE #305] ACSEFTCA (level: 3)
        private @Getter String acseftca = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acseftca);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acseftca);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER98 {
        // [T-Up#INFO][COACTUP.CPY, LINE #311] ACSPFLGA (level: 3)
        private @Getter String acspflga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acspflga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acspflga);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER100 {
        // [T-Up#INFO][COACTUP.CPY, LINE #317] INFOMSGA (level: 3)
        private @Getter String infomsga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(infomsga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(infomsga);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER102 {
        // [T-Up#INFO][COACTUP.CPY, LINE #323] ERRMSGA (level: 3)
        private @Getter String errmsga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(errmsga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(errmsga);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER104 {
        // [T-Up#INFO][COACTUP.CPY, LINE #329] FKEYSA (level: 3)
        private @Getter String fkeysa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkeysa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkeysa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER106 {
        // [T-Up#INFO][COACTUP.CPY, LINE #335] FKEY05A (level: 3)
        private @Getter String fkey05a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkey05a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkey05a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER108 {
        // [T-Up#INFO][COACTUP.CPY, LINE #341] FKEY12A (level: 3)
        private @Getter String fkey12a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkey12a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(fkey12a);
            return sb.toString();
        }
    }
}
