package aws.carddemo.mapper;

import com.tmax.openframe.DataConverter;
import org.apache.commons.lang3.StringUtils;
import org.mapstruct.*;
import org.mapstruct.factory.*;
import aws.carddemo.variable.group.Cbact02cFdCardfileRec;
import aws.carddemo.dto.AwsM2CarddemoCarddataVsamKsdsDto;
import lombok.*;
import java.math.*;
import java.util.*;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:55 UTC</p>
 * <hr>
 * <p>Mapper class for converting data between different classes</p>
 */
public interface Cbact02cMapperInterface {
    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbact02cFdCardfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoCarddataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact02cFdCardfileRecToAwsM2CarddemoCarddataVsamKsdsDto {
        Cbact02cFdCardfileRecToAwsM2CarddemoCarddataVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact02cFdCardfileRecToAwsM2CarddemoCarddataVsamKsdsDto.class);

        @Mapping(source = "fdCardNum", target = "cardNum")
        AwsM2CarddemoCarddataVsamKsdsDto toTarget(Cbact02cFdCardfileRec source);

        @Mapping(source = "cardNum", target = "fdCardNum")
        Cbact02cFdCardfileRec toSource(AwsM2CarddemoCarddataVsamKsdsDto source);

        @AfterMapping
        default void makeTarget(Cbact02cFdCardfileRec source,
                @MappingTarget AwsM2CarddemoCarddataVsamKsdsDto target) {
            target.setCardAcctId(DataConverter.convZonedStringToBigDecimal(
                    source.getFdCardData().substring(0, 11), 11, 0));
            target.setCardCvvCd(DataConverter.convZonedStringToBigDecimal(
                    source.getFdCardData().substring(11, 14), 3, 0));
            target.setCardEmbossedName(source.getFdCardData().substring(14, 64));
            target.setCardExpiraionDate(source.getFdCardData()
                    .substring(64, 74));
            target.setCardActiveStatus(source.getFdCardData().substring(74, 75));
            target.setFiller(source.getFdCardData().substring(75));
        }

        @AfterMapping
        default void makeSource(AwsM2CarddemoCarddataVsamKsdsDto source,
                @MappingTarget Cbact02cFdCardfileRec target) {
            target.setFdCardData(DataConverter.convZonedBigDecimalToString(
                    source.getCardAcctId(), 11, 0)
                    + DataConverter.convZonedBigDecimalToString(
                            source.getCardCvvCd(), 3, 0)
                    + source.getCardEmbossedName()
                    + source.getCardExpiraionDate()
                    + source.getCardActiveStatus() + source.getFiller());
        }
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbact02cFdCardfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoCarddataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbact02cFdCardfileRecKeyToAwsM2CarddemoCarddataVsamKsdsDto {
        Cbact02cFdCardfileRecKeyToAwsM2CarddemoCarddataVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbact02cFdCardfileRecKeyToAwsM2CarddemoCarddataVsamKsdsDto.class);

        @Mapping(source = "fdCardNum", target = "cardNum")
        AwsM2CarddemoCarddataVsamKsdsDto toTarget(Cbact02cFdCardfileRec source);
    }
}
