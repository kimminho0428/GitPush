package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import lombok.experimental.Accessors;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:51 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class CocrdlicVariableContainer {
    // [T-Up#INFO][COCRDLIC.cbl, LINE #41] WS-MISC-STORAGE (level: 1)
    private @Getter @Setter CocrdlicWsMiscStorage wsMiscStorage = new CocrdlicWsMiscStorage();
    // ******************************************************************
    // * Literals and Constants                                          
    // ******************************************************************
    // [T-Up#INFO][COCRDLIC.cbl, LINE #175] WS-CONSTANTS (level: 1)
    private @Getter @Setter CocrdlicWsConstants wsConstants = new CocrdlicWsConstants();
    // ******************************************************************
    // *Other common working storage Variables                           
    // ******************************************************************
    //       *COPY CVCRD01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVCRD01Y.cpy)
    // [T-Up#INFO][CVCRD01Y.cpy, LINE #2] CC-WORK-AREAS (level: 1)
    private @Getter @Setter CocrdlicCcWorkAreas ccWorkAreas = new CocrdlicCcWorkAreas();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // ******************************************************************
    // *  Commarea manipulations                                         
    // ******************************************************************
    // *Application Commmarea Copybook                                   
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter CocrdlicCarddemoCommarea carddemoCommarea = new CocrdlicCarddemoCommarea();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT 
    // *                                                                 
    // [T-Up#INFO][COCRDLIC.cbl, LINE #228] WS-THIS-PROGCOMMAREA (level: 1)
    private @Getter @Setter CocrdlicWsThisProgcommarea wsThisProgcommarea = new CocrdlicWsThisProgcommarea();
    // [T-Up#INFO][COCRDLIC.cbl, LINE #259] WS-COMMAREA (level: 1)
    private @Getter String wsCommarea = StringUtils.repeat(' ', 2000);
    // *IBM SUPPLIED COPYBOOKS                                           
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter CocrdlicDfhbmsca dfhbmsca = new CocrdlicDfhbmsca();
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter CocrdlicDfhaid dfhaid = new CocrdlicDfhaid();
    // *COMMON COPYBOOKS                                                 
    // *Screen Titles                                                    
    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter CocrdlicCcdaScreenTitle ccdaScreenTitle = new CocrdlicCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Credit Card Search Screen Layout                                 
    // *COPY COCRDSL.                                                    
    // *Credit Card List Screen Layout                                   
    //       *COPY COCRDLI.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCRDLI.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCRDLI.CPY, LINE #18] CCRDLIAI (level: 1)
    private @Getter @Setter CocrdlicCcrdliai ccrdliai = new CocrdlicCcrdliai();

    public CocrdlicCcrdliao getCcrdliao() {
        return new CocrdlicCcrdliao().setOFFILLER1(getOFFILLER1())
                .setOFFILLER2(getOFFILLER2()).setTrnnamec(getTrnnamec())
                .setTrnnamep(getTrnnamep()).setTrnnameh(getTrnnameh())
                .setTrnnamev(getTrnnamev()).setTrnnameo(getTrnnameo())
                .setOFFILLER3(getOFFILLER3()).setTitle01c(getTitle01c())
                .setTitle01p(getTitle01p()).setTitle01h(getTitle01h())
                .setTitle01v(getTitle01v()).setTitle01o(getTitle01o())
                .setOFFILLER4(getOFFILLER4()).setCurdatec(getCurdatec())
                .setCurdatep(getCurdatep()).setCurdateh(getCurdateh())
                .setCurdatev(getCurdatev()).setCurdateo(getCurdateo())
                .setOFFILLER5(getOFFILLER5()).setPgmnamec(getPgmnamec())
                .setPgmnamep(getPgmnamep()).setPgmnameh(getPgmnameh())
                .setPgmnamev(getPgmnamev()).setPgmnameo(getPgmnameo())
                .setOFFILLER6(getOFFILLER6()).setTitle02c(getTitle02c())
                .setTitle02p(getTitle02p()).setTitle02h(getTitle02h())
                .setTitle02v(getTitle02v()).setTitle02o(getTitle02o())
                .setOFFILLER7(getOFFILLER7()).setCurtimec(getCurtimec())
                .setCurtimep(getCurtimep()).setCurtimeh(getCurtimeh())
                .setCurtimev(getCurtimev()).setCurtimeo(getCurtimeo())
                .setOFFILLER8(getOFFILLER8()).setPagenoc(getPagenoc())
                .setPagenop(getPagenop()).setPagenoh(getPagenoh())
                .setPagenov(getPagenov()).setPagenoo(getPagenoo())
                .setOFFILLER9(getOFFILLER9()).setAcctsidc(getAcctsidc())
                .setAcctsidp(getAcctsidp()).setAcctsidh(getAcctsidh())
                .setAcctsidv(getAcctsidv()).setAcctsido(getAcctsido())
                .setOFFILLER10(getOFFILLER10()).setCardsidc(getCardsidc())
                .setCardsidp(getCardsidp()).setCardsidh(getCardsidh())
                .setCardsidv(getCardsidv()).setCardsido(getCardsido())
                .setOFFILLER11(getOFFILLER11()).setCrdsel1c(getCrdsel1c())
                .setCrdsel1p(getCrdsel1p()).setCrdsel1h(getCrdsel1h())
                .setCrdsel1v(getCrdsel1v()).setCrdsel1o(getCrdsel1o())
                .setOFFILLER12(getOFFILLER12()).setAcctno1c(getAcctno1c())
                .setAcctno1p(getAcctno1p()).setAcctno1h(getAcctno1h())
                .setAcctno1v(getAcctno1v()).setAcctno1o(getAcctno1o())
                .setOFFILLER13(getOFFILLER13()).setCrdnum1c(getCrdnum1c())
                .setCrdnum1p(getCrdnum1p()).setCrdnum1h(getCrdnum1h())
                .setCrdnum1v(getCrdnum1v()).setCrdnum1o(getCrdnum1o())
                .setOFFILLER14(getOFFILLER14()).setCrdsts1c(getCrdsts1c())
                .setCrdsts1p(getCrdsts1p()).setCrdsts1h(getCrdsts1h())
                .setCrdsts1v(getCrdsts1v()).setCrdsts1o(getCrdsts1o())
                .setOFFILLER15(getOFFILLER15()).setCrdsel2c(getCrdsel2c())
                .setCrdsel2p(getCrdsel2p()).setCrdsel2h(getCrdsel2h())
                .setCrdsel2v(getCrdsel2v()).setCrdsel2o(getCrdsel2o())
                .setOFFILLER16(getOFFILLER16()).setCrdstp2c(getCrdstp2c())
                .setCrdstp2p(getCrdstp2p()).setCrdstp2h(getCrdstp2h())
                .setCrdstp2v(getCrdstp2v()).setCrdstp2o(getCrdstp2o())
                .setOFFILLER17(getOFFILLER17()).setAcctno2c(getAcctno2c())
                .setAcctno2p(getAcctno2p()).setAcctno2h(getAcctno2h())
                .setAcctno2v(getAcctno2v()).setAcctno2o(getAcctno2o())
                .setOFFILLER18(getOFFILLER18()).setCrdnum2c(getCrdnum2c())
                .setCrdnum2p(getCrdnum2p()).setCrdnum2h(getCrdnum2h())
                .setCrdnum2v(getCrdnum2v()).setCrdnum2o(getCrdnum2o())
                .setOFFILLER19(getOFFILLER19()).setCrdsts2c(getCrdsts2c())
                .setCrdsts2p(getCrdsts2p()).setCrdsts2h(getCrdsts2h())
                .setCrdsts2v(getCrdsts2v()).setCrdsts2o(getCrdsts2o())
                .setOFFILLER20(getOFFILLER20()).setCrdsel3c(getCrdsel3c())
                .setCrdsel3p(getCrdsel3p()).setCrdsel3h(getCrdsel3h())
                .setCrdsel3v(getCrdsel3v()).setCrdsel3o(getCrdsel3o())
                .setOFFILLER21(getOFFILLER21()).setCrdstp3c(getCrdstp3c())
                .setCrdstp3p(getCrdstp3p()).setCrdstp3h(getCrdstp3h())
                .setCrdstp3v(getCrdstp3v()).setCrdstp3o(getCrdstp3o())
                .setOFFILLER22(getOFFILLER22()).setAcctno3c(getAcctno3c())
                .setAcctno3p(getAcctno3p()).setAcctno3h(getAcctno3h())
                .setAcctno3v(getAcctno3v()).setAcctno3o(getAcctno3o())
                .setOFFILLER23(getOFFILLER23()).setCrdnum3c(getCrdnum3c())
                .setCrdnum3p(getCrdnum3p()).setCrdnum3h(getCrdnum3h())
                .setCrdnum3v(getCrdnum3v()).setCrdnum3o(getCrdnum3o())
                .setOFFILLER24(getOFFILLER24()).setCrdsts3c(getCrdsts3c())
                .setCrdsts3p(getCrdsts3p()).setCrdsts3h(getCrdsts3h())
                .setCrdsts3v(getCrdsts3v()).setCrdsts3o(getCrdsts3o())
                .setOFFILLER25(getOFFILLER25()).setCrdsel4c(getCrdsel4c())
                .setCrdsel4p(getCrdsel4p()).setCrdsel4h(getCrdsel4h())
                .setCrdsel4v(getCrdsel4v()).setCrdsel4o(getCrdsel4o())
                .setOFFILLER26(getOFFILLER26()).setCrdstp4c(getCrdstp4c())
                .setCrdstp4p(getCrdstp4p()).setCrdstp4h(getCrdstp4h())
                .setCrdstp4v(getCrdstp4v()).setCrdstp4o(getCrdstp4o())
                .setOFFILLER27(getOFFILLER27()).setAcctno4c(getAcctno4c())
                .setAcctno4p(getAcctno4p()).setAcctno4h(getAcctno4h())
                .setAcctno4v(getAcctno4v()).setAcctno4o(getAcctno4o())
                .setOFFILLER28(getOFFILLER28()).setCrdnum4c(getCrdnum4c())
                .setCrdnum4p(getCrdnum4p()).setCrdnum4h(getCrdnum4h())
                .setCrdnum4v(getCrdnum4v()).setCrdnum4o(getCrdnum4o())
                .setOFFILLER29(getOFFILLER29()).setCrdsts4c(getCrdsts4c())
                .setCrdsts4p(getCrdsts4p()).setCrdsts4h(getCrdsts4h())
                .setCrdsts4v(getCrdsts4v()).setCrdsts4o(getCrdsts4o())
                .setOFFILLER30(getOFFILLER30()).setCrdsel5c(getCrdsel5c())
                .setCrdsel5p(getCrdsel5p()).setCrdsel5h(getCrdsel5h())
                .setCrdsel5v(getCrdsel5v()).setCrdsel5o(getCrdsel5o())
                .setOFFILLER31(getOFFILLER31()).setCrdstp5c(getCrdstp5c())
                .setCrdstp5p(getCrdstp5p()).setCrdstp5h(getCrdstp5h())
                .setCrdstp5v(getCrdstp5v()).setCrdstp5o(getCrdstp5o())
                .setOFFILLER32(getOFFILLER32()).setAcctno5c(getAcctno5c())
                .setAcctno5p(getAcctno5p()).setAcctno5h(getAcctno5h())
                .setAcctno5v(getAcctno5v()).setAcctno5o(getAcctno5o())
                .setOFFILLER33(getOFFILLER33()).setCrdnum5c(getCrdnum5c())
                .setCrdnum5p(getCrdnum5p()).setCrdnum5h(getCrdnum5h())
                .setCrdnum5v(getCrdnum5v()).setCrdnum5o(getCrdnum5o())
                .setOFFILLER34(getOFFILLER34()).setCrdsts5c(getCrdsts5c())
                .setCrdsts5p(getCrdsts5p()).setCrdsts5h(getCrdsts5h())
                .setCrdsts5v(getCrdsts5v()).setCrdsts5o(getCrdsts5o())
                .setOFFILLER35(getOFFILLER35()).setCrdsel6c(getCrdsel6c())
                .setCrdsel6p(getCrdsel6p()).setCrdsel6h(getCrdsel6h())
                .setCrdsel6v(getCrdsel6v()).setCrdsel6o(getCrdsel6o())
                .setOFFILLER36(getOFFILLER36()).setCrdstp6c(getCrdstp6c())
                .setCrdstp6p(getCrdstp6p()).setCrdstp6h(getCrdstp6h())
                .setCrdstp6v(getCrdstp6v()).setCrdstp6o(getCrdstp6o())
                .setOFFILLER37(getOFFILLER37()).setAcctno6c(getAcctno6c())
                .setAcctno6p(getAcctno6p()).setAcctno6h(getAcctno6h())
                .setAcctno6v(getAcctno6v()).setAcctno6o(getAcctno6o())
                .setOFFILLER38(getOFFILLER38()).setCrdnum6c(getCrdnum6c())
                .setCrdnum6p(getCrdnum6p()).setCrdnum6h(getCrdnum6h())
                .setCrdnum6v(getCrdnum6v()).setCrdnum6o(getCrdnum6o())
                .setOFFILLER39(getOFFILLER39()).setCrdsts6c(getCrdsts6c())
                .setCrdsts6p(getCrdsts6p()).setCrdsts6h(getCrdsts6h())
                .setCrdsts6v(getCrdsts6v()).setCrdsts6o(getCrdsts6o())
                .setOFFILLER40(getOFFILLER40()).setCrdsel7c(getCrdsel7c())
                .setCrdsel7p(getCrdsel7p()).setCrdsel7h(getCrdsel7h())
                .setCrdsel7v(getCrdsel7v()).setCrdsel7o(getCrdsel7o())
                .setOFFILLER41(getOFFILLER41()).setCrdstp7c(getCrdstp7c())
                .setCrdstp7p(getCrdstp7p()).setCrdstp7h(getCrdstp7h())
                .setCrdstp7v(getCrdstp7v()).setCrdstp7o(getCrdstp7o())
                .setOFFILLER42(getOFFILLER42()).setAcctno7c(getAcctno7c())
                .setAcctno7p(getAcctno7p()).setAcctno7h(getAcctno7h())
                .setAcctno7v(getAcctno7v()).setAcctno7o(getAcctno7o())
                .setOFFILLER43(getOFFILLER43()).setCrdnum7c(getCrdnum7c())
                .setCrdnum7p(getCrdnum7p()).setCrdnum7h(getCrdnum7h())
                .setCrdnum7v(getCrdnum7v()).setCrdnum7o(getCrdnum7o())
                .setOFFILLER44(getOFFILLER44()).setCrdsts7c(getCrdsts7c())
                .setCrdsts7p(getCrdsts7p()).setCrdsts7h(getCrdsts7h())
                .setCrdsts7v(getCrdsts7v()).setCrdsts7o(getCrdsts7o())
                .setOFFILLER45(getOFFILLER45()).setInfomsgc(getInfomsgc())
                .setInfomsgp(getInfomsgp()).setInfomsgh(getInfomsgh())
                .setInfomsgv(getInfomsgv()).setInfomsgo(getInfomsgo())
                .setOFFILLER46(getOFFILLER46()).setErrmsgc(getErrmsgc())
                .setErrmsgp(getErrmsgp()).setErrmsgh(getErrmsgh())
                .setErrmsgv(getErrmsgv()).setErrmsgo(getErrmsgo());
    }

    public void setCcrdliao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setPagenoc(source.substring(165, 166));
        setPagenop(source.substring(166, 167));
        setPagenoh(source.substring(167, 168));
        setPagenov(source.substring(168, 169));
        setPagenoo(source.substring(169, 172));
        setOFFILLER9(source.substring(172, 175));
        setAcctsidc(source.substring(175, 176));
        setAcctsidp(source.substring(176, 177));
        setAcctsidh(source.substring(177, 178));
        setAcctsidv(source.substring(178, 179));
        setAcctsido(source.substring(179, 190));
        setOFFILLER10(source.substring(190, 193));
        setCardsidc(source.substring(193, 194));
        setCardsidp(source.substring(194, 195));
        setCardsidh(source.substring(195, 196));
        setCardsidv(source.substring(196, 197));
        setCardsido(source.substring(197, 213));
        setOFFILLER11(source.substring(213, 216));
        setCrdsel1c(source.substring(216, 217));
        setCrdsel1p(source.substring(217, 218));
        setCrdsel1h(source.substring(218, 219));
        setCrdsel1v(source.substring(219, 220));
        setCrdsel1o(source.substring(220, 221));
        setOFFILLER12(source.substring(221, 224));
        setAcctno1c(source.substring(224, 225));
        setAcctno1p(source.substring(225, 226));
        setAcctno1h(source.substring(226, 227));
        setAcctno1v(source.substring(227, 228));
        setAcctno1o(source.substring(228, 239));
        setOFFILLER13(source.substring(239, 242));
        setCrdnum1c(source.substring(242, 243));
        setCrdnum1p(source.substring(243, 244));
        setCrdnum1h(source.substring(244, 245));
        setCrdnum1v(source.substring(245, 246));
        setCrdnum1o(source.substring(246, 262));
        setOFFILLER14(source.substring(262, 265));
        setCrdsts1c(source.substring(265, 266));
        setCrdsts1p(source.substring(266, 267));
        setCrdsts1h(source.substring(267, 268));
        setCrdsts1v(source.substring(268, 269));
        setCrdsts1o(source.substring(269, 270));
        setOFFILLER15(source.substring(270, 273));
        setCrdsel2c(source.substring(273, 274));
        setCrdsel2p(source.substring(274, 275));
        setCrdsel2h(source.substring(275, 276));
        setCrdsel2v(source.substring(276, 277));
        setCrdsel2o(source.substring(277, 278));
        setOFFILLER16(source.substring(278, 281));
        setCrdstp2c(source.substring(281, 282));
        setCrdstp2p(source.substring(282, 283));
        setCrdstp2h(source.substring(283, 284));
        setCrdstp2v(source.substring(284, 285));
        setCrdstp2o(source.substring(285, 286));
        setOFFILLER17(source.substring(286, 289));
        setAcctno2c(source.substring(289, 290));
        setAcctno2p(source.substring(290, 291));
        setAcctno2h(source.substring(291, 292));
        setAcctno2v(source.substring(292, 293));
        setAcctno2o(source.substring(293, 304));
        setOFFILLER18(source.substring(304, 307));
        setCrdnum2c(source.substring(307, 308));
        setCrdnum2p(source.substring(308, 309));
        setCrdnum2h(source.substring(309, 310));
        setCrdnum2v(source.substring(310, 311));
        setCrdnum2o(source.substring(311, 327));
        setOFFILLER19(source.substring(327, 330));
        setCrdsts2c(source.substring(330, 331));
        setCrdsts2p(source.substring(331, 332));
        setCrdsts2h(source.substring(332, 333));
        setCrdsts2v(source.substring(333, 334));
        setCrdsts2o(source.substring(334, 335));
        setOFFILLER20(source.substring(335, 338));
        setCrdsel3c(source.substring(338, 339));
        setCrdsel3p(source.substring(339, 340));
        setCrdsel3h(source.substring(340, 341));
        setCrdsel3v(source.substring(341, 342));
        setCrdsel3o(source.substring(342, 343));
        setOFFILLER21(source.substring(343, 346));
        setCrdstp3c(source.substring(346, 347));
        setCrdstp3p(source.substring(347, 348));
        setCrdstp3h(source.substring(348, 349));
        setCrdstp3v(source.substring(349, 350));
        setCrdstp3o(source.substring(350, 351));
        setOFFILLER22(source.substring(351, 354));
        setAcctno3c(source.substring(354, 355));
        setAcctno3p(source.substring(355, 356));
        setAcctno3h(source.substring(356, 357));
        setAcctno3v(source.substring(357, 358));
        setAcctno3o(source.substring(358, 369));
        setOFFILLER23(source.substring(369, 372));
        setCrdnum3c(source.substring(372, 373));
        setCrdnum3p(source.substring(373, 374));
        setCrdnum3h(source.substring(374, 375));
        setCrdnum3v(source.substring(375, 376));
        setCrdnum3o(source.substring(376, 392));
        setOFFILLER24(source.substring(392, 395));
        setCrdsts3c(source.substring(395, 396));
        setCrdsts3p(source.substring(396, 397));
        setCrdsts3h(source.substring(397, 398));
        setCrdsts3v(source.substring(398, 399));
        setCrdsts3o(source.substring(399, 400));
        setOFFILLER25(source.substring(400, 403));
        setCrdsel4c(source.substring(403, 404));
        setCrdsel4p(source.substring(404, 405));
        setCrdsel4h(source.substring(405, 406));
        setCrdsel4v(source.substring(406, 407));
        setCrdsel4o(source.substring(407, 408));
        setOFFILLER26(source.substring(408, 411));
        setCrdstp4c(source.substring(411, 412));
        setCrdstp4p(source.substring(412, 413));
        setCrdstp4h(source.substring(413, 414));
        setCrdstp4v(source.substring(414, 415));
        setCrdstp4o(source.substring(415, 416));
        setOFFILLER27(source.substring(416, 419));
        setAcctno4c(source.substring(419, 420));
        setAcctno4p(source.substring(420, 421));
        setAcctno4h(source.substring(421, 422));
        setAcctno4v(source.substring(422, 423));
        setAcctno4o(source.substring(423, 434));
        setOFFILLER28(source.substring(434, 437));
        setCrdnum4c(source.substring(437, 438));
        setCrdnum4p(source.substring(438, 439));
        setCrdnum4h(source.substring(439, 440));
        setCrdnum4v(source.substring(440, 441));
        setCrdnum4o(source.substring(441, 457));
        setOFFILLER29(source.substring(457, 460));
        setCrdsts4c(source.substring(460, 461));
        setCrdsts4p(source.substring(461, 462));
        setCrdsts4h(source.substring(462, 463));
        setCrdsts4v(source.substring(463, 464));
        setCrdsts4o(source.substring(464, 465));
        setOFFILLER30(source.substring(465, 468));
        setCrdsel5c(source.substring(468, 469));
        setCrdsel5p(source.substring(469, 470));
        setCrdsel5h(source.substring(470, 471));
        setCrdsel5v(source.substring(471, 472));
        setCrdsel5o(source.substring(472, 473));
        setOFFILLER31(source.substring(473, 476));
        setCrdstp5c(source.substring(476, 477));
        setCrdstp5p(source.substring(477, 478));
        setCrdstp5h(source.substring(478, 479));
        setCrdstp5v(source.substring(479, 480));
        setCrdstp5o(source.substring(480, 481));
        setOFFILLER32(source.substring(481, 484));
        setAcctno5c(source.substring(484, 485));
        setAcctno5p(source.substring(485, 486));
        setAcctno5h(source.substring(486, 487));
        setAcctno5v(source.substring(487, 488));
        setAcctno5o(source.substring(488, 499));
        setOFFILLER33(source.substring(499, 502));
        setCrdnum5c(source.substring(502, 503));
        setCrdnum5p(source.substring(503, 504));
        setCrdnum5h(source.substring(504, 505));
        setCrdnum5v(source.substring(505, 506));
        setCrdnum5o(source.substring(506, 522));
        setOFFILLER34(source.substring(522, 525));
        setCrdsts5c(source.substring(525, 526));
        setCrdsts5p(source.substring(526, 527));
        setCrdsts5h(source.substring(527, 528));
        setCrdsts5v(source.substring(528, 529));
        setCrdsts5o(source.substring(529, 530));
        setOFFILLER35(source.substring(530, 533));
        setCrdsel6c(source.substring(533, 534));
        setCrdsel6p(source.substring(534, 535));
        setCrdsel6h(source.substring(535, 536));
        setCrdsel6v(source.substring(536, 537));
        setCrdsel6o(source.substring(537, 538));
        setOFFILLER36(source.substring(538, 541));
        setCrdstp6c(source.substring(541, 542));
        setCrdstp6p(source.substring(542, 543));
        setCrdstp6h(source.substring(543, 544));
        setCrdstp6v(source.substring(544, 545));
        setCrdstp6o(source.substring(545, 546));
        setOFFILLER37(source.substring(546, 549));
        setAcctno6c(source.substring(549, 550));
        setAcctno6p(source.substring(550, 551));
        setAcctno6h(source.substring(551, 552));
        setAcctno6v(source.substring(552, 553));
        setAcctno6o(source.substring(553, 564));
        setOFFILLER38(source.substring(564, 567));
        setCrdnum6c(source.substring(567, 568));
        setCrdnum6p(source.substring(568, 569));
        setCrdnum6h(source.substring(569, 570));
        setCrdnum6v(source.substring(570, 571));
        setCrdnum6o(source.substring(571, 587));
        setOFFILLER39(source.substring(587, 590));
        setCrdsts6c(source.substring(590, 591));
        setCrdsts6p(source.substring(591, 592));
        setCrdsts6h(source.substring(592, 593));
        setCrdsts6v(source.substring(593, 594));
        setCrdsts6o(source.substring(594, 595));
        setOFFILLER40(source.substring(595, 598));
        setCrdsel7c(source.substring(598, 599));
        setCrdsel7p(source.substring(599, 600));
        setCrdsel7h(source.substring(600, 601));
        setCrdsel7v(source.substring(601, 602));
        setCrdsel7o(source.substring(602, 603));
        setOFFILLER41(source.substring(603, 606));
        setCrdstp7c(source.substring(606, 607));
        setCrdstp7p(source.substring(607, 608));
        setCrdstp7h(source.substring(608, 609));
        setCrdstp7v(source.substring(609, 610));
        setCrdstp7o(source.substring(610, 611));
        setOFFILLER42(source.substring(611, 614));
        setAcctno7c(source.substring(614, 615));
        setAcctno7p(source.substring(615, 616));
        setAcctno7h(source.substring(616, 617));
        setAcctno7v(source.substring(617, 618));
        setAcctno7o(source.substring(618, 629));
        setOFFILLER43(source.substring(629, 632));
        setCrdnum7c(source.substring(632, 633));
        setCrdnum7p(source.substring(633, 634));
        setCrdnum7h(source.substring(634, 635));
        setCrdnum7v(source.substring(635, 636));
        setCrdnum7o(source.substring(636, 652));
        setOFFILLER44(source.substring(652, 655));
        setCrdsts7c(source.substring(655, 656));
        setCrdsts7p(source.substring(656, 657));
        setCrdsts7h(source.substring(657, 658));
        setCrdsts7v(source.substring(658, 659));
        setCrdsts7o(source.substring(659, 660));
        setOFFILLER45(source.substring(660, 663));
        setInfomsgc(source.substring(663, 664));
        setInfomsgp(source.substring(664, 665));
        setInfomsgh(source.substring(665, 666));
        setInfomsgv(source.substring(666, 667));
        setInfomsgo(source.substring(667, 712));
        setOFFILLER46(source.substring(712, 715));
        setErrmsgc(source.substring(715, 716));
        setErrmsgp(source.substring(716, 717));
        setErrmsgh(source.substring(717, 718));
        setErrmsgv(source.substring(718, 719));
        setErrmsgo(source.substring(719, 797));
    }

    public void setCcrdliao(CocrdlicCcrdliao source) {
        setCcrdliao(source.toString());
    }

    public String getOFFILLER1() {
        return getCcrdliai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCcrdliai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCcrdliai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCcrdliai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCcrdliai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdliai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCcrdliai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCcrdliai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdliai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCcrdliai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCcrdliai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdliai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCcrdliai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCcrdliai()
                .setOFFILLER3(
                        StringUtils.overlay(getCcrdliai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCcrdliai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCcrdliai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCcrdliai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCcrdliai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCcrdliai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdliai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCcrdliai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCcrdliai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdliai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCcrdliai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCcrdliai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdliai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCcrdliai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCcrdliai()
                .setOFFILLER5(
                        StringUtils.overlay(getCcrdliai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCcrdliai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCcrdliai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCcrdliai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCcrdliai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCcrdliai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdliai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCcrdliai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCcrdliai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdliai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCcrdliai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCcrdliai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdliai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCcrdliai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCcrdliai()
                .setOFFILLER7(
                        StringUtils.overlay(getCcrdliai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCcrdliai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCcrdliai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCcrdliai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCcrdliai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCcrdliai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdliai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCcrdliai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCcrdliai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdliai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCcrdliai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCcrdliai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdliai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCcrdliai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCcrdliai()
                .setOFFILLER9(
                        StringUtils.overlay(getCcrdliai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCcrdliai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCcrdliai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCcrdliai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCcrdliai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCcrdliai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCcrdliai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCcrdliai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCcrdliai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCcrdliai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCcrdliai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCcrdliai().setOFFILLER11(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCcrdliai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCcrdliai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCcrdliai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCcrdliai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCcrdliai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCcrdliai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCcrdliai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCcrdliai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCcrdliai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCcrdliai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCcrdliai().setOFFILLER13(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCcrdliai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCcrdliai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getPagenol());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCcrdliai().getPagenof();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setPagenol(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setPagenol(0);
        }
    }

    public String getPagenoc() {
        return getCcrdliai().getOFFILLER15().substring(0, 1);
    }

    public void setPagenoc(String source) {
        getCcrdliai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER15(), source, 0, 1));
    }

    public String getPagenop() {
        return getCcrdliai().getOFFILLER15().substring(1, 2);
    }

    public void setPagenop(String source) {
        getCcrdliai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER15(), source, 1, 2));
    }

    public String getPagenoh() {
        return getCcrdliai().getOFFILLER15().substring(2, 3);
    }

    public void setPagenoh(String source) {
        getCcrdliai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER15(), source, 2, 3));
    }

    public String getPagenov() {
        return getCcrdliai().getOFFILLER15().substring(3);
    }

    public void setPagenov(String source) {
        getCcrdliai().setOFFILLER15(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER15(), source, 3, 4));
    }

    public String getPagenoo() {
        return getCcrdliai().getPagenoi();
    }

    public void setPagenoo(String source) {
        getCcrdliai().setPagenoi(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctsidl());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCcrdliai().getAcctsidf();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctsidl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctsidl(0);
        }
    }

    public String getAcctsidc() {
        return getCcrdliai().getOFFILLER17().substring(0, 1);
    }

    public void setAcctsidc(String source) {
        getCcrdliai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER17(), source, 0, 1));
    }

    public String getAcctsidp() {
        return getCcrdliai().getOFFILLER17().substring(1, 2);
    }

    public void setAcctsidp(String source) {
        getCcrdliai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER17(), source, 1, 2));
    }

    public String getAcctsidh() {
        return getCcrdliai().getOFFILLER17().substring(2, 3);
    }

    public void setAcctsidh(String source) {
        getCcrdliai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER17(), source, 2, 3));
    }

    public String getAcctsidv() {
        return getCcrdliai().getOFFILLER17().substring(3);
    }

    public void setAcctsidv(String source) {
        getCcrdliai().setOFFILLER17(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER17(), source, 3, 4));
    }

    public String getAcctsido() {
        return getCcrdliai().getAcctsidi();
    }

    public void setAcctsido(String source) {
        getCcrdliai().setAcctsidi(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCardsidl());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCcrdliai().getCardsidf();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCardsidl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCardsidl(0);
        }
    }

    public String getCardsidc() {
        return getCcrdliai().getOFFILLER19().substring(0, 1);
    }

    public void setCardsidc(String source) {
        getCcrdliai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER19(), source, 0, 1));
    }

    public String getCardsidp() {
        return getCcrdliai().getOFFILLER19().substring(1, 2);
    }

    public void setCardsidp(String source) {
        getCcrdliai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER19(), source, 1, 2));
    }

    public String getCardsidh() {
        return getCcrdliai().getOFFILLER19().substring(2, 3);
    }

    public void setCardsidh(String source) {
        getCcrdliai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER19(), source, 2, 3));
    }

    public String getCardsidv() {
        return getCcrdliai().getOFFILLER19().substring(3);
    }

    public void setCardsidv(String source) {
        getCcrdliai().setOFFILLER19(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER19(), source, 3, 4));
    }

    public String getCardsido() {
        return getCcrdliai().getCardsidi();
    }

    public void setCardsido(String source) {
        getCcrdliai().setCardsidi(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsel1l());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCcrdliai().getCrdsel1f();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsel1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsel1l(0);
        }
    }

    public String getCrdsel1c() {
        return getCcrdliai().getOFFILLER21().substring(0, 1);
    }

    public void setCrdsel1c(String source) {
        getCcrdliai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER21(), source, 0, 1));
    }

    public String getCrdsel1p() {
        return getCcrdliai().getOFFILLER21().substring(1, 2);
    }

    public void setCrdsel1p(String source) {
        getCcrdliai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER21(), source, 1, 2));
    }

    public String getCrdsel1h() {
        return getCcrdliai().getOFFILLER21().substring(2, 3);
    }

    public void setCrdsel1h(String source) {
        getCcrdliai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER21(), source, 2, 3));
    }

    public String getCrdsel1v() {
        return getCcrdliai().getOFFILLER21().substring(3);
    }

    public void setCrdsel1v(String source) {
        getCcrdliai().setOFFILLER21(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER21(), source, 3, 4));
    }

    public String getCrdsel1o() {
        return getCcrdliai().getCrdsel1i();
    }

    public void setCrdsel1o(String source) {
        getCcrdliai().setCrdsel1i(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctno1l());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCcrdliai().getAcctno1f();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctno1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctno1l(0);
        }
    }

    public String getAcctno1c() {
        return getCcrdliai().getOFFILLER23().substring(0, 1);
    }

    public void setAcctno1c(String source) {
        getCcrdliai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER23(), source, 0, 1));
    }

    public String getAcctno1p() {
        return getCcrdliai().getOFFILLER23().substring(1, 2);
    }

    public void setAcctno1p(String source) {
        getCcrdliai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER23(), source, 1, 2));
    }

    public String getAcctno1h() {
        return getCcrdliai().getOFFILLER23().substring(2, 3);
    }

    public void setAcctno1h(String source) {
        getCcrdliai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER23(), source, 2, 3));
    }

    public String getAcctno1v() {
        return getCcrdliai().getOFFILLER23().substring(3);
    }

    public void setAcctno1v(String source) {
        getCcrdliai().setOFFILLER23(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER23(), source, 3, 4));
    }

    public String getAcctno1o() {
        return getCcrdliai().getAcctno1i();
    }

    public void setAcctno1o(String source) {
        getCcrdliai().setAcctno1i(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdnum1l());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCcrdliai().getCrdnum1f();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdnum1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdnum1l(0);
        }
    }

    public String getCrdnum1c() {
        return getCcrdliai().getOFFILLER25().substring(0, 1);
    }

    public void setCrdnum1c(String source) {
        getCcrdliai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER25(), source, 0, 1));
    }

    public String getCrdnum1p() {
        return getCcrdliai().getOFFILLER25().substring(1, 2);
    }

    public void setCrdnum1p(String source) {
        getCcrdliai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER25(), source, 1, 2));
    }

    public String getCrdnum1h() {
        return getCcrdliai().getOFFILLER25().substring(2, 3);
    }

    public void setCrdnum1h(String source) {
        getCcrdliai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER25(), source, 2, 3));
    }

    public String getCrdnum1v() {
        return getCcrdliai().getOFFILLER25().substring(3);
    }

    public void setCrdnum1v(String source) {
        getCcrdliai().setOFFILLER25(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER25(), source, 3, 4));
    }

    public String getCrdnum1o() {
        return getCcrdliai().getCrdnum1i();
    }

    public void setCrdnum1o(String source) {
        getCcrdliai().setCrdnum1i(source);
    }

    public String getOFFILLER14() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsts1l());
        tempByteBuffer1.flip();
        String temp13 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp13 + getCcrdliai().getCrdsts1f();
    }

    public void setOFFILLER14(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsts1l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsts1l(0);
        }
    }

    public String getCrdsts1c() {
        return getCcrdliai().getOFFILLER27().substring(0, 1);
    }

    public void setCrdsts1c(String source) {
        getCcrdliai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER27(), source, 0, 1));
    }

    public String getCrdsts1p() {
        return getCcrdliai().getOFFILLER27().substring(1, 2);
    }

    public void setCrdsts1p(String source) {
        getCcrdliai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER27(), source, 1, 2));
    }

    public String getCrdsts1h() {
        return getCcrdliai().getOFFILLER27().substring(2, 3);
    }

    public void setCrdsts1h(String source) {
        getCcrdliai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER27(), source, 2, 3));
    }

    public String getCrdsts1v() {
        return getCcrdliai().getOFFILLER27().substring(3);
    }

    public void setCrdsts1v(String source) {
        getCcrdliai().setOFFILLER27(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER27(), source, 3, 4));
    }

    public String getCrdsts1o() {
        return getCcrdliai().getCrdsts1i();
    }

    public void setCrdsts1o(String source) {
        getCcrdliai().setCrdsts1i(source);
    }

    public String getOFFILLER15() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsel2l());
        tempByteBuffer1.flip();
        String temp14 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp14 + getCcrdliai().getCrdsel2f();
    }

    public void setOFFILLER15(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsel2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsel2l(0);
        }
    }

    public String getCrdsel2c() {
        return getCcrdliai().getOFFILLER29().substring(0, 1);
    }

    public void setCrdsel2c(String source) {
        getCcrdliai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER29(), source, 0, 1));
    }

    public String getCrdsel2p() {
        return getCcrdliai().getOFFILLER29().substring(1, 2);
    }

    public void setCrdsel2p(String source) {
        getCcrdliai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER29(), source, 1, 2));
    }

    public String getCrdsel2h() {
        return getCcrdliai().getOFFILLER29().substring(2, 3);
    }

    public void setCrdsel2h(String source) {
        getCcrdliai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER29(), source, 2, 3));
    }

    public String getCrdsel2v() {
        return getCcrdliai().getOFFILLER29().substring(3);
    }

    public void setCrdsel2v(String source) {
        getCcrdliai().setOFFILLER29(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER29(), source, 3, 4));
    }

    public String getCrdsel2o() {
        return getCcrdliai().getCrdsel2i();
    }

    public void setCrdsel2o(String source) {
        getCcrdliai().setCrdsel2i(source);
    }

    public String getOFFILLER16() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdstp2l());
        tempByteBuffer1.flip();
        String temp15 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp15 + getCcrdliai().getCrdstp2f();
    }

    public void setOFFILLER16(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdstp2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdstp2l(0);
        }
    }

    public String getCrdstp2c() {
        return getCcrdliai().getOFFILLER31().substring(0, 1);
    }

    public void setCrdstp2c(String source) {
        getCcrdliai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER31(), source, 0, 1));
    }

    public String getCrdstp2p() {
        return getCcrdliai().getOFFILLER31().substring(1, 2);
    }

    public void setCrdstp2p(String source) {
        getCcrdliai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER31(), source, 1, 2));
    }

    public String getCrdstp2h() {
        return getCcrdliai().getOFFILLER31().substring(2, 3);
    }

    public void setCrdstp2h(String source) {
        getCcrdliai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER31(), source, 2, 3));
    }

    public String getCrdstp2v() {
        return getCcrdliai().getOFFILLER31().substring(3);
    }

    public void setCrdstp2v(String source) {
        getCcrdliai().setOFFILLER31(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER31(), source, 3, 4));
    }

    public String getCrdstp2o() {
        return getCcrdliai().getCrdstp2i();
    }

    public void setCrdstp2o(String source) {
        getCcrdliai().setCrdstp2i(source);
    }

    public String getOFFILLER17() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctno2l());
        tempByteBuffer1.flip();
        String temp16 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp16 + getCcrdliai().getAcctno2f();
    }

    public void setOFFILLER17(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctno2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctno2l(0);
        }
    }

    public String getAcctno2c() {
        return getCcrdliai().getOFFILLER33().substring(0, 1);
    }

    public void setAcctno2c(String source) {
        getCcrdliai().setOFFILLER33(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER33(), source, 0, 1));
    }

    public String getAcctno2p() {
        return getCcrdliai().getOFFILLER33().substring(1, 2);
    }

    public void setAcctno2p(String source) {
        getCcrdliai().setOFFILLER33(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER33(), source, 1, 2));
    }

    public String getAcctno2h() {
        return getCcrdliai().getOFFILLER33().substring(2, 3);
    }

    public void setAcctno2h(String source) {
        getCcrdliai().setOFFILLER33(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER33(), source, 2, 3));
    }

    public String getAcctno2v() {
        return getCcrdliai().getOFFILLER33().substring(3);
    }

    public void setAcctno2v(String source) {
        getCcrdliai().setOFFILLER33(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER33(), source, 3, 4));
    }

    public String getAcctno2o() {
        return getCcrdliai().getAcctno2i();
    }

    public void setAcctno2o(String source) {
        getCcrdliai().setAcctno2i(source);
    }

    public String getOFFILLER18() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdnum2l());
        tempByteBuffer1.flip();
        String temp17 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp17 + getCcrdliai().getCrdnum2f();
    }

    public void setOFFILLER18(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdnum2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdnum2l(0);
        }
    }

    public String getCrdnum2c() {
        return getCcrdliai().getOFFILLER35().substring(0, 1);
    }

    public void setCrdnum2c(String source) {
        getCcrdliai().setOFFILLER35(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER35(), source, 0, 1));
    }

    public String getCrdnum2p() {
        return getCcrdliai().getOFFILLER35().substring(1, 2);
    }

    public void setCrdnum2p(String source) {
        getCcrdliai().setOFFILLER35(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER35(), source, 1, 2));
    }

    public String getCrdnum2h() {
        return getCcrdliai().getOFFILLER35().substring(2, 3);
    }

    public void setCrdnum2h(String source) {
        getCcrdliai().setOFFILLER35(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER35(), source, 2, 3));
    }

    public String getCrdnum2v() {
        return getCcrdliai().getOFFILLER35().substring(3);
    }

    public void setCrdnum2v(String source) {
        getCcrdliai().setOFFILLER35(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER35(), source, 3, 4));
    }

    public String getCrdnum2o() {
        return getCcrdliai().getCrdnum2i();
    }

    public void setCrdnum2o(String source) {
        getCcrdliai().setCrdnum2i(source);
    }

    public String getOFFILLER19() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsts2l());
        tempByteBuffer1.flip();
        String temp18 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp18 + getCcrdliai().getCrdsts2f();
    }

    public void setOFFILLER19(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsts2l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsts2l(0);
        }
    }

    public String getCrdsts2c() {
        return getCcrdliai().getOFFILLER37().substring(0, 1);
    }

    public void setCrdsts2c(String source) {
        getCcrdliai().setOFFILLER37(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER37(), source, 0, 1));
    }

    public String getCrdsts2p() {
        return getCcrdliai().getOFFILLER37().substring(1, 2);
    }

    public void setCrdsts2p(String source) {
        getCcrdliai().setOFFILLER37(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER37(), source, 1, 2));
    }

    public String getCrdsts2h() {
        return getCcrdliai().getOFFILLER37().substring(2, 3);
    }

    public void setCrdsts2h(String source) {
        getCcrdliai().setOFFILLER37(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER37(), source, 2, 3));
    }

    public String getCrdsts2v() {
        return getCcrdliai().getOFFILLER37().substring(3);
    }

    public void setCrdsts2v(String source) {
        getCcrdliai().setOFFILLER37(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER37(), source, 3, 4));
    }

    public String getCrdsts2o() {
        return getCcrdliai().getCrdsts2i();
    }

    public void setCrdsts2o(String source) {
        getCcrdliai().setCrdsts2i(source);
    }

    public String getOFFILLER20() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsel3l());
        tempByteBuffer1.flip();
        String temp19 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp19 + getCcrdliai().getCrdsel3f();
    }

    public void setOFFILLER20(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsel3l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsel3l(0);
        }
    }

    public String getCrdsel3c() {
        return getCcrdliai().getOFFILLER39().substring(0, 1);
    }

    public void setCrdsel3c(String source) {
        getCcrdliai().setOFFILLER39(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER39(), source, 0, 1));
    }

    public String getCrdsel3p() {
        return getCcrdliai().getOFFILLER39().substring(1, 2);
    }

    public void setCrdsel3p(String source) {
        getCcrdliai().setOFFILLER39(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER39(), source, 1, 2));
    }

    public String getCrdsel3h() {
        return getCcrdliai().getOFFILLER39().substring(2, 3);
    }

    public void setCrdsel3h(String source) {
        getCcrdliai().setOFFILLER39(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER39(), source, 2, 3));
    }

    public String getCrdsel3v() {
        return getCcrdliai().getOFFILLER39().substring(3);
    }

    public void setCrdsel3v(String source) {
        getCcrdliai().setOFFILLER39(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER39(), source, 3, 4));
    }

    public String getCrdsel3o() {
        return getCcrdliai().getCrdsel3i();
    }

    public void setCrdsel3o(String source) {
        getCcrdliai().setCrdsel3i(source);
    }

    public String getOFFILLER21() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdstp3l());
        tempByteBuffer1.flip();
        String temp20 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp20 + getCcrdliai().getCrdstp3f();
    }

    public void setOFFILLER21(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdstp3l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdstp3l(0);
        }
    }

    public String getCrdstp3c() {
        return getCcrdliai().getOFFILLER41().substring(0, 1);
    }

    public void setCrdstp3c(String source) {
        getCcrdliai().setOFFILLER41(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER41(), source, 0, 1));
    }

    public String getCrdstp3p() {
        return getCcrdliai().getOFFILLER41().substring(1, 2);
    }

    public void setCrdstp3p(String source) {
        getCcrdliai().setOFFILLER41(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER41(), source, 1, 2));
    }

    public String getCrdstp3h() {
        return getCcrdliai().getOFFILLER41().substring(2, 3);
    }

    public void setCrdstp3h(String source) {
        getCcrdliai().setOFFILLER41(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER41(), source, 2, 3));
    }

    public String getCrdstp3v() {
        return getCcrdliai().getOFFILLER41().substring(3);
    }

    public void setCrdstp3v(String source) {
        getCcrdliai().setOFFILLER41(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER41(), source, 3, 4));
    }

    public String getCrdstp3o() {
        return getCcrdliai().getCrdstp3i();
    }

    public void setCrdstp3o(String source) {
        getCcrdliai().setCrdstp3i(source);
    }

    public String getOFFILLER22() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctno3l());
        tempByteBuffer1.flip();
        String temp21 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp21 + getCcrdliai().getAcctno3f();
    }

    public void setOFFILLER22(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctno3l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctno3l(0);
        }
    }

    public String getAcctno3c() {
        return getCcrdliai().getOFFILLER43().substring(0, 1);
    }

    public void setAcctno3c(String source) {
        getCcrdliai().setOFFILLER43(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER43(), source, 0, 1));
    }

    public String getAcctno3p() {
        return getCcrdliai().getOFFILLER43().substring(1, 2);
    }

    public void setAcctno3p(String source) {
        getCcrdliai().setOFFILLER43(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER43(), source, 1, 2));
    }

    public String getAcctno3h() {
        return getCcrdliai().getOFFILLER43().substring(2, 3);
    }

    public void setAcctno3h(String source) {
        getCcrdliai().setOFFILLER43(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER43(), source, 2, 3));
    }

    public String getAcctno3v() {
        return getCcrdliai().getOFFILLER43().substring(3);
    }

    public void setAcctno3v(String source) {
        getCcrdliai().setOFFILLER43(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER43(), source, 3, 4));
    }

    public String getAcctno3o() {
        return getCcrdliai().getAcctno3i();
    }

    public void setAcctno3o(String source) {
        getCcrdliai().setAcctno3i(source);
    }

    public String getOFFILLER23() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdnum3l());
        tempByteBuffer1.flip();
        String temp22 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp22 + getCcrdliai().getCrdnum3f();
    }

    public void setOFFILLER23(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdnum3l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdnum3l(0);
        }
    }

    public String getCrdnum3c() {
        return getCcrdliai().getOFFILLER45().substring(0, 1);
    }

    public void setCrdnum3c(String source) {
        getCcrdliai().setOFFILLER45(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER45(), source, 0, 1));
    }

    public String getCrdnum3p() {
        return getCcrdliai().getOFFILLER45().substring(1, 2);
    }

    public void setCrdnum3p(String source) {
        getCcrdliai().setOFFILLER45(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER45(), source, 1, 2));
    }

    public String getCrdnum3h() {
        return getCcrdliai().getOFFILLER45().substring(2, 3);
    }

    public void setCrdnum3h(String source) {
        getCcrdliai().setOFFILLER45(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER45(), source, 2, 3));
    }

    public String getCrdnum3v() {
        return getCcrdliai().getOFFILLER45().substring(3);
    }

    public void setCrdnum3v(String source) {
        getCcrdliai().setOFFILLER45(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER45(), source, 3, 4));
    }

    public String getCrdnum3o() {
        return getCcrdliai().getCrdnum3i();
    }

    public void setCrdnum3o(String source) {
        getCcrdliai().setCrdnum3i(source);
    }

    public String getOFFILLER24() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsts3l());
        tempByteBuffer1.flip();
        String temp23 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp23 + getCcrdliai().getCrdsts3f();
    }

    public void setOFFILLER24(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsts3l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsts3l(0);
        }
    }

    public String getCrdsts3c() {
        return getCcrdliai().getOFFILLER47().substring(0, 1);
    }

    public void setCrdsts3c(String source) {
        getCcrdliai().setOFFILLER47(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER47(), source, 0, 1));
    }

    public String getCrdsts3p() {
        return getCcrdliai().getOFFILLER47().substring(1, 2);
    }

    public void setCrdsts3p(String source) {
        getCcrdliai().setOFFILLER47(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER47(), source, 1, 2));
    }

    public String getCrdsts3h() {
        return getCcrdliai().getOFFILLER47().substring(2, 3);
    }

    public void setCrdsts3h(String source) {
        getCcrdliai().setOFFILLER47(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER47(), source, 2, 3));
    }

    public String getCrdsts3v() {
        return getCcrdliai().getOFFILLER47().substring(3);
    }

    public void setCrdsts3v(String source) {
        getCcrdliai().setOFFILLER47(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER47(), source, 3, 4));
    }

    public String getCrdsts3o() {
        return getCcrdliai().getCrdsts3i();
    }

    public void setCrdsts3o(String source) {
        getCcrdliai().setCrdsts3i(source);
    }

    public String getOFFILLER25() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsel4l());
        tempByteBuffer1.flip();
        String temp24 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp24 + getCcrdliai().getCrdsel4f();
    }

    public void setOFFILLER25(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsel4l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsel4l(0);
        }
    }

    public String getCrdsel4c() {
        return getCcrdliai().getOFFILLER49().substring(0, 1);
    }

    public void setCrdsel4c(String source) {
        getCcrdliai().setOFFILLER49(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER49(), source, 0, 1));
    }

    public String getCrdsel4p() {
        return getCcrdliai().getOFFILLER49().substring(1, 2);
    }

    public void setCrdsel4p(String source) {
        getCcrdliai().setOFFILLER49(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER49(), source, 1, 2));
    }

    public String getCrdsel4h() {
        return getCcrdliai().getOFFILLER49().substring(2, 3);
    }

    public void setCrdsel4h(String source) {
        getCcrdliai().setOFFILLER49(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER49(), source, 2, 3));
    }

    public String getCrdsel4v() {
        return getCcrdliai().getOFFILLER49().substring(3);
    }

    public void setCrdsel4v(String source) {
        getCcrdliai().setOFFILLER49(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER49(), source, 3, 4));
    }

    public String getCrdsel4o() {
        return getCcrdliai().getCrdsel4i();
    }

    public void setCrdsel4o(String source) {
        getCcrdliai().setCrdsel4i(source);
    }

    public String getOFFILLER26() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdstp4l());
        tempByteBuffer1.flip();
        String temp25 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp25 + getCcrdliai().getCrdstp4f();
    }

    public void setOFFILLER26(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdstp4l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdstp4l(0);
        }
    }

    public String getCrdstp4c() {
        return getCcrdliai().getOFFILLER51().substring(0, 1);
    }

    public void setCrdstp4c(String source) {
        getCcrdliai().setOFFILLER51(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER51(), source, 0, 1));
    }

    public String getCrdstp4p() {
        return getCcrdliai().getOFFILLER51().substring(1, 2);
    }

    public void setCrdstp4p(String source) {
        getCcrdliai().setOFFILLER51(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER51(), source, 1, 2));
    }

    public String getCrdstp4h() {
        return getCcrdliai().getOFFILLER51().substring(2, 3);
    }

    public void setCrdstp4h(String source) {
        getCcrdliai().setOFFILLER51(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER51(), source, 2, 3));
    }

    public String getCrdstp4v() {
        return getCcrdliai().getOFFILLER51().substring(3);
    }

    public void setCrdstp4v(String source) {
        getCcrdliai().setOFFILLER51(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER51(), source, 3, 4));
    }

    public String getCrdstp4o() {
        return getCcrdliai().getCrdstp4i();
    }

    public void setCrdstp4o(String source) {
        getCcrdliai().setCrdstp4i(source);
    }

    public String getOFFILLER27() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctno4l());
        tempByteBuffer1.flip();
        String temp26 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp26 + getCcrdliai().getAcctno4f();
    }

    public void setOFFILLER27(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctno4l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctno4l(0);
        }
    }

    public String getAcctno4c() {
        return getCcrdliai().getOFFILLER53().substring(0, 1);
    }

    public void setAcctno4c(String source) {
        getCcrdliai().setOFFILLER53(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER53(), source, 0, 1));
    }

    public String getAcctno4p() {
        return getCcrdliai().getOFFILLER53().substring(1, 2);
    }

    public void setAcctno4p(String source) {
        getCcrdliai().setOFFILLER53(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER53(), source, 1, 2));
    }

    public String getAcctno4h() {
        return getCcrdliai().getOFFILLER53().substring(2, 3);
    }

    public void setAcctno4h(String source) {
        getCcrdliai().setOFFILLER53(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER53(), source, 2, 3));
    }

    public String getAcctno4v() {
        return getCcrdliai().getOFFILLER53().substring(3);
    }

    public void setAcctno4v(String source) {
        getCcrdliai().setOFFILLER53(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER53(), source, 3, 4));
    }

    public String getAcctno4o() {
        return getCcrdliai().getAcctno4i();
    }

    public void setAcctno4o(String source) {
        getCcrdliai().setAcctno4i(source);
    }

    public String getOFFILLER28() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdnum4l());
        tempByteBuffer1.flip();
        String temp27 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp27 + getCcrdliai().getCrdnum4f();
    }

    public void setOFFILLER28(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdnum4l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdnum4l(0);
        }
    }

    public String getCrdnum4c() {
        return getCcrdliai().getOFFILLER55().substring(0, 1);
    }

    public void setCrdnum4c(String source) {
        getCcrdliai().setOFFILLER55(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER55(), source, 0, 1));
    }

    public String getCrdnum4p() {
        return getCcrdliai().getOFFILLER55().substring(1, 2);
    }

    public void setCrdnum4p(String source) {
        getCcrdliai().setOFFILLER55(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER55(), source, 1, 2));
    }

    public String getCrdnum4h() {
        return getCcrdliai().getOFFILLER55().substring(2, 3);
    }

    public void setCrdnum4h(String source) {
        getCcrdliai().setOFFILLER55(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER55(), source, 2, 3));
    }

    public String getCrdnum4v() {
        return getCcrdliai().getOFFILLER55().substring(3);
    }

    public void setCrdnum4v(String source) {
        getCcrdliai().setOFFILLER55(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER55(), source, 3, 4));
    }

    public String getCrdnum4o() {
        return getCcrdliai().getCrdnum4i();
    }

    public void setCrdnum4o(String source) {
        getCcrdliai().setCrdnum4i(source);
    }

    public String getOFFILLER29() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsts4l());
        tempByteBuffer1.flip();
        String temp28 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp28 + getCcrdliai().getCrdsts4f();
    }

    public void setOFFILLER29(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsts4l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsts4l(0);
        }
    }

    public String getCrdsts4c() {
        return getCcrdliai().getOFFILLER57().substring(0, 1);
    }

    public void setCrdsts4c(String source) {
        getCcrdliai().setOFFILLER57(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER57(), source, 0, 1));
    }

    public String getCrdsts4p() {
        return getCcrdliai().getOFFILLER57().substring(1, 2);
    }

    public void setCrdsts4p(String source) {
        getCcrdliai().setOFFILLER57(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER57(), source, 1, 2));
    }

    public String getCrdsts4h() {
        return getCcrdliai().getOFFILLER57().substring(2, 3);
    }

    public void setCrdsts4h(String source) {
        getCcrdliai().setOFFILLER57(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER57(), source, 2, 3));
    }

    public String getCrdsts4v() {
        return getCcrdliai().getOFFILLER57().substring(3);
    }

    public void setCrdsts4v(String source) {
        getCcrdliai().setOFFILLER57(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER57(), source, 3, 4));
    }

    public String getCrdsts4o() {
        return getCcrdliai().getCrdsts4i();
    }

    public void setCrdsts4o(String source) {
        getCcrdliai().setCrdsts4i(source);
    }

    public String getOFFILLER30() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsel5l());
        tempByteBuffer1.flip();
        String temp29 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp29 + getCcrdliai().getCrdsel5f();
    }

    public void setOFFILLER30(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsel5l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsel5l(0);
        }
    }

    public String getCrdsel5c() {
        return getCcrdliai().getOFFILLER59().substring(0, 1);
    }

    public void setCrdsel5c(String source) {
        getCcrdliai().setOFFILLER59(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER59(), source, 0, 1));
    }

    public String getCrdsel5p() {
        return getCcrdliai().getOFFILLER59().substring(1, 2);
    }

    public void setCrdsel5p(String source) {
        getCcrdliai().setOFFILLER59(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER59(), source, 1, 2));
    }

    public String getCrdsel5h() {
        return getCcrdliai().getOFFILLER59().substring(2, 3);
    }

    public void setCrdsel5h(String source) {
        getCcrdliai().setOFFILLER59(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER59(), source, 2, 3));
    }

    public String getCrdsel5v() {
        return getCcrdliai().getOFFILLER59().substring(3);
    }

    public void setCrdsel5v(String source) {
        getCcrdliai().setOFFILLER59(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER59(), source, 3, 4));
    }

    public String getCrdsel5o() {
        return getCcrdliai().getCrdsel5i();
    }

    public void setCrdsel5o(String source) {
        getCcrdliai().setCrdsel5i(source);
    }

    public String getOFFILLER31() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdstp5l());
        tempByteBuffer1.flip();
        String temp30 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp30 + getCcrdliai().getCrdstp5f();
    }

    public void setOFFILLER31(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdstp5l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdstp5l(0);
        }
    }

    public String getCrdstp5c() {
        return getCcrdliai().getOFFILLER61().substring(0, 1);
    }

    public void setCrdstp5c(String source) {
        getCcrdliai().setOFFILLER61(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER61(), source, 0, 1));
    }

    public String getCrdstp5p() {
        return getCcrdliai().getOFFILLER61().substring(1, 2);
    }

    public void setCrdstp5p(String source) {
        getCcrdliai().setOFFILLER61(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER61(), source, 1, 2));
    }

    public String getCrdstp5h() {
        return getCcrdliai().getOFFILLER61().substring(2, 3);
    }

    public void setCrdstp5h(String source) {
        getCcrdliai().setOFFILLER61(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER61(), source, 2, 3));
    }

    public String getCrdstp5v() {
        return getCcrdliai().getOFFILLER61().substring(3);
    }

    public void setCrdstp5v(String source) {
        getCcrdliai().setOFFILLER61(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER61(), source, 3, 4));
    }

    public String getCrdstp5o() {
        return getCcrdliai().getCrdstp5i();
    }

    public void setCrdstp5o(String source) {
        getCcrdliai().setCrdstp5i(source);
    }

    public String getOFFILLER32() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctno5l());
        tempByteBuffer1.flip();
        String temp31 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp31 + getCcrdliai().getAcctno5f();
    }

    public void setOFFILLER32(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctno5l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctno5l(0);
        }
    }

    public String getAcctno5c() {
        return getCcrdliai().getOFFILLER63().substring(0, 1);
    }

    public void setAcctno5c(String source) {
        getCcrdliai().setOFFILLER63(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER63(), source, 0, 1));
    }

    public String getAcctno5p() {
        return getCcrdliai().getOFFILLER63().substring(1, 2);
    }

    public void setAcctno5p(String source) {
        getCcrdliai().setOFFILLER63(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER63(), source, 1, 2));
    }

    public String getAcctno5h() {
        return getCcrdliai().getOFFILLER63().substring(2, 3);
    }

    public void setAcctno5h(String source) {
        getCcrdliai().setOFFILLER63(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER63(), source, 2, 3));
    }

    public String getAcctno5v() {
        return getCcrdliai().getOFFILLER63().substring(3);
    }

    public void setAcctno5v(String source) {
        getCcrdliai().setOFFILLER63(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER63(), source, 3, 4));
    }

    public String getAcctno5o() {
        return getCcrdliai().getAcctno5i();
    }

    public void setAcctno5o(String source) {
        getCcrdliai().setAcctno5i(source);
    }

    public String getOFFILLER33() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdnum5l());
        tempByteBuffer1.flip();
        String temp32 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp32 + getCcrdliai().getCrdnum5f();
    }

    public void setOFFILLER33(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdnum5l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdnum5l(0);
        }
    }

    public String getCrdnum5c() {
        return getCcrdliai().getOFFILLER65().substring(0, 1);
    }

    public void setCrdnum5c(String source) {
        getCcrdliai().setOFFILLER65(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER65(), source, 0, 1));
    }

    public String getCrdnum5p() {
        return getCcrdliai().getOFFILLER65().substring(1, 2);
    }

    public void setCrdnum5p(String source) {
        getCcrdliai().setOFFILLER65(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER65(), source, 1, 2));
    }

    public String getCrdnum5h() {
        return getCcrdliai().getOFFILLER65().substring(2, 3);
    }

    public void setCrdnum5h(String source) {
        getCcrdliai().setOFFILLER65(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER65(), source, 2, 3));
    }

    public String getCrdnum5v() {
        return getCcrdliai().getOFFILLER65().substring(3);
    }

    public void setCrdnum5v(String source) {
        getCcrdliai().setOFFILLER65(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER65(), source, 3, 4));
    }

    public String getCrdnum5o() {
        return getCcrdliai().getCrdnum5i();
    }

    public void setCrdnum5o(String source) {
        getCcrdliai().setCrdnum5i(source);
    }

    public String getOFFILLER34() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsts5l());
        tempByteBuffer1.flip();
        String temp33 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp33 + getCcrdliai().getCrdsts5f();
    }

    public void setOFFILLER34(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsts5l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsts5l(0);
        }
    }

    public String getCrdsts5c() {
        return getCcrdliai().getOFFILLER67().substring(0, 1);
    }

    public void setCrdsts5c(String source) {
        getCcrdliai().setOFFILLER67(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER67(), source, 0, 1));
    }

    public String getCrdsts5p() {
        return getCcrdliai().getOFFILLER67().substring(1, 2);
    }

    public void setCrdsts5p(String source) {
        getCcrdliai().setOFFILLER67(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER67(), source, 1, 2));
    }

    public String getCrdsts5h() {
        return getCcrdliai().getOFFILLER67().substring(2, 3);
    }

    public void setCrdsts5h(String source) {
        getCcrdliai().setOFFILLER67(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER67(), source, 2, 3));
    }

    public String getCrdsts5v() {
        return getCcrdliai().getOFFILLER67().substring(3);
    }

    public void setCrdsts5v(String source) {
        getCcrdliai().setOFFILLER67(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER67(), source, 3, 4));
    }

    public String getCrdsts5o() {
        return getCcrdliai().getCrdsts5i();
    }

    public void setCrdsts5o(String source) {
        getCcrdliai().setCrdsts5i(source);
    }

    public String getOFFILLER35() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsel6l());
        tempByteBuffer1.flip();
        String temp34 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp34 + getCcrdliai().getCrdsel6f();
    }

    public void setOFFILLER35(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsel6l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsel6l(0);
        }
    }

    public String getCrdsel6c() {
        return getCcrdliai().getOFFILLER69().substring(0, 1);
    }

    public void setCrdsel6c(String source) {
        getCcrdliai().setOFFILLER69(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER69(), source, 0, 1));
    }

    public String getCrdsel6p() {
        return getCcrdliai().getOFFILLER69().substring(1, 2);
    }

    public void setCrdsel6p(String source) {
        getCcrdliai().setOFFILLER69(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER69(), source, 1, 2));
    }

    public String getCrdsel6h() {
        return getCcrdliai().getOFFILLER69().substring(2, 3);
    }

    public void setCrdsel6h(String source) {
        getCcrdliai().setOFFILLER69(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER69(), source, 2, 3));
    }

    public String getCrdsel6v() {
        return getCcrdliai().getOFFILLER69().substring(3);
    }

    public void setCrdsel6v(String source) {
        getCcrdliai().setOFFILLER69(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER69(), source, 3, 4));
    }

    public String getCrdsel6o() {
        return getCcrdliai().getCrdsel6i();
    }

    public void setCrdsel6o(String source) {
        getCcrdliai().setCrdsel6i(source);
    }

    public String getOFFILLER36() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdstp6l());
        tempByteBuffer1.flip();
        String temp35 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp35 + getCcrdliai().getCrdstp6f();
    }

    public void setOFFILLER36(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdstp6l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdstp6l(0);
        }
    }

    public String getCrdstp6c() {
        return getCcrdliai().getOFFILLER71().substring(0, 1);
    }

    public void setCrdstp6c(String source) {
        getCcrdliai().setOFFILLER71(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER71(), source, 0, 1));
    }

    public String getCrdstp6p() {
        return getCcrdliai().getOFFILLER71().substring(1, 2);
    }

    public void setCrdstp6p(String source) {
        getCcrdliai().setOFFILLER71(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER71(), source, 1, 2));
    }

    public String getCrdstp6h() {
        return getCcrdliai().getOFFILLER71().substring(2, 3);
    }

    public void setCrdstp6h(String source) {
        getCcrdliai().setOFFILLER71(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER71(), source, 2, 3));
    }

    public String getCrdstp6v() {
        return getCcrdliai().getOFFILLER71().substring(3);
    }

    public void setCrdstp6v(String source) {
        getCcrdliai().setOFFILLER71(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER71(), source, 3, 4));
    }

    public String getCrdstp6o() {
        return getCcrdliai().getCrdstp6i();
    }

    public void setCrdstp6o(String source) {
        getCcrdliai().setCrdstp6i(source);
    }

    public String getOFFILLER37() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctno6l());
        tempByteBuffer1.flip();
        String temp36 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp36 + getCcrdliai().getAcctno6f();
    }

    public void setOFFILLER37(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctno6l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctno6l(0);
        }
    }

    public String getAcctno6c() {
        return getCcrdliai().getOFFILLER73().substring(0, 1);
    }

    public void setAcctno6c(String source) {
        getCcrdliai().setOFFILLER73(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER73(), source, 0, 1));
    }

    public String getAcctno6p() {
        return getCcrdliai().getOFFILLER73().substring(1, 2);
    }

    public void setAcctno6p(String source) {
        getCcrdliai().setOFFILLER73(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER73(), source, 1, 2));
    }

    public String getAcctno6h() {
        return getCcrdliai().getOFFILLER73().substring(2, 3);
    }

    public void setAcctno6h(String source) {
        getCcrdliai().setOFFILLER73(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER73(), source, 2, 3));
    }

    public String getAcctno6v() {
        return getCcrdliai().getOFFILLER73().substring(3);
    }

    public void setAcctno6v(String source) {
        getCcrdliai().setOFFILLER73(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER73(), source, 3, 4));
    }

    public String getAcctno6o() {
        return getCcrdliai().getAcctno6i();
    }

    public void setAcctno6o(String source) {
        getCcrdliai().setAcctno6i(source);
    }

    public String getOFFILLER38() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdnum6l());
        tempByteBuffer1.flip();
        String temp37 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp37 + getCcrdliai().getCrdnum6f();
    }

    public void setOFFILLER38(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdnum6l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdnum6l(0);
        }
    }

    public String getCrdnum6c() {
        return getCcrdliai().getOFFILLER75().substring(0, 1);
    }

    public void setCrdnum6c(String source) {
        getCcrdliai().setOFFILLER75(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER75(), source, 0, 1));
    }

    public String getCrdnum6p() {
        return getCcrdliai().getOFFILLER75().substring(1, 2);
    }

    public void setCrdnum6p(String source) {
        getCcrdliai().setOFFILLER75(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER75(), source, 1, 2));
    }

    public String getCrdnum6h() {
        return getCcrdliai().getOFFILLER75().substring(2, 3);
    }

    public void setCrdnum6h(String source) {
        getCcrdliai().setOFFILLER75(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER75(), source, 2, 3));
    }

    public String getCrdnum6v() {
        return getCcrdliai().getOFFILLER75().substring(3);
    }

    public void setCrdnum6v(String source) {
        getCcrdliai().setOFFILLER75(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER75(), source, 3, 4));
    }

    public String getCrdnum6o() {
        return getCcrdliai().getCrdnum6i();
    }

    public void setCrdnum6o(String source) {
        getCcrdliai().setCrdnum6i(source);
    }

    public String getOFFILLER39() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsts6l());
        tempByteBuffer1.flip();
        String temp38 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp38 + getCcrdliai().getCrdsts6f();
    }

    public void setOFFILLER39(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsts6l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsts6l(0);
        }
    }

    public String getCrdsts6c() {
        return getCcrdliai().getOFFILLER77().substring(0, 1);
    }

    public void setCrdsts6c(String source) {
        getCcrdliai().setOFFILLER77(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER77(), source, 0, 1));
    }

    public String getCrdsts6p() {
        return getCcrdliai().getOFFILLER77().substring(1, 2);
    }

    public void setCrdsts6p(String source) {
        getCcrdliai().setOFFILLER77(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER77(), source, 1, 2));
    }

    public String getCrdsts6h() {
        return getCcrdliai().getOFFILLER77().substring(2, 3);
    }

    public void setCrdsts6h(String source) {
        getCcrdliai().setOFFILLER77(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER77(), source, 2, 3));
    }

    public String getCrdsts6v() {
        return getCcrdliai().getOFFILLER77().substring(3);
    }

    public void setCrdsts6v(String source) {
        getCcrdliai().setOFFILLER77(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER77(), source, 3, 4));
    }

    public String getCrdsts6o() {
        return getCcrdliai().getCrdsts6i();
    }

    public void setCrdsts6o(String source) {
        getCcrdliai().setCrdsts6i(source);
    }

    public String getOFFILLER40() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsel7l());
        tempByteBuffer1.flip();
        String temp39 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp39 + getCcrdliai().getCrdsel7f();
    }

    public void setOFFILLER40(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsel7l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsel7l(0);
        }
    }

    public String getCrdsel7c() {
        return getCcrdliai().getOFFILLER79().substring(0, 1);
    }

    public void setCrdsel7c(String source) {
        getCcrdliai().setOFFILLER79(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER79(), source, 0, 1));
    }

    public String getCrdsel7p() {
        return getCcrdliai().getOFFILLER79().substring(1, 2);
    }

    public void setCrdsel7p(String source) {
        getCcrdliai().setOFFILLER79(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER79(), source, 1, 2));
    }

    public String getCrdsel7h() {
        return getCcrdliai().getOFFILLER79().substring(2, 3);
    }

    public void setCrdsel7h(String source) {
        getCcrdliai().setOFFILLER79(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER79(), source, 2, 3));
    }

    public String getCrdsel7v() {
        return getCcrdliai().getOFFILLER79().substring(3);
    }

    public void setCrdsel7v(String source) {
        getCcrdliai().setOFFILLER79(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER79(), source, 3, 4));
    }

    public String getCrdsel7o() {
        return getCcrdliai().getCrdsel7i();
    }

    public void setCrdsel7o(String source) {
        getCcrdliai().setCrdsel7i(source);
    }

    public String getOFFILLER41() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdstp7l());
        tempByteBuffer1.flip();
        String temp40 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp40 + getCcrdliai().getCrdstp7f();
    }

    public void setOFFILLER41(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdstp7l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdstp7l(0);
        }
    }

    public String getCrdstp7c() {
        return getCcrdliai().getOFFILLER81().substring(0, 1);
    }

    public void setCrdstp7c(String source) {
        getCcrdliai().setOFFILLER81(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER81(), source, 0, 1));
    }

    public String getCrdstp7p() {
        return getCcrdliai().getOFFILLER81().substring(1, 2);
    }

    public void setCrdstp7p(String source) {
        getCcrdliai().setOFFILLER81(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER81(), source, 1, 2));
    }

    public String getCrdstp7h() {
        return getCcrdliai().getOFFILLER81().substring(2, 3);
    }

    public void setCrdstp7h(String source) {
        getCcrdliai().setOFFILLER81(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER81(), source, 2, 3));
    }

    public String getCrdstp7v() {
        return getCcrdliai().getOFFILLER81().substring(3);
    }

    public void setCrdstp7v(String source) {
        getCcrdliai().setOFFILLER81(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER81(), source, 3, 4));
    }

    public String getCrdstp7o() {
        return getCcrdliai().getCrdstp7i();
    }

    public void setCrdstp7o(String source) {
        getCcrdliai().setCrdstp7i(source);
    }

    public String getOFFILLER42() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getAcctno7l());
        tempByteBuffer1.flip();
        String temp41 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp41 + getCcrdliai().getAcctno7f();
    }

    public void setOFFILLER42(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setAcctno7l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setAcctno7l(0);
        }
    }

    public String getAcctno7c() {
        return getCcrdliai().getOFFILLER83().substring(0, 1);
    }

    public void setAcctno7c(String source) {
        getCcrdliai().setOFFILLER83(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER83(), source, 0, 1));
    }

    public String getAcctno7p() {
        return getCcrdliai().getOFFILLER83().substring(1, 2);
    }

    public void setAcctno7p(String source) {
        getCcrdliai().setOFFILLER83(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER83(), source, 1, 2));
    }

    public String getAcctno7h() {
        return getCcrdliai().getOFFILLER83().substring(2, 3);
    }

    public void setAcctno7h(String source) {
        getCcrdliai().setOFFILLER83(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER83(), source, 2, 3));
    }

    public String getAcctno7v() {
        return getCcrdliai().getOFFILLER83().substring(3);
    }

    public void setAcctno7v(String source) {
        getCcrdliai().setOFFILLER83(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER83(), source, 3, 4));
    }

    public String getAcctno7o() {
        return getCcrdliai().getAcctno7i();
    }

    public void setAcctno7o(String source) {
        getCcrdliai().setAcctno7i(source);
    }

    public String getOFFILLER43() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdnum7l());
        tempByteBuffer1.flip();
        String temp42 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp42 + getCcrdliai().getCrdnum7f();
    }

    public void setOFFILLER43(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdnum7l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdnum7l(0);
        }
    }

    public String getCrdnum7c() {
        return getCcrdliai().getOFFILLER85().substring(0, 1);
    }

    public void setCrdnum7c(String source) {
        getCcrdliai().setOFFILLER85(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER85(), source, 0, 1));
    }

    public String getCrdnum7p() {
        return getCcrdliai().getOFFILLER85().substring(1, 2);
    }

    public void setCrdnum7p(String source) {
        getCcrdliai().setOFFILLER85(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER85(), source, 1, 2));
    }

    public String getCrdnum7h() {
        return getCcrdliai().getOFFILLER85().substring(2, 3);
    }

    public void setCrdnum7h(String source) {
        getCcrdliai().setOFFILLER85(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER85(), source, 2, 3));
    }

    public String getCrdnum7v() {
        return getCcrdliai().getOFFILLER85().substring(3);
    }

    public void setCrdnum7v(String source) {
        getCcrdliai().setOFFILLER85(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER85(), source, 3, 4));
    }

    public String getCrdnum7o() {
        return getCcrdliai().getCrdnum7i();
    }

    public void setCrdnum7o(String source) {
        getCcrdliai().setCrdnum7i(source);
    }

    public String getOFFILLER44() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getCrdsts7l());
        tempByteBuffer1.flip();
        String temp43 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp43 + getCcrdliai().getCrdsts7f();
    }

    public void setOFFILLER44(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setCrdsts7l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setCrdsts7l(0);
        }
    }

    public String getCrdsts7c() {
        return getCcrdliai().getOFFILLER87().substring(0, 1);
    }

    public void setCrdsts7c(String source) {
        getCcrdliai().setOFFILLER87(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER87(), source, 0, 1));
    }

    public String getCrdsts7p() {
        return getCcrdliai().getOFFILLER87().substring(1, 2);
    }

    public void setCrdsts7p(String source) {
        getCcrdliai().setOFFILLER87(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER87(), source, 1, 2));
    }

    public String getCrdsts7h() {
        return getCcrdliai().getOFFILLER87().substring(2, 3);
    }

    public void setCrdsts7h(String source) {
        getCcrdliai().setOFFILLER87(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER87(), source, 2, 3));
    }

    public String getCrdsts7v() {
        return getCcrdliai().getOFFILLER87().substring(3);
    }

    public void setCrdsts7v(String source) {
        getCcrdliai().setOFFILLER87(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER87(), source, 3, 4));
    }

    public String getCrdsts7o() {
        return getCcrdliai().getCrdsts7i();
    }

    public void setCrdsts7o(String source) {
        getCcrdliai().setCrdsts7i(source);
    }

    public String getOFFILLER45() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getInfomsgl());
        tempByteBuffer1.flip();
        String temp44 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp44 + getCcrdliai().getInfomsgf();
    }

    public void setOFFILLER45(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setInfomsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setInfomsgl(0);
        }
    }

    public String getInfomsgc() {
        return getCcrdliai().getOFFILLER89().substring(0, 1);
    }

    public void setInfomsgc(String source) {
        getCcrdliai().setOFFILLER89(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER89(), source, 0, 1));
    }

    public String getInfomsgp() {
        return getCcrdliai().getOFFILLER89().substring(1, 2);
    }

    public void setInfomsgp(String source) {
        getCcrdliai().setOFFILLER89(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER89(), source, 1, 2));
    }

    public String getInfomsgh() {
        return getCcrdliai().getOFFILLER89().substring(2, 3);
    }

    public void setInfomsgh(String source) {
        getCcrdliai().setOFFILLER89(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER89(), source, 2, 3));
    }

    public String getInfomsgv() {
        return getCcrdliai().getOFFILLER89().substring(3);
    }

    public void setInfomsgv(String source) {
        getCcrdliai().setOFFILLER89(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER89(), source, 3, 4));
    }

    public String getInfomsgo() {
        return getCcrdliai().getInfomsgi();
    }

    public void setInfomsgo(String source) {
        getCcrdliai().setInfomsgi(source);
    }

    public String getOFFILLER46() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCcrdliai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp45 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp45 + getCcrdliai().getErrmsgf();
    }

    public void setOFFILLER46(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCcrdliai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCcrdliai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCcrdliai().getOFFILLER91().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCcrdliai().setOFFILLER91(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER91(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCcrdliai().getOFFILLER91().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCcrdliai().setOFFILLER91(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER91(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCcrdliai().getOFFILLER91().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCcrdliai().setOFFILLER91(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER91(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCcrdliai().getOFFILLER91().substring(3);
    }

    public void setErrmsgv(String source) {
        getCcrdliai().setOFFILLER91(
                StringUtils
                        .overlay(getCcrdliai().getOFFILLER91(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCcrdliai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCcrdliai().setErrmsgi(source);
    }

    // *Current Date                                                     
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter CocrdlicWsDateTime wsDateTime = new CocrdlicWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Common Messages                                                  
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter CocrdlicCcdaCommonMessages ccdaCommonMessages = new CocrdlicCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    // *Abend Variables                                                  
    // *COPY CSMSG02Y.                                                   
    // *Signed on user data                                              
    //       *COPY CSUSR01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSUSR01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSUSR01Y.cpy, LINE #18] SEC-USER-DATA (level: 1)
    private @Getter @Setter CocrdlicSecUserData secUserData = new CocrdlicSecUserData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    // *Dataset layouts                                                  
    // *CARD RECORD LAYOUT                                               
    //       *COPY CVACT02Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT02Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for card entity (RECLN 150)                   
    // ***************************************************************** 
    // [T-Up#INFO][CVACT02Y.cpy, LINE #5] CARD-RECORD (level: 1)
    private @Getter @Setter CocrdlicCardRecord cardRecord = new CocrdlicCardRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    // [T-Up#INFO][COCRDLIC.cbl, LINE #290] DFHCOMMAREA (level: 1)
    private @Getter @Setter CocrdlicDfhcommarea dfhcommarea = new CocrdlicDfhcommarea();

    public static @Setter(AccessLevel.PRIVATE) @Accessors(chain = true) class CocrdlicCcrdliao {
        // [T-Up#INFO][COCRDLI.CPY, LINE #291] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COCRDLI.CPY, LINE #292] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #293] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #294] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #295] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #296] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #297] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COCRDLI.CPY, LINE #298] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #299] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #300] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #301] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #302] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #303] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COCRDLI.CPY, LINE #304] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #305] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #306] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #307] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #308] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #309] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COCRDLI.CPY, LINE #310] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #311] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #312] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #313] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #314] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #315] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COCRDLI.CPY, LINE #316] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #317] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #318] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #319] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #320] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #321] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COCRDLI.CPY, LINE #322] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #323] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #324] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #325] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #326] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #327] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COCRDLI.CPY, LINE #328] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #329] PAGENOC (level: 2)
        private @Getter String pagenoc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #330] PAGENOP (level: 2)
        private @Getter String pagenop = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #331] PAGENOH (level: 2)
        private @Getter String pagenoh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #332] PAGENOV (level: 2)
        private @Getter String pagenov = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #333] PAGENOO (level: 2)
        private @Getter String pagenoo = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #334] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #335] ACCTSIDC (level: 2)
        private @Getter String acctsidc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #336] ACCTSIDP (level: 2)
        private @Getter String acctsidp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #337] ACCTSIDH (level: 2)
        private @Getter String acctsidh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #338] ACCTSIDV (level: 2)
        private @Getter String acctsidv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #339] ACCTSIDO (level: 2)
        private @Getter String acctsido = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #340] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #341] CARDSIDC (level: 2)
        private @Getter String cardsidc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #342] CARDSIDP (level: 2)
        private @Getter String cardsidp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #343] CARDSIDH (level: 2)
        private @Getter String cardsidh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #344] CARDSIDV (level: 2)
        private @Getter String cardsidv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #345] CARDSIDO (level: 2)
        private @Getter String cardsido = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #346] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #347] CRDSEL1C (level: 2)
        private @Getter String crdsel1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #348] CRDSEL1P (level: 2)
        private @Getter String crdsel1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #349] CRDSEL1H (level: 2)
        private @Getter String crdsel1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #350] CRDSEL1V (level: 2)
        private @Getter String crdsel1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #351] CRDSEL1O (level: 2)
        private @Getter String crdsel1o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #352] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #353] ACCTNO1C (level: 2)
        private @Getter String acctno1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #354] ACCTNO1P (level: 2)
        private @Getter String acctno1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #355] ACCTNO1H (level: 2)
        private @Getter String acctno1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #356] ACCTNO1V (level: 2)
        private @Getter String acctno1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #357] ACCTNO1O (level: 2)
        private @Getter String acctno1o = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #358] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #359] CRDNUM1C (level: 2)
        private @Getter String crdnum1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #360] CRDNUM1P (level: 2)
        private @Getter String crdnum1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #361] CRDNUM1H (level: 2)
        private @Getter String crdnum1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #362] CRDNUM1V (level: 2)
        private @Getter String crdnum1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #363] CRDNUM1O (level: 2)
        private @Getter String crdnum1o = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #364] FILLER (level: 2)
        private @Getter String OFFILLER14 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #365] CRDSTS1C (level: 2)
        private @Getter String crdsts1c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #366] CRDSTS1P (level: 2)
        private @Getter String crdsts1p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #367] CRDSTS1H (level: 2)
        private @Getter String crdsts1h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #368] CRDSTS1V (level: 2)
        private @Getter String crdsts1v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #369] CRDSTS1O (level: 2)
        private @Getter String crdsts1o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #370] FILLER (level: 2)
        private @Getter String OFFILLER15 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #371] CRDSEL2C (level: 2)
        private @Getter String crdsel2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #372] CRDSEL2P (level: 2)
        private @Getter String crdsel2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #373] CRDSEL2H (level: 2)
        private @Getter String crdsel2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #374] CRDSEL2V (level: 2)
        private @Getter String crdsel2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #375] CRDSEL2O (level: 2)
        private @Getter String crdsel2o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #376] FILLER (level: 2)
        private @Getter String OFFILLER16 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #377] CRDSTP2C (level: 2)
        private @Getter String crdstp2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #378] CRDSTP2P (level: 2)
        private @Getter String crdstp2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #379] CRDSTP2H (level: 2)
        private @Getter String crdstp2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #380] CRDSTP2V (level: 2)
        private @Getter String crdstp2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #381] CRDSTP2O (level: 2)
        private @Getter String crdstp2o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #382] FILLER (level: 2)
        private @Getter String OFFILLER17 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #383] ACCTNO2C (level: 2)
        private @Getter String acctno2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #384] ACCTNO2P (level: 2)
        private @Getter String acctno2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #385] ACCTNO2H (level: 2)
        private @Getter String acctno2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #386] ACCTNO2V (level: 2)
        private @Getter String acctno2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #387] ACCTNO2O (level: 2)
        private @Getter String acctno2o = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #388] FILLER (level: 2)
        private @Getter String OFFILLER18 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #389] CRDNUM2C (level: 2)
        private @Getter String crdnum2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #390] CRDNUM2P (level: 2)
        private @Getter String crdnum2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #391] CRDNUM2H (level: 2)
        private @Getter String crdnum2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #392] CRDNUM2V (level: 2)
        private @Getter String crdnum2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #393] CRDNUM2O (level: 2)
        private @Getter String crdnum2o = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #394] FILLER (level: 2)
        private @Getter String OFFILLER19 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #395] CRDSTS2C (level: 2)
        private @Getter String crdsts2c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #396] CRDSTS2P (level: 2)
        private @Getter String crdsts2p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #397] CRDSTS2H (level: 2)
        private @Getter String crdsts2h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #398] CRDSTS2V (level: 2)
        private @Getter String crdsts2v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #399] CRDSTS2O (level: 2)
        private @Getter String crdsts2o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #400] FILLER (level: 2)
        private @Getter String OFFILLER20 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #401] CRDSEL3C (level: 2)
        private @Getter String crdsel3c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #402] CRDSEL3P (level: 2)
        private @Getter String crdsel3p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #403] CRDSEL3H (level: 2)
        private @Getter String crdsel3h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #404] CRDSEL3V (level: 2)
        private @Getter String crdsel3v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #405] CRDSEL3O (level: 2)
        private @Getter String crdsel3o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #406] FILLER (level: 2)
        private @Getter String OFFILLER21 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #407] CRDSTP3C (level: 2)
        private @Getter String crdstp3c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #408] CRDSTP3P (level: 2)
        private @Getter String crdstp3p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #409] CRDSTP3H (level: 2)
        private @Getter String crdstp3h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #410] CRDSTP3V (level: 2)
        private @Getter String crdstp3v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #411] CRDSTP3O (level: 2)
        private @Getter String crdstp3o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #412] FILLER (level: 2)
        private @Getter String OFFILLER22 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #413] ACCTNO3C (level: 2)
        private @Getter String acctno3c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #414] ACCTNO3P (level: 2)
        private @Getter String acctno3p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #415] ACCTNO3H (level: 2)
        private @Getter String acctno3h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #416] ACCTNO3V (level: 2)
        private @Getter String acctno3v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #417] ACCTNO3O (level: 2)
        private @Getter String acctno3o = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #418] FILLER (level: 2)
        private @Getter String OFFILLER23 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #419] CRDNUM3C (level: 2)
        private @Getter String crdnum3c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #420] CRDNUM3P (level: 2)
        private @Getter String crdnum3p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #421] CRDNUM3H (level: 2)
        private @Getter String crdnum3h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #422] CRDNUM3V (level: 2)
        private @Getter String crdnum3v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #423] CRDNUM3O (level: 2)
        private @Getter String crdnum3o = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #424] FILLER (level: 2)
        private @Getter String OFFILLER24 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #425] CRDSTS3C (level: 2)
        private @Getter String crdsts3c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #426] CRDSTS3P (level: 2)
        private @Getter String crdsts3p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #427] CRDSTS3H (level: 2)
        private @Getter String crdsts3h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #428] CRDSTS3V (level: 2)
        private @Getter String crdsts3v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #429] CRDSTS3O (level: 2)
        private @Getter String crdsts3o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #430] FILLER (level: 2)
        private @Getter String OFFILLER25 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #431] CRDSEL4C (level: 2)
        private @Getter String crdsel4c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #432] CRDSEL4P (level: 2)
        private @Getter String crdsel4p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #433] CRDSEL4H (level: 2)
        private @Getter String crdsel4h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #434] CRDSEL4V (level: 2)
        private @Getter String crdsel4v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #435] CRDSEL4O (level: 2)
        private @Getter String crdsel4o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #436] FILLER (level: 2)
        private @Getter String OFFILLER26 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #437] CRDSTP4C (level: 2)
        private @Getter String crdstp4c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #438] CRDSTP4P (level: 2)
        private @Getter String crdstp4p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #439] CRDSTP4H (level: 2)
        private @Getter String crdstp4h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #440] CRDSTP4V (level: 2)
        private @Getter String crdstp4v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #441] CRDSTP4O (level: 2)
        private @Getter String crdstp4o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #442] FILLER (level: 2)
        private @Getter String OFFILLER27 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #443] ACCTNO4C (level: 2)
        private @Getter String acctno4c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #444] ACCTNO4P (level: 2)
        private @Getter String acctno4p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #445] ACCTNO4H (level: 2)
        private @Getter String acctno4h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #446] ACCTNO4V (level: 2)
        private @Getter String acctno4v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #447] ACCTNO4O (level: 2)
        private @Getter String acctno4o = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #448] FILLER (level: 2)
        private @Getter String OFFILLER28 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #449] CRDNUM4C (level: 2)
        private @Getter String crdnum4c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #450] CRDNUM4P (level: 2)
        private @Getter String crdnum4p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #451] CRDNUM4H (level: 2)
        private @Getter String crdnum4h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #452] CRDNUM4V (level: 2)
        private @Getter String crdnum4v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #453] CRDNUM4O (level: 2)
        private @Getter String crdnum4o = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #454] FILLER (level: 2)
        private @Getter String OFFILLER29 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #455] CRDSTS4C (level: 2)
        private @Getter String crdsts4c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #456] CRDSTS4P (level: 2)
        private @Getter String crdsts4p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #457] CRDSTS4H (level: 2)
        private @Getter String crdsts4h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #458] CRDSTS4V (level: 2)
        private @Getter String crdsts4v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #459] CRDSTS4O (level: 2)
        private @Getter String crdsts4o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #460] FILLER (level: 2)
        private @Getter String OFFILLER30 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #461] CRDSEL5C (level: 2)
        private @Getter String crdsel5c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #462] CRDSEL5P (level: 2)
        private @Getter String crdsel5p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #463] CRDSEL5H (level: 2)
        private @Getter String crdsel5h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #464] CRDSEL5V (level: 2)
        private @Getter String crdsel5v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #465] CRDSEL5O (level: 2)
        private @Getter String crdsel5o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #466] FILLER (level: 2)
        private @Getter String OFFILLER31 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #467] CRDSTP5C (level: 2)
        private @Getter String crdstp5c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #468] CRDSTP5P (level: 2)
        private @Getter String crdstp5p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #469] CRDSTP5H (level: 2)
        private @Getter String crdstp5h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #470] CRDSTP5V (level: 2)
        private @Getter String crdstp5v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #471] CRDSTP5O (level: 2)
        private @Getter String crdstp5o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #472] FILLER (level: 2)
        private @Getter String OFFILLER32 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #473] ACCTNO5C (level: 2)
        private @Getter String acctno5c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #474] ACCTNO5P (level: 2)
        private @Getter String acctno5p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #475] ACCTNO5H (level: 2)
        private @Getter String acctno5h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #476] ACCTNO5V (level: 2)
        private @Getter String acctno5v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #477] ACCTNO5O (level: 2)
        private @Getter String acctno5o = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #478] FILLER (level: 2)
        private @Getter String OFFILLER33 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #479] CRDNUM5C (level: 2)
        private @Getter String crdnum5c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #480] CRDNUM5P (level: 2)
        private @Getter String crdnum5p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #481] CRDNUM5H (level: 2)
        private @Getter String crdnum5h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #482] CRDNUM5V (level: 2)
        private @Getter String crdnum5v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #483] CRDNUM5O (level: 2)
        private @Getter String crdnum5o = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #484] FILLER (level: 2)
        private @Getter String OFFILLER34 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #485] CRDSTS5C (level: 2)
        private @Getter String crdsts5c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #486] CRDSTS5P (level: 2)
        private @Getter String crdsts5p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #487] CRDSTS5H (level: 2)
        private @Getter String crdsts5h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #488] CRDSTS5V (level: 2)
        private @Getter String crdsts5v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #489] CRDSTS5O (level: 2)
        private @Getter String crdsts5o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #490] FILLER (level: 2)
        private @Getter String OFFILLER35 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #491] CRDSEL6C (level: 2)
        private @Getter String crdsel6c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #492] CRDSEL6P (level: 2)
        private @Getter String crdsel6p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #493] CRDSEL6H (level: 2)
        private @Getter String crdsel6h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #494] CRDSEL6V (level: 2)
        private @Getter String crdsel6v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #495] CRDSEL6O (level: 2)
        private @Getter String crdsel6o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #496] FILLER (level: 2)
        private @Getter String OFFILLER36 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #497] CRDSTP6C (level: 2)
        private @Getter String crdstp6c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #498] CRDSTP6P (level: 2)
        private @Getter String crdstp6p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #499] CRDSTP6H (level: 2)
        private @Getter String crdstp6h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #500] CRDSTP6V (level: 2)
        private @Getter String crdstp6v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #501] CRDSTP6O (level: 2)
        private @Getter String crdstp6o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #502] FILLER (level: 2)
        private @Getter String OFFILLER37 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #503] ACCTNO6C (level: 2)
        private @Getter String acctno6c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #504] ACCTNO6P (level: 2)
        private @Getter String acctno6p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #505] ACCTNO6H (level: 2)
        private @Getter String acctno6h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #506] ACCTNO6V (level: 2)
        private @Getter String acctno6v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #507] ACCTNO6O (level: 2)
        private @Getter String acctno6o = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #508] FILLER (level: 2)
        private @Getter String OFFILLER38 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #509] CRDNUM6C (level: 2)
        private @Getter String crdnum6c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #510] CRDNUM6P (level: 2)
        private @Getter String crdnum6p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #511] CRDNUM6H (level: 2)
        private @Getter String crdnum6h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #512] CRDNUM6V (level: 2)
        private @Getter String crdnum6v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #513] CRDNUM6O (level: 2)
        private @Getter String crdnum6o = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #514] FILLER (level: 2)
        private @Getter String OFFILLER39 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #515] CRDSTS6C (level: 2)
        private @Getter String crdsts6c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #516] CRDSTS6P (level: 2)
        private @Getter String crdsts6p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #517] CRDSTS6H (level: 2)
        private @Getter String crdsts6h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #518] CRDSTS6V (level: 2)
        private @Getter String crdsts6v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #519] CRDSTS6O (level: 2)
        private @Getter String crdsts6o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #520] FILLER (level: 2)
        private @Getter String OFFILLER40 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #521] CRDSEL7C (level: 2)
        private @Getter String crdsel7c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #522] CRDSEL7P (level: 2)
        private @Getter String crdsel7p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #523] CRDSEL7H (level: 2)
        private @Getter String crdsel7h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #524] CRDSEL7V (level: 2)
        private @Getter String crdsel7v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #525] CRDSEL7O (level: 2)
        private @Getter String crdsel7o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #526] FILLER (level: 2)
        private @Getter String OFFILLER41 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #527] CRDSTP7C (level: 2)
        private @Getter String crdstp7c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #528] CRDSTP7P (level: 2)
        private @Getter String crdstp7p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #529] CRDSTP7H (level: 2)
        private @Getter String crdstp7h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #530] CRDSTP7V (level: 2)
        private @Getter String crdstp7v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #531] CRDSTP7O (level: 2)
        private @Getter String crdstp7o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #532] FILLER (level: 2)
        private @Getter String OFFILLER42 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #533] ACCTNO7C (level: 2)
        private @Getter String acctno7c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #534] ACCTNO7P (level: 2)
        private @Getter String acctno7p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #535] ACCTNO7H (level: 2)
        private @Getter String acctno7h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #536] ACCTNO7V (level: 2)
        private @Getter String acctno7v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #537] ACCTNO7O (level: 2)
        private @Getter String acctno7o = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COCRDLI.CPY, LINE #538] FILLER (level: 2)
        private @Getter String OFFILLER43 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #539] CRDNUM7C (level: 2)
        private @Getter String crdnum7c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #540] CRDNUM7P (level: 2)
        private @Getter String crdnum7p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #541] CRDNUM7H (level: 2)
        private @Getter String crdnum7h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #542] CRDNUM7V (level: 2)
        private @Getter String crdnum7v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #543] CRDNUM7O (level: 2)
        private @Getter String crdnum7o = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COCRDLI.CPY, LINE #544] FILLER (level: 2)
        private @Getter String OFFILLER44 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #545] CRDSTS7C (level: 2)
        private @Getter String crdsts7c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #546] CRDSTS7P (level: 2)
        private @Getter String crdsts7p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #547] CRDSTS7H (level: 2)
        private @Getter String crdsts7h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #548] CRDSTS7V (level: 2)
        private @Getter String crdsts7v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #549] CRDSTS7O (level: 2)
        private @Getter String crdsts7o = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #550] FILLER (level: 2)
        private @Getter String OFFILLER45 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #551] INFOMSGC (level: 2)
        private @Getter String infomsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #552] INFOMSGP (level: 2)
        private @Getter String infomsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #553] INFOMSGH (level: 2)
        private @Getter String infomsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #554] INFOMSGV (level: 2)
        private @Getter String infomsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #555] INFOMSGO (level: 2)
        private @Getter String infomsgo = StringUtils.repeat(' ', 45);
        // [T-Up#INFO][COCRDLI.CPY, LINE #556] FILLER (level: 2)
        private @Getter String OFFILLER46 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COCRDLI.CPY, LINE #557] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #558] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #559] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #560] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COCRDLI.CPY, LINE #561] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(pagenoc);
            sb.append(pagenop);
            sb.append(pagenoh);
            sb.append(pagenov);
            sb.append(pagenoo);
            sb.append(OFFILLER9);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER10);
            sb.append(cardsidc);
            sb.append(cardsidp);
            sb.append(cardsidh);
            sb.append(cardsidv);
            sb.append(cardsido);
            sb.append(OFFILLER11);
            sb.append(crdsel1c);
            sb.append(crdsel1p);
            sb.append(crdsel1h);
            sb.append(crdsel1v);
            sb.append(crdsel1o);
            sb.append(OFFILLER12);
            sb.append(acctno1c);
            sb.append(acctno1p);
            sb.append(acctno1h);
            sb.append(acctno1v);
            sb.append(acctno1o);
            sb.append(OFFILLER13);
            sb.append(crdnum1c);
            sb.append(crdnum1p);
            sb.append(crdnum1h);
            sb.append(crdnum1v);
            sb.append(crdnum1o);
            sb.append(OFFILLER14);
            sb.append(crdsts1c);
            sb.append(crdsts1p);
            sb.append(crdsts1h);
            sb.append(crdsts1v);
            sb.append(crdsts1o);
            sb.append(OFFILLER15);
            sb.append(crdsel2c);
            sb.append(crdsel2p);
            sb.append(crdsel2h);
            sb.append(crdsel2v);
            sb.append(crdsel2o);
            sb.append(OFFILLER16);
            sb.append(crdstp2c);
            sb.append(crdstp2p);
            sb.append(crdstp2h);
            sb.append(crdstp2v);
            sb.append(crdstp2o);
            sb.append(OFFILLER17);
            sb.append(acctno2c);
            sb.append(acctno2p);
            sb.append(acctno2h);
            sb.append(acctno2v);
            sb.append(acctno2o);
            sb.append(OFFILLER18);
            sb.append(crdnum2c);
            sb.append(crdnum2p);
            sb.append(crdnum2h);
            sb.append(crdnum2v);
            sb.append(crdnum2o);
            sb.append(OFFILLER19);
            sb.append(crdsts2c);
            sb.append(crdsts2p);
            sb.append(crdsts2h);
            sb.append(crdsts2v);
            sb.append(crdsts2o);
            sb.append(OFFILLER20);
            sb.append(crdsel3c);
            sb.append(crdsel3p);
            sb.append(crdsel3h);
            sb.append(crdsel3v);
            sb.append(crdsel3o);
            sb.append(OFFILLER21);
            sb.append(crdstp3c);
            sb.append(crdstp3p);
            sb.append(crdstp3h);
            sb.append(crdstp3v);
            sb.append(crdstp3o);
            sb.append(OFFILLER22);
            sb.append(acctno3c);
            sb.append(acctno3p);
            sb.append(acctno3h);
            sb.append(acctno3v);
            sb.append(acctno3o);
            sb.append(OFFILLER23);
            sb.append(crdnum3c);
            sb.append(crdnum3p);
            sb.append(crdnum3h);
            sb.append(crdnum3v);
            sb.append(crdnum3o);
            sb.append(OFFILLER24);
            sb.append(crdsts3c);
            sb.append(crdsts3p);
            sb.append(crdsts3h);
            sb.append(crdsts3v);
            sb.append(crdsts3o);
            sb.append(OFFILLER25);
            sb.append(crdsel4c);
            sb.append(crdsel4p);
            sb.append(crdsel4h);
            sb.append(crdsel4v);
            sb.append(crdsel4o);
            sb.append(OFFILLER26);
            sb.append(crdstp4c);
            sb.append(crdstp4p);
            sb.append(crdstp4h);
            sb.append(crdstp4v);
            sb.append(crdstp4o);
            sb.append(OFFILLER27);
            sb.append(acctno4c);
            sb.append(acctno4p);
            sb.append(acctno4h);
            sb.append(acctno4v);
            sb.append(acctno4o);
            sb.append(OFFILLER28);
            sb.append(crdnum4c);
            sb.append(crdnum4p);
            sb.append(crdnum4h);
            sb.append(crdnum4v);
            sb.append(crdnum4o);
            sb.append(OFFILLER29);
            sb.append(crdsts4c);
            sb.append(crdsts4p);
            sb.append(crdsts4h);
            sb.append(crdsts4v);
            sb.append(crdsts4o);
            sb.append(OFFILLER30);
            sb.append(crdsel5c);
            sb.append(crdsel5p);
            sb.append(crdsel5h);
            sb.append(crdsel5v);
            sb.append(crdsel5o);
            sb.append(OFFILLER31);
            sb.append(crdstp5c);
            sb.append(crdstp5p);
            sb.append(crdstp5h);
            sb.append(crdstp5v);
            sb.append(crdstp5o);
            sb.append(OFFILLER32);
            sb.append(acctno5c);
            sb.append(acctno5p);
            sb.append(acctno5h);
            sb.append(acctno5v);
            sb.append(acctno5o);
            sb.append(OFFILLER33);
            sb.append(crdnum5c);
            sb.append(crdnum5p);
            sb.append(crdnum5h);
            sb.append(crdnum5v);
            sb.append(crdnum5o);
            sb.append(OFFILLER34);
            sb.append(crdsts5c);
            sb.append(crdsts5p);
            sb.append(crdsts5h);
            sb.append(crdsts5v);
            sb.append(crdsts5o);
            sb.append(OFFILLER35);
            sb.append(crdsel6c);
            sb.append(crdsel6p);
            sb.append(crdsel6h);
            sb.append(crdsel6v);
            sb.append(crdsel6o);
            sb.append(OFFILLER36);
            sb.append(crdstp6c);
            sb.append(crdstp6p);
            sb.append(crdstp6h);
            sb.append(crdstp6v);
            sb.append(crdstp6o);
            sb.append(OFFILLER37);
            sb.append(acctno6c);
            sb.append(acctno6p);
            sb.append(acctno6h);
            sb.append(acctno6v);
            sb.append(acctno6o);
            sb.append(OFFILLER38);
            sb.append(crdnum6c);
            sb.append(crdnum6p);
            sb.append(crdnum6h);
            sb.append(crdnum6v);
            sb.append(crdnum6o);
            sb.append(OFFILLER39);
            sb.append(crdsts6c);
            sb.append(crdsts6p);
            sb.append(crdsts6h);
            sb.append(crdsts6v);
            sb.append(crdsts6o);
            sb.append(OFFILLER40);
            sb.append(crdsel7c);
            sb.append(crdsel7p);
            sb.append(crdsel7h);
            sb.append(crdsel7v);
            sb.append(crdsel7o);
            sb.append(OFFILLER41);
            sb.append(crdstp7c);
            sb.append(crdstp7p);
            sb.append(crdstp7h);
            sb.append(crdstp7v);
            sb.append(crdstp7o);
            sb.append(OFFILLER42);
            sb.append(acctno7c);
            sb.append(acctno7p);
            sb.append(acctno7h);
            sb.append(acctno7v);
            sb.append(acctno7o);
            sb.append(OFFILLER43);
            sb.append(crdnum7c);
            sb.append(crdnum7p);
            sb.append(crdnum7h);
            sb.append(crdnum7v);
            sb.append(crdnum7o);
            sb.append(OFFILLER44);
            sb.append(crdsts7c);
            sb.append(crdsts7p);
            sb.append(crdsts7h);
            sb.append(crdsts7v);
            sb.append(crdsts7o);
            sb.append(OFFILLER45);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER46);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(pagenoc);
            sb.append(pagenop);
            sb.append(pagenoh);
            sb.append(pagenov);
            sb.append(pagenoo);
            sb.append(OFFILLER9);
            sb.append(acctsidc);
            sb.append(acctsidp);
            sb.append(acctsidh);
            sb.append(acctsidv);
            sb.append(acctsido);
            sb.append(OFFILLER10);
            sb.append(cardsidc);
            sb.append(cardsidp);
            sb.append(cardsidh);
            sb.append(cardsidv);
            sb.append(cardsido);
            sb.append(OFFILLER11);
            sb.append(crdsel1c);
            sb.append(crdsel1p);
            sb.append(crdsel1h);
            sb.append(crdsel1v);
            sb.append(crdsel1o);
            sb.append(OFFILLER12);
            sb.append(acctno1c);
            sb.append(acctno1p);
            sb.append(acctno1h);
            sb.append(acctno1v);
            sb.append(acctno1o);
            sb.append(OFFILLER13);
            sb.append(crdnum1c);
            sb.append(crdnum1p);
            sb.append(crdnum1h);
            sb.append(crdnum1v);
            sb.append(crdnum1o);
            sb.append(OFFILLER14);
            sb.append(crdsts1c);
            sb.append(crdsts1p);
            sb.append(crdsts1h);
            sb.append(crdsts1v);
            sb.append(crdsts1o);
            sb.append(OFFILLER15);
            sb.append(crdsel2c);
            sb.append(crdsel2p);
            sb.append(crdsel2h);
            sb.append(crdsel2v);
            sb.append(crdsel2o);
            sb.append(OFFILLER16);
            sb.append(crdstp2c);
            sb.append(crdstp2p);
            sb.append(crdstp2h);
            sb.append(crdstp2v);
            sb.append(crdstp2o);
            sb.append(OFFILLER17);
            sb.append(acctno2c);
            sb.append(acctno2p);
            sb.append(acctno2h);
            sb.append(acctno2v);
            sb.append(acctno2o);
            sb.append(OFFILLER18);
            sb.append(crdnum2c);
            sb.append(crdnum2p);
            sb.append(crdnum2h);
            sb.append(crdnum2v);
            sb.append(crdnum2o);
            sb.append(OFFILLER19);
            sb.append(crdsts2c);
            sb.append(crdsts2p);
            sb.append(crdsts2h);
            sb.append(crdsts2v);
            sb.append(crdsts2o);
            sb.append(OFFILLER20);
            sb.append(crdsel3c);
            sb.append(crdsel3p);
            sb.append(crdsel3h);
            sb.append(crdsel3v);
            sb.append(crdsel3o);
            sb.append(OFFILLER21);
            sb.append(crdstp3c);
            sb.append(crdstp3p);
            sb.append(crdstp3h);
            sb.append(crdstp3v);
            sb.append(crdstp3o);
            sb.append(OFFILLER22);
            sb.append(acctno3c);
            sb.append(acctno3p);
            sb.append(acctno3h);
            sb.append(acctno3v);
            sb.append(acctno3o);
            sb.append(OFFILLER23);
            sb.append(crdnum3c);
            sb.append(crdnum3p);
            sb.append(crdnum3h);
            sb.append(crdnum3v);
            sb.append(crdnum3o);
            sb.append(OFFILLER24);
            sb.append(crdsts3c);
            sb.append(crdsts3p);
            sb.append(crdsts3h);
            sb.append(crdsts3v);
            sb.append(crdsts3o);
            sb.append(OFFILLER25);
            sb.append(crdsel4c);
            sb.append(crdsel4p);
            sb.append(crdsel4h);
            sb.append(crdsel4v);
            sb.append(crdsel4o);
            sb.append(OFFILLER26);
            sb.append(crdstp4c);
            sb.append(crdstp4p);
            sb.append(crdstp4h);
            sb.append(crdstp4v);
            sb.append(crdstp4o);
            sb.append(OFFILLER27);
            sb.append(acctno4c);
            sb.append(acctno4p);
            sb.append(acctno4h);
            sb.append(acctno4v);
            sb.append(acctno4o);
            sb.append(OFFILLER28);
            sb.append(crdnum4c);
            sb.append(crdnum4p);
            sb.append(crdnum4h);
            sb.append(crdnum4v);
            sb.append(crdnum4o);
            sb.append(OFFILLER29);
            sb.append(crdsts4c);
            sb.append(crdsts4p);
            sb.append(crdsts4h);
            sb.append(crdsts4v);
            sb.append(crdsts4o);
            sb.append(OFFILLER30);
            sb.append(crdsel5c);
            sb.append(crdsel5p);
            sb.append(crdsel5h);
            sb.append(crdsel5v);
            sb.append(crdsel5o);
            sb.append(OFFILLER31);
            sb.append(crdstp5c);
            sb.append(crdstp5p);
            sb.append(crdstp5h);
            sb.append(crdstp5v);
            sb.append(crdstp5o);
            sb.append(OFFILLER32);
            sb.append(acctno5c);
            sb.append(acctno5p);
            sb.append(acctno5h);
            sb.append(acctno5v);
            sb.append(acctno5o);
            sb.append(OFFILLER33);
            sb.append(crdnum5c);
            sb.append(crdnum5p);
            sb.append(crdnum5h);
            sb.append(crdnum5v);
            sb.append(crdnum5o);
            sb.append(OFFILLER34);
            sb.append(crdsts5c);
            sb.append(crdsts5p);
            sb.append(crdsts5h);
            sb.append(crdsts5v);
            sb.append(crdsts5o);
            sb.append(OFFILLER35);
            sb.append(crdsel6c);
            sb.append(crdsel6p);
            sb.append(crdsel6h);
            sb.append(crdsel6v);
            sb.append(crdsel6o);
            sb.append(OFFILLER36);
            sb.append(crdstp6c);
            sb.append(crdstp6p);
            sb.append(crdstp6h);
            sb.append(crdstp6v);
            sb.append(crdstp6o);
            sb.append(OFFILLER37);
            sb.append(acctno6c);
            sb.append(acctno6p);
            sb.append(acctno6h);
            sb.append(acctno6v);
            sb.append(acctno6o);
            sb.append(OFFILLER38);
            sb.append(crdnum6c);
            sb.append(crdnum6p);
            sb.append(crdnum6h);
            sb.append(crdnum6v);
            sb.append(crdnum6o);
            sb.append(OFFILLER39);
            sb.append(crdsts6c);
            sb.append(crdsts6p);
            sb.append(crdsts6h);
            sb.append(crdsts6v);
            sb.append(crdsts6o);
            sb.append(OFFILLER40);
            sb.append(crdsel7c);
            sb.append(crdsel7p);
            sb.append(crdsel7h);
            sb.append(crdsel7v);
            sb.append(crdsel7o);
            sb.append(OFFILLER41);
            sb.append(crdstp7c);
            sb.append(crdstp7p);
            sb.append(crdstp7h);
            sb.append(crdstp7v);
            sb.append(crdstp7o);
            sb.append(OFFILLER42);
            sb.append(acctno7c);
            sb.append(acctno7p);
            sb.append(acctno7h);
            sb.append(acctno7v);
            sb.append(acctno7o);
            sb.append(OFFILLER43);
            sb.append(crdnum7c);
            sb.append(crdnum7p);
            sb.append(crdnum7h);
            sb.append(crdnum7v);
            sb.append(crdnum7o);
            sb.append(OFFILLER44);
            sb.append(crdsts7c);
            sb.append(crdsts7p);
            sb.append(crdsts7h);
            sb.append(crdsts7v);
            sb.append(crdsts7o);
            sb.append(OFFILLER45);
            sb.append(infomsgc);
            sb.append(infomsgp);
            sb.append(infomsgh);
            sb.append(infomsgv);
            sb.append(infomsgo);
            sb.append(OFFILLER46);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }
    }

    public void setWsCommarea(String source) {
        wsCommarea = StringUtils.truncate(StringUtils.rightPad(source, 2000),
                2000);
    }
}
