package aws.carddemo.mapper;

import com.tmax.openframe.DataConverter;
import org.apache.commons.lang3.StringUtils;
import org.mapstruct.*;
import org.mapstruct.factory.*;
import aws.carddemo.variable.group.CoactvwcCardXrefRecord;
import aws.carddemo.dto.AwsM2CarddemoCardxrefVsamKsdsDto;
import aws.carddemo.variable.group.CoactvwcCarddemoCommarea;
import aws.carddemo.variable.group.Comen01cDfhcommarea;
import aws.carddemo.variable.group.CoactvwcCustomerRecord;
import aws.carddemo.dto.AwsM2CarddemoCustdataVsamKsdsDto;
import aws.carddemo.variable.group.CoactvwcAccountRecord;
import aws.carddemo.dto.AwsM2CarddemoAcctdataVsamKsdsDto;
import lombok.*;
import java.math.*;
import java.util.*;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:46 UTC</p>
 * <hr>
 * <p>Mapper class for converting data between different classes</p>
 */
public interface CoactvwcMapperInterface {
    /** 
     * <p>Mapper class to convert data for CICS processing</p>
     * <ul>
     * <li>source class: {@link CoactvwcCardXrefRecord}</li>
     * <li>target class: {@link AwsM2CarddemoCardxrefVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface CoactvwcCardXrefRecordToAwsM2CarddemoCardxrefVsamKsdsDto {
        CoactvwcCardXrefRecordToAwsM2CarddemoCardxrefVsamKsdsDto INSTANCE = Mappers
                .getMapper(CoactvwcCardXrefRecordToAwsM2CarddemoCardxrefVsamKsdsDto.class);

        @Mapping(source = "xrefCardNum", target = "xrefCardNum")
        @Mapping(source = "xrefCustId", target = "xrefCustId")
        @Mapping(source = "xrefAcctId", target = "xrefAcctId")
        @Mapping(source = "OFFILLER1", target = "filler")
        AwsM2CarddemoCardxrefVsamKsdsDto toTarget(CoactvwcCardXrefRecord source);

        @Mapping(source = "xrefCardNum", target = "xrefCardNum")
        @Mapping(source = "xrefCustId", target = "xrefCustId")
        @Mapping(source = "xrefAcctId", target = "xrefAcctId")
        @Mapping(source = "filler", target = "OFFILLER1")
        CoactvwcCardXrefRecord toSource(AwsM2CarddemoCardxrefVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for CICS processing</p>
     * <ul>
     * <li>source class: {@link CoactvwcCarddemoCommarea}</li>
     * <li>target class: {@link Comen01cDfhcommarea}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface CoactvwcCarddemoCommareaToComen01cDfhcommarea {
        CoactvwcCarddemoCommareaToComen01cDfhcommarea INSTANCE = Mappers
                .getMapper(CoactvwcCarddemoCommareaToComen01cDfhcommarea.class);

        Comen01cDfhcommarea toTarget(CoactvwcCarddemoCommarea source);

        CoactvwcCarddemoCommarea toSource(Comen01cDfhcommarea source);

        @AfterMapping
        default void makeTarget(CoactvwcCarddemoCommarea source,
                @MappingTarget Comen01cDfhcommarea target) {
            target.setLkCommarea(source.getCdemoGeneralInfo()
                    .getCdemoFromTranid()
                    + source.getCdemoGeneralInfo().getCdemoFromProgram()
                    + source.getCdemoGeneralInfo().getCdemoToTranid()
                    + source.getCdemoGeneralInfo().getCdemoToProgram()
                    + source.getCdemoGeneralInfo().getCdemoUserId()
                    + source.getCdemoGeneralInfo().getCdemoUserType()
                    + DataConverter.convZonedLongToString(source
                            .getCdemoGeneralInfo().getCdemoPgmContext(), 1)
                    + DataConverter.convZonedLongToString(source
                            .getCdemoCustomerInfo().getCdemoCustId(), 9)
                    + source.getCdemoCustomerInfo().getCdemoCustFname()
                    + source.getCdemoCustomerInfo().getCdemoCustMname()
                    + source.getCdemoCustomerInfo().getCdemoCustLname()
                    + DataConverter.convZonedLongToString(source
                            .getCdemoAccountInfo().getCdemoAcctId(), 11)
                    + source.getCdemoAccountInfo().getCdemoAcctStatus()
                    + DataConverter.convZonedLongToString(source
                            .getCdemoCardInfo().getCdemoCardNum(), 16)
                    + source.getCdemoMoreInfo().getCdemoLastMap()
                    + source.getCdemoMoreInfo().getCdemoLastMapset());
        }

        @AfterMapping
        default void makeSource(Comen01cDfhcommarea source,
                @MappingTarget CoactvwcCarddemoCommarea target) {
            target.getCdemoGeneralInfo().setCdemoFromTranid(
                    source.getLkCommarea().substring(0, 4));
            target.getCdemoGeneralInfo().setCdemoFromProgram(
                    source.getLkCommarea().substring(4, 12));
            target.getCdemoGeneralInfo().setCdemoToTranid(
                    source.getLkCommarea().substring(12, 16));
            target.getCdemoGeneralInfo().setCdemoToProgram(
                    source.getLkCommarea().substring(16, 24));
            target.getCdemoGeneralInfo().setCdemoUserId(
                    source.getLkCommarea().substring(24, 32));
            target.getCdemoGeneralInfo().setCdemoUserType(
                    source.getLkCommarea().substring(32, 33));
            target.getCdemoGeneralInfo().setCdemoPgmContext(
                    ((int) DataConverter.convZonedStringToLong(source
                            .getLkCommarea().substring(33, 34), 1)));
            target.getCdemoCustomerInfo().setCdemoCustId(
                    ((int) DataConverter.convZonedStringToLong(source
                            .getLkCommarea().substring(34, 43), 9)));
            target.getCdemoCustomerInfo().setCdemoCustFname(
                    source.getLkCommarea().substring(43, 68));
            target.getCdemoCustomerInfo().setCdemoCustMname(
                    source.getLkCommarea().substring(68, 93));
            target.getCdemoCustomerInfo().setCdemoCustLname(
                    source.getLkCommarea().substring(93, 118));
            target.getCdemoAccountInfo().setCdemoAcctId(
                    DataConverter.convZonedStringToLong(source.getLkCommarea()
                            .substring(118, 129), 11));
            target.getCdemoAccountInfo().setCdemoAcctStatus(
                    source.getLkCommarea().substring(129, 130));
            target.getCdemoCardInfo().setCdemoCardNum(
                    DataConverter.convZonedStringToLong(source.getLkCommarea()
                            .substring(130, 146), 16));
            target.getCdemoMoreInfo().setCdemoLastMap(
                    source.getLkCommarea().substring(146, 153));
            target.getCdemoMoreInfo().setCdemoLastMapset(
                    source.getLkCommarea().substring(153, 160));
        }
    }

    /** 
     * <p>Mapper class to convert data for CICS processing</p>
     * <ul>
     * <li>source class: {@link CoactvwcCustomerRecord}</li>
     * <li>target class: {@link AwsM2CarddemoCustdataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface CoactvwcCustomerRecordToAwsM2CarddemoCustdataVsamKsdsDto {
        CoactvwcCustomerRecordToAwsM2CarddemoCustdataVsamKsdsDto INSTANCE = Mappers
                .getMapper(CoactvwcCustomerRecordToAwsM2CarddemoCustdataVsamKsdsDto.class);

        @Mapping(source = "custId", target = "custId")
        @Mapping(source = "custFirstName", target = "custFirstName")
        @Mapping(source = "custMiddleName", target = "custMiddleName")
        @Mapping(source = "custLastName", target = "custLastName")
        @Mapping(source = "custAddrLine1", target = "custAddrLine1")
        @Mapping(source = "custAddrLine2", target = "custAddrLine2")
        @Mapping(source = "custAddrLine3", target = "custAddrLine3")
        @Mapping(source = "custAddrStateCd", target = "custAddrStateCd")
        @Mapping(source = "custAddrCountryCd", target = "custAddrCountryCd")
        @Mapping(source = "custAddrZip", target = "custAddrZip")
        @Mapping(source = "custPhoneNum1", target = "custPhoneNum1")
        @Mapping(source = "custPhoneNum2", target = "custPhoneNum2")
        @Mapping(source = "custSsn", target = "custSsn")
        @Mapping(source = "custGovtIssuedId", target = "custGovtIssuedId")
        @Mapping(source = "custDobYyyyMmDd", target = "custDobYyyymmdd")
        @Mapping(source = "custEftAccountId", target = "custEftAccountId")
        @Mapping(source = "custPriCardHolderInd", target = "custPriCardHolderInd")
        @Mapping(source = "custFicoCreditScore", target = "custFicoCreditScore")
        @Mapping(source = "OFFILLER1", target = "filler")
        AwsM2CarddemoCustdataVsamKsdsDto toTarget(CoactvwcCustomerRecord source);

        @Mapping(source = "custId", target = "custId")
        @Mapping(source = "custFirstName", target = "custFirstName")
        @Mapping(source = "custMiddleName", target = "custMiddleName")
        @Mapping(source = "custLastName", target = "custLastName")
        @Mapping(source = "custAddrLine1", target = "custAddrLine1")
        @Mapping(source = "custAddrLine2", target = "custAddrLine2")
        @Mapping(source = "custAddrLine3", target = "custAddrLine3")
        @Mapping(source = "custAddrStateCd", target = "custAddrStateCd")
        @Mapping(source = "custAddrCountryCd", target = "custAddrCountryCd")
        @Mapping(source = "custAddrZip", target = "custAddrZip")
        @Mapping(source = "custPhoneNum1", target = "custPhoneNum1")
        @Mapping(source = "custPhoneNum2", target = "custPhoneNum2")
        @Mapping(source = "custSsn", target = "custSsn")
        @Mapping(source = "custGovtIssuedId", target = "custGovtIssuedId")
        @Mapping(source = "custDobYyyymmdd", target = "custDobYyyyMmDd")
        @Mapping(source = "custEftAccountId", target = "custEftAccountId")
        @Mapping(source = "custPriCardHolderInd", target = "custPriCardHolderInd")
        @Mapping(source = "custFicoCreditScore", target = "custFicoCreditScore")
        @Mapping(source = "filler", target = "OFFILLER1")
        CoactvwcCustomerRecord toSource(AwsM2CarddemoCustdataVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for CICS processing</p>
     * <ul>
     * <li>source class: {@link CoactvwcAccountRecord}</li>
     * <li>target class: {@link AwsM2CarddemoAcctdataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface CoactvwcAccountRecordToAwsM2CarddemoAcctdataVsamKsdsDto {
        CoactvwcAccountRecordToAwsM2CarddemoAcctdataVsamKsdsDto INSTANCE = Mappers
                .getMapper(CoactvwcAccountRecordToAwsM2CarddemoAcctdataVsamKsdsDto.class);

        @Mapping(source = "acctId", target = "acctId")
        @Mapping(source = "acctActiveStatus", target = "acctActiveStatus")
        @Mapping(source = "acctCurrBal", target = "acctCurrBal")
        @Mapping(source = "acctCreditLimit", target = "acctCreditLimit")
        @Mapping(source = "acctCashCreditLimit", target = "acctCashCreditLimit")
        @Mapping(source = "acctOpenDate", target = "acctOpenDate")
        @Mapping(source = "acctExpiraionDate", target = "acctExpiraionDate")
        @Mapping(source = "acctReissueDate", target = "acctReissueDate")
        @Mapping(source = "acctCurrCycCredit", target = "acctCurrCycCredit")
        @Mapping(source = "acctCurrCycDebit", target = "acctCurrCycDebit")
        @Mapping(source = "acctAddrZip", target = "acctAddrZip")
        @Mapping(source = "acctGroupId", target = "acctGroupId")
        @Mapping(source = "OFFILLER1", target = "filler")
        AwsM2CarddemoAcctdataVsamKsdsDto toTarget(CoactvwcAccountRecord source);

        @Mapping(source = "acctId", target = "acctId")
        @Mapping(source = "acctActiveStatus", target = "acctActiveStatus")
        @Mapping(source = "acctCurrBal", target = "acctCurrBal")
        @Mapping(source = "acctCreditLimit", target = "acctCreditLimit")
        @Mapping(source = "acctCashCreditLimit", target = "acctCashCreditLimit")
        @Mapping(source = "acctOpenDate", target = "acctOpenDate")
        @Mapping(source = "acctExpiraionDate", target = "acctExpiraionDate")
        @Mapping(source = "acctReissueDate", target = "acctReissueDate")
        @Mapping(source = "acctCurrCycCredit", target = "acctCurrCycCredit")
        @Mapping(source = "acctCurrCycDebit", target = "acctCurrCycDebit")
        @Mapping(source = "acctAddrZip", target = "acctAddrZip")
        @Mapping(source = "acctGroupId", target = "acctGroupId")
        @Mapping(source = "filler", target = "OFFILLER1")
        CoactvwcAccountRecord toSource(AwsM2CarddemoAcctdataVsamKsdsDto source);
    }
}
