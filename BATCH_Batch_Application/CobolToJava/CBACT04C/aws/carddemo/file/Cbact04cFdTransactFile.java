package aws.carddemo.file;

import aws.carddemo.dao.*;
import aws.carddemo.dto.*;
import aws.carddemo.mapper.*;
import aws.carddemo.variable.group.Cbact04cFdTranfileRec;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.file.FileStatus;
import com.tmax.openframe.runtime.file.RecordCommitter;
import java.math.*;
import java.util.*;
import lombok.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:55 UTC</p>
 * <hr>
 * <p>Class for processing file I/O operations</p>
 * <ul>
 * <li>target dataset: AwsM2CarddemoSystran</li>
 * <li>file operation class: {@link Cbact04cFileOpTransactFile}</li>
 * <li>DAO class: {@link AwsM2CarddemoSystranDao}</li>
 * <li>DTO class: {@link AwsM2CarddemoSystranDto}</li>
 * </ul>
 */
@Repository
public class Cbact04cFdTransactFile extends Cbact04cFileOpTransactFile {
    @Autowired
    private AwsM2CarddemoSystranDao dao;
    @Autowired
    private RecordCommitter<AwsM2CarddemoSystranDto> committer;

    public void open(OpenFrameContext context) {
        setCurrentSeqId(context, 0L);
        setIterator(context, dao.readAllAsc().iterator());
        setFileStatus(context, FileStatus.NORMAL);
        context.initFileWriteBuffer("Cbact04c", "TransactFile");
        committer.setThreshold(5000);
    }

    public Cbact04cFdTranfileRec readNextRecord(OpenFrameContext context) {
        Iterator<AwsM2CarddemoSystranDto> iterator = getIterator(context);
        if (iterator.hasNext()) {
            setNextSeqId(context);
            AwsM2CarddemoSystranDto nextRecord = iterator.next();
            if (nextRecord == null) {
                setFileStatus(context, FileStatus.AT_END_CONDITION_SEQ_READ);
                return null;
            }
            setFileStatus(context, FileStatus.NORMAL);
            return Cbact04cMapperInterface.Cbact04cFdTranfileRecToAwsM2CarddemoSystranDto.INSTANCE
                    .toSource(nextRecord);
        } else {
            setFileStatus(context, FileStatus.AT_END_CONDITION_SEQ_READ);
            return null;
        }
    }

    public void write(OpenFrameContext context, Cbact04cFdTranfileRec data) {
        List<AwsM2CarddemoSystranDto> writeBuffer = getWriteBuffer(context);
        writeBuffer
                .add(Cbact04cMapperInterface.Cbact04cFdTranfileRecToAwsM2CarddemoSystranDto.INSTANCE
                        .toTarget(data));
        if (writeBuffer.size() >= committer.getThreshold()) {
            committer.commit(dao::writeDto, writeBuffer);
            writeBuffer.clear();
        }
        setFileStatus(context, FileStatus.NORMAL);
    }

    public void close(OpenFrameContext context) {
        commit(context);
        setCurrentSeqId(context, null);
        setIterator(context, null);
        setFileStatus(context, FileStatus.NORMAL);
    }

    public void commit(OpenFrameContext context) {
        List<AwsM2CarddemoSystranDto> writeBuffer = getWriteBuffer(context);
        if (writeBuffer != null && writeBuffer.size() > 0) {
            committer.commit(dao::writeDto, writeBuffer);
            writeBuffer.clear();
        }
    }

    private void setIterator(OpenFrameContext context,
            Iterator<AwsM2CarddemoSystranDto> iterator) {
        context.setFileIterator("Cbact04c", "TransactFile", iterator);
    }

    private Iterator<AwsM2CarddemoSystranDto> getIterator(
            OpenFrameContext context) {
        return context.getFileIterator("Cbact04c", "TransactFile");
    }

    private List<AwsM2CarddemoSystranDto> getWriteBuffer(
            OpenFrameContext context) {
        return context.getFileWriteBuffer("Cbact04c", "TransactFile");
    }
}
