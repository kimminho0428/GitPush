package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:49 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class Corpt00cVariableContainer {
    // *----------------------------------------------------------------*
    // *                     WORKING STORAGE SECTION                     
    // *----------------------------------------------------------------*
    // [T-Up#INFO][CORPT00C.cbl, LINE #36] WS-VARIABLES (level: 1)
    private @Getter @Setter Corpt00cWsVariables wsVariables = new Corpt00cWsVariables();
    // [T-Up#INFO][CORPT00C.cbl, LINE #81] JOB-DATA (level: 1)
    private @Getter @Setter Corpt00cJobData jobData = new Corpt00cJobData();
    // [T-Up#INFO][CORPT00C.cbl, LINE #129] CSUTLDTC-PARM (level: 1)
    private @Getter @Setter Corpt00cCsutldtcParm csutldtcParm = new Corpt00cCsutldtcParm();
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter Corpt00cCarddemoCommarea carddemoCommarea = new Corpt00cCarddemoCommarea();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT 
    // *                                                                 
    //       *COPY CORPT00.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CORPT00.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CORPT00.CPY, LINE #18] CORPT0AI (level: 1)
    private @Getter @Setter Corpt00cCorpt0ai corpt0ai = new Corpt00cCorpt0ai();

    public Corpt00cCorpt0ao getCorpt0ao() {
        return Corpt00cCorpt0ao.builder().OFFILLER1(getOFFILLER1())
                .OFFILLER2(getOFFILLER2()).trnnamec(getTrnnamec())
                .trnnamep(getTrnnamep()).trnnameh(getTrnnameh())
                .trnnamev(getTrnnamev()).trnnameo(getTrnnameo())
                .OFFILLER3(getOFFILLER3()).title01c(getTitle01c())
                .title01p(getTitle01p()).title01h(getTitle01h())
                .title01v(getTitle01v()).title01o(getTitle01o())
                .OFFILLER4(getOFFILLER4()).curdatec(getCurdatec())
                .curdatep(getCurdatep()).curdateh(getCurdateh())
                .curdatev(getCurdatev()).curdateo(getCurdateo())
                .OFFILLER5(getOFFILLER5()).pgmnamec(getPgmnamec())
                .pgmnamep(getPgmnamep()).pgmnameh(getPgmnameh())
                .pgmnamev(getPgmnamev()).pgmnameo(getPgmnameo())
                .OFFILLER6(getOFFILLER6()).title02c(getTitle02c())
                .title02p(getTitle02p()).title02h(getTitle02h())
                .title02v(getTitle02v()).title02o(getTitle02o())
                .OFFILLER7(getOFFILLER7()).curtimec(getCurtimec())
                .curtimep(getCurtimep()).curtimeh(getCurtimeh())
                .curtimev(getCurtimev()).curtimeo(getCurtimeo())
                .OFFILLER8(getOFFILLER8()).monthlyc(getMonthlyc())
                .monthlyp(getMonthlyp()).monthlyh(getMonthlyh())
                .monthlyv(getMonthlyv()).monthlyo(getMonthlyo())
                .OFFILLER9(getOFFILLER9()).yearlyc(getYearlyc())
                .yearlyp(getYearlyp()).yearlyh(getYearlyh())
                .yearlyv(getYearlyv()).yearlyo(getYearlyo())
                .OFFILLER10(getOFFILLER10()).customc(getCustomc())
                .customp(getCustomp()).customh(getCustomh())
                .customv(getCustomv()).customo(getCustomo())
                .OFFILLER11(getOFFILLER11()).sdtmmc(getSdtmmc())
                .sdtmmp(getSdtmmp()).sdtmmh(getSdtmmh()).sdtmmv(getSdtmmv())
                .sdtmmo(getSdtmmo()).OFFILLER12(getOFFILLER12())
                .sdtddc(getSdtddc()).sdtddp(getSdtddp()).sdtddh(getSdtddh())
                .sdtddv(getSdtddv()).sdtddo(getSdtddo())
                .OFFILLER13(getOFFILLER13()).sdtyyyyc(getSdtyyyyc())
                .sdtyyyyp(getSdtyyyyp()).sdtyyyyh(getSdtyyyyh())
                .sdtyyyyv(getSdtyyyyv()).sdtyyyyo(getSdtyyyyo())
                .OFFILLER14(getOFFILLER14()).edtmmc(getEdtmmc())
                .edtmmp(getEdtmmp()).edtmmh(getEdtmmh()).edtmmv(getEdtmmv())
                .edtmmo(getEdtmmo()).OFFILLER15(getOFFILLER15())
                .edtddc(getEdtddc()).edtddp(getEdtddp()).edtddh(getEdtddh())
                .edtddv(getEdtddv()).edtddo(getEdtddo())
                .OFFILLER16(getOFFILLER16()).edtyyyyc(getEdtyyyyc())
                .edtyyyyp(getEdtyyyyp()).edtyyyyh(getEdtyyyyh())
                .edtyyyyv(getEdtyyyyv()).edtyyyyo(getEdtyyyyo())
                .OFFILLER17(getOFFILLER17()).confirmc(getConfirmc())
                .confirmp(getConfirmp()).confirmh(getConfirmh())
                .confirmv(getConfirmv()).confirmo(getConfirmo())
                .OFFILLER18(getOFFILLER18()).errmsgc(getErrmsgc())
                .errmsgp(getErrmsgp()).errmsgh(getErrmsgh())
                .errmsgv(getErrmsgv()).errmsgo(getErrmsgo()).build();
    }

    public void setCorpt0ao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setMonthlyc(source.substring(165, 166));
        setMonthlyp(source.substring(166, 167));
        setMonthlyh(source.substring(167, 168));
        setMonthlyv(source.substring(168, 169));
        setMonthlyo(source.substring(169, 170));
        setOFFILLER9(source.substring(170, 173));
        setYearlyc(source.substring(173, 174));
        setYearlyp(source.substring(174, 175));
        setYearlyh(source.substring(175, 176));
        setYearlyv(source.substring(176, 177));
        setYearlyo(source.substring(177, 178));
        setOFFILLER10(source.substring(178, 181));
        setCustomc(source.substring(181, 182));
        setCustomp(source.substring(182, 183));
        setCustomh(source.substring(183, 184));
        setCustomv(source.substring(184, 185));
        setCustomo(source.substring(185, 186));
        setOFFILLER11(source.substring(186, 189));
        setSdtmmc(source.substring(189, 190));
        setSdtmmp(source.substring(190, 191));
        setSdtmmh(source.substring(191, 192));
        setSdtmmv(source.substring(192, 193));
        setSdtmmo(source.substring(193, 195));
        setOFFILLER12(source.substring(195, 198));
        setSdtddc(source.substring(198, 199));
        setSdtddp(source.substring(199, 200));
        setSdtddh(source.substring(200, 201));
        setSdtddv(source.substring(201, 202));
        setSdtddo(source.substring(202, 204));
        setOFFILLER13(source.substring(204, 207));
        setSdtyyyyc(source.substring(207, 208));
        setSdtyyyyp(source.substring(208, 209));
        setSdtyyyyh(source.substring(209, 210));
        setSdtyyyyv(source.substring(210, 211));
        setSdtyyyyo(source.substring(211, 215));
        setOFFILLER14(source.substring(215, 218));
        setEdtmmc(source.substring(218, 219));
        setEdtmmp(source.substring(219, 220));
        setEdtmmh(source.substring(220, 221));
        setEdtmmv(source.substring(221, 222));
        setEdtmmo(source.substring(222, 224));
        setOFFILLER15(source.substring(224, 227));
        setEdtddc(source.substring(227, 228));
        setEdtddp(source.substring(228, 229));
        setEdtddh(source.substring(229, 230));
        setEdtddv(source.substring(230, 231));
        setEdtddo(source.substring(231, 233));
        setOFFILLER16(source.substring(233, 236));
        setEdtyyyyc(source.substring(236, 237));
        setEdtyyyyp(source.substring(237, 238));
        setEdtyyyyh(source.substring(238, 239));
        setEdtyyyyv(source.substring(239, 240));
        setEdtyyyyo(source.substring(240, 244));
        setOFFILLER17(source.substring(244, 247));
        setConfirmc(source.substring(247, 248));
        setConfirmp(source.substring(248, 249));
        setConfirmh(source.substring(249, 250));
        setConfirmv(source.substring(250, 251));
        setConfirmo(source.substring(251, 252));
        setOFFILLER18(source.substring(252, 255));
        setErrmsgc(source.substring(255, 256));
        setErrmsgp(source.substring(256, 257));
        setErrmsgh(source.substring(257, 258));
        setErrmsgv(source.substring(258, 259));
        setErrmsgo(source.substring(259, 337));
    }

    public void setCorpt0ao(Corpt00cCorpt0ao source) {
        setCorpt0ao(source.toString());
    }

    public String getOFFILLER1() {
        return getCorpt0ai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCorpt0ai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCorpt0ai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCorpt0ai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCorpt0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCorpt0ai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCorpt0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCorpt0ai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCorpt0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCorpt0ai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCorpt0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCorpt0ai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCorpt0ai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCorpt0ai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCorpt0ai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCorpt0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCorpt0ai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCorpt0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCorpt0ai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCorpt0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCorpt0ai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCorpt0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCorpt0ai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCorpt0ai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCorpt0ai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCorpt0ai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCorpt0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCorpt0ai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCorpt0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCorpt0ai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCorpt0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCorpt0ai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCorpt0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCorpt0ai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCorpt0ai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCorpt0ai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCorpt0ai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCorpt0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCorpt0ai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCorpt0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCorpt0ai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCorpt0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCorpt0ai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCorpt0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCorpt0ai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCorpt0ai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCorpt0ai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCorpt0ai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCorpt0ai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCorpt0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCorpt0ai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCorpt0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCorpt0ai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCorpt0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCorpt0ai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCorpt0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCorpt0ai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCorpt0ai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCorpt0ai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCorpt0ai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCorpt0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCorpt0ai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCorpt0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCorpt0ai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCorpt0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCorpt0ai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCorpt0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCorpt0ai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCorpt0ai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getMonthlyl());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCorpt0ai().getMonthlyf();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setMonthlyl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setMonthlyl(0);
        }
    }

    public String getMonthlyc() {
        return getCorpt0ai().getOFFILLER15().substring(0, 1);
    }

    public void setMonthlyc(String source) {
        getCorpt0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER15(), source, 0, 1));
    }

    public String getMonthlyp() {
        return getCorpt0ai().getOFFILLER15().substring(1, 2);
    }

    public void setMonthlyp(String source) {
        getCorpt0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER15(), source, 1, 2));
    }

    public String getMonthlyh() {
        return getCorpt0ai().getOFFILLER15().substring(2, 3);
    }

    public void setMonthlyh(String source) {
        getCorpt0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER15(), source, 2, 3));
    }

    public String getMonthlyv() {
        return getCorpt0ai().getOFFILLER15().substring(3);
    }

    public void setMonthlyv(String source) {
        getCorpt0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER15(), source, 3, 4));
    }

    public String getMonthlyo() {
        return getCorpt0ai().getMonthlyi();
    }

    public void setMonthlyo(String source) {
        getCorpt0ai().setMonthlyi(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getYearlyl());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCorpt0ai().getYearlyf();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setYearlyl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setYearlyl(0);
        }
    }

    public String getYearlyc() {
        return getCorpt0ai().getOFFILLER17().substring(0, 1);
    }

    public void setYearlyc(String source) {
        getCorpt0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER17(), source, 0, 1));
    }

    public String getYearlyp() {
        return getCorpt0ai().getOFFILLER17().substring(1, 2);
    }

    public void setYearlyp(String source) {
        getCorpt0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER17(), source, 1, 2));
    }

    public String getYearlyh() {
        return getCorpt0ai().getOFFILLER17().substring(2, 3);
    }

    public void setYearlyh(String source) {
        getCorpt0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER17(), source, 2, 3));
    }

    public String getYearlyv() {
        return getCorpt0ai().getOFFILLER17().substring(3);
    }

    public void setYearlyv(String source) {
        getCorpt0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER17(), source, 3, 4));
    }

    public String getYearlyo() {
        return getCorpt0ai().getYearlyi();
    }

    public void setYearlyo(String source) {
        getCorpt0ai().setYearlyi(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getCustoml());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCorpt0ai().getCustomf();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setCustoml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setCustoml(0);
        }
    }

    public String getCustomc() {
        return getCorpt0ai().getOFFILLER19().substring(0, 1);
    }

    public void setCustomc(String source) {
        getCorpt0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER19(), source, 0, 1));
    }

    public String getCustomp() {
        return getCorpt0ai().getOFFILLER19().substring(1, 2);
    }

    public void setCustomp(String source) {
        getCorpt0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER19(), source, 1, 2));
    }

    public String getCustomh() {
        return getCorpt0ai().getOFFILLER19().substring(2, 3);
    }

    public void setCustomh(String source) {
        getCorpt0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER19(), source, 2, 3));
    }

    public String getCustomv() {
        return getCorpt0ai().getOFFILLER19().substring(3);
    }

    public void setCustomv(String source) {
        getCorpt0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER19(), source, 3, 4));
    }

    public String getCustomo() {
        return getCorpt0ai().getCustomi();
    }

    public void setCustomo(String source) {
        getCorpt0ai().setCustomi(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getSdtmml());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCorpt0ai().getSdtmmf();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setSdtmml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setSdtmml(0);
        }
    }

    public String getSdtmmc() {
        return getCorpt0ai().getOFFILLER21().substring(0, 1);
    }

    public void setSdtmmc(String source) {
        getCorpt0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER21(), source, 0, 1));
    }

    public String getSdtmmp() {
        return getCorpt0ai().getOFFILLER21().substring(1, 2);
    }

    public void setSdtmmp(String source) {
        getCorpt0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER21(), source, 1, 2));
    }

    public String getSdtmmh() {
        return getCorpt0ai().getOFFILLER21().substring(2, 3);
    }

    public void setSdtmmh(String source) {
        getCorpt0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER21(), source, 2, 3));
    }

    public String getSdtmmv() {
        return getCorpt0ai().getOFFILLER21().substring(3);
    }

    public void setSdtmmv(String source) {
        getCorpt0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER21(), source, 3, 4));
    }

    public String getSdtmmo() {
        return getCorpt0ai().getSdtmmi();
    }

    public void setSdtmmo(String source) {
        getCorpt0ai().setSdtmmi(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getSdtddl());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCorpt0ai().getSdtddf();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setSdtddl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setSdtddl(0);
        }
    }

    public String getSdtddc() {
        return getCorpt0ai().getOFFILLER23().substring(0, 1);
    }

    public void setSdtddc(String source) {
        getCorpt0ai().setOFFILLER23(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER23(), source, 0, 1));
    }

    public String getSdtddp() {
        return getCorpt0ai().getOFFILLER23().substring(1, 2);
    }

    public void setSdtddp(String source) {
        getCorpt0ai().setOFFILLER23(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER23(), source, 1, 2));
    }

    public String getSdtddh() {
        return getCorpt0ai().getOFFILLER23().substring(2, 3);
    }

    public void setSdtddh(String source) {
        getCorpt0ai().setOFFILLER23(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER23(), source, 2, 3));
    }

    public String getSdtddv() {
        return getCorpt0ai().getOFFILLER23().substring(3);
    }

    public void setSdtddv(String source) {
        getCorpt0ai().setOFFILLER23(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER23(), source, 3, 4));
    }

    public String getSdtddo() {
        return getCorpt0ai().getSdtddi();
    }

    public void setSdtddo(String source) {
        getCorpt0ai().setSdtddi(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getSdtyyyyl());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCorpt0ai().getSdtyyyyf();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setSdtyyyyl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setSdtyyyyl(0);
        }
    }

    public String getSdtyyyyc() {
        return getCorpt0ai().getOFFILLER25().substring(0, 1);
    }

    public void setSdtyyyyc(String source) {
        getCorpt0ai().setOFFILLER25(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER25(), source, 0, 1));
    }

    public String getSdtyyyyp() {
        return getCorpt0ai().getOFFILLER25().substring(1, 2);
    }

    public void setSdtyyyyp(String source) {
        getCorpt0ai().setOFFILLER25(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER25(), source, 1, 2));
    }

    public String getSdtyyyyh() {
        return getCorpt0ai().getOFFILLER25().substring(2, 3);
    }

    public void setSdtyyyyh(String source) {
        getCorpt0ai().setOFFILLER25(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER25(), source, 2, 3));
    }

    public String getSdtyyyyv() {
        return getCorpt0ai().getOFFILLER25().substring(3);
    }

    public void setSdtyyyyv(String source) {
        getCorpt0ai().setOFFILLER25(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER25(), source, 3, 4));
    }

    public String getSdtyyyyo() {
        return getCorpt0ai().getSdtyyyyi();
    }

    public void setSdtyyyyo(String source) {
        getCorpt0ai().setSdtyyyyi(source);
    }

    public String getOFFILLER14() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getEdtmml());
        tempByteBuffer1.flip();
        String temp13 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp13 + getCorpt0ai().getEdtmmf();
    }

    public void setOFFILLER14(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setEdtmml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setEdtmml(0);
        }
    }

    public String getEdtmmc() {
        return getCorpt0ai().getOFFILLER27().substring(0, 1);
    }

    public void setEdtmmc(String source) {
        getCorpt0ai().setOFFILLER27(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER27(), source, 0, 1));
    }

    public String getEdtmmp() {
        return getCorpt0ai().getOFFILLER27().substring(1, 2);
    }

    public void setEdtmmp(String source) {
        getCorpt0ai().setOFFILLER27(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER27(), source, 1, 2));
    }

    public String getEdtmmh() {
        return getCorpt0ai().getOFFILLER27().substring(2, 3);
    }

    public void setEdtmmh(String source) {
        getCorpt0ai().setOFFILLER27(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER27(), source, 2, 3));
    }

    public String getEdtmmv() {
        return getCorpt0ai().getOFFILLER27().substring(3);
    }

    public void setEdtmmv(String source) {
        getCorpt0ai().setOFFILLER27(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER27(), source, 3, 4));
    }

    public String getEdtmmo() {
        return getCorpt0ai().getEdtmmi();
    }

    public void setEdtmmo(String source) {
        getCorpt0ai().setEdtmmi(source);
    }

    public String getOFFILLER15() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getEdtddl());
        tempByteBuffer1.flip();
        String temp14 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp14 + getCorpt0ai().getEdtddf();
    }

    public void setOFFILLER15(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setEdtddl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setEdtddl(0);
        }
    }

    public String getEdtddc() {
        return getCorpt0ai().getOFFILLER29().substring(0, 1);
    }

    public void setEdtddc(String source) {
        getCorpt0ai().setOFFILLER29(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER29(), source, 0, 1));
    }

    public String getEdtddp() {
        return getCorpt0ai().getOFFILLER29().substring(1, 2);
    }

    public void setEdtddp(String source) {
        getCorpt0ai().setOFFILLER29(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER29(), source, 1, 2));
    }

    public String getEdtddh() {
        return getCorpt0ai().getOFFILLER29().substring(2, 3);
    }

    public void setEdtddh(String source) {
        getCorpt0ai().setOFFILLER29(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER29(), source, 2, 3));
    }

    public String getEdtddv() {
        return getCorpt0ai().getOFFILLER29().substring(3);
    }

    public void setEdtddv(String source) {
        getCorpt0ai().setOFFILLER29(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER29(), source, 3, 4));
    }

    public String getEdtddo() {
        return getCorpt0ai().getEdtddi();
    }

    public void setEdtddo(String source) {
        getCorpt0ai().setEdtddi(source);
    }

    public String getOFFILLER16() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getEdtyyyyl());
        tempByteBuffer1.flip();
        String temp15 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp15 + getCorpt0ai().getEdtyyyyf();
    }

    public void setOFFILLER16(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setEdtyyyyl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setEdtyyyyl(0);
        }
    }

    public String getEdtyyyyc() {
        return getCorpt0ai().getOFFILLER31().substring(0, 1);
    }

    public void setEdtyyyyc(String source) {
        getCorpt0ai().setOFFILLER31(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER31(), source, 0, 1));
    }

    public String getEdtyyyyp() {
        return getCorpt0ai().getOFFILLER31().substring(1, 2);
    }

    public void setEdtyyyyp(String source) {
        getCorpt0ai().setOFFILLER31(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER31(), source, 1, 2));
    }

    public String getEdtyyyyh() {
        return getCorpt0ai().getOFFILLER31().substring(2, 3);
    }

    public void setEdtyyyyh(String source) {
        getCorpt0ai().setOFFILLER31(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER31(), source, 2, 3));
    }

    public String getEdtyyyyv() {
        return getCorpt0ai().getOFFILLER31().substring(3);
    }

    public void setEdtyyyyv(String source) {
        getCorpt0ai().setOFFILLER31(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER31(), source, 3, 4));
    }

    public String getEdtyyyyo() {
        return getCorpt0ai().getEdtyyyyi();
    }

    public void setEdtyyyyo(String source) {
        getCorpt0ai().setEdtyyyyi(source);
    }

    public String getOFFILLER17() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getConfirml());
        tempByteBuffer1.flip();
        String temp16 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp16 + getCorpt0ai().getConfirmf();
    }

    public void setOFFILLER17(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setConfirml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setConfirml(0);
        }
    }

    public String getConfirmc() {
        return getCorpt0ai().getOFFILLER33().substring(0, 1);
    }

    public void setConfirmc(String source) {
        getCorpt0ai().setOFFILLER33(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER33(), source, 0, 1));
    }

    public String getConfirmp() {
        return getCorpt0ai().getOFFILLER33().substring(1, 2);
    }

    public void setConfirmp(String source) {
        getCorpt0ai().setOFFILLER33(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER33(), source, 1, 2));
    }

    public String getConfirmh() {
        return getCorpt0ai().getOFFILLER33().substring(2, 3);
    }

    public void setConfirmh(String source) {
        getCorpt0ai().setOFFILLER33(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER33(), source, 2, 3));
    }

    public String getConfirmv() {
        return getCorpt0ai().getOFFILLER33().substring(3);
    }

    public void setConfirmv(String source) {
        getCorpt0ai().setOFFILLER33(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER33(), source, 3, 4));
    }

    public String getConfirmo() {
        return getCorpt0ai().getConfirmi();
    }

    public void setConfirmo(String source) {
        getCorpt0ai().setConfirmi(source);
    }

    public String getOFFILLER18() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCorpt0ai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp17 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp17 + getCorpt0ai().getErrmsgf();
    }

    public void setOFFILLER18(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCorpt0ai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCorpt0ai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCorpt0ai().getOFFILLER35().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCorpt0ai().setOFFILLER35(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER35(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCorpt0ai().getOFFILLER35().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCorpt0ai().setOFFILLER35(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER35(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCorpt0ai().getOFFILLER35().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCorpt0ai().setOFFILLER35(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER35(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCorpt0ai().getOFFILLER35().substring(3);
    }

    public void setErrmsgv(String source) {
        getCorpt0ai().setOFFILLER35(
                StringUtils
                        .overlay(getCorpt0ai().getOFFILLER35(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCorpt0ai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCorpt0ai().setErrmsgi(source);
    }

    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter Corpt00cCcdaScreenTitle ccdaScreenTitle = new Corpt00cCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter Corpt00cWsDateTime wsDateTime = new Corpt00cWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter Corpt00cCcdaCommonMessages ccdaCommonMessages = new Corpt00cCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CVTRA05Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVTRA05Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for TRANsaction record (RECLN = 350)          
    // ***************************************************************** 
    // [T-Up#INFO][CVTRA05Y.cpy, LINE #5] TRAN-RECORD (level: 1)
    private @Getter @Setter Corpt00cTranRecord tranRecord = new Corpt00cTranRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT 
    // *                                                                 
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter Corpt00cDfhaid dfhaid = new Corpt00cDfhaid();
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter Corpt00cDfhbmsca dfhbmsca = new Corpt00cDfhbmsca();
    // *----------------------------------------------------------------*
    // *                        LINKAGE SECTION                          
    // *----------------------------------------------------------------*
    // [T-Up#INFO][CORPT00C.cbl, LINE #155] DFHCOMMAREA (level: 1)
    private @Getter @Setter Corpt00cDfhcommarea dfhcommarea = new Corpt00cDfhcommarea();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class Corpt00cCorpt0ao {
        // [T-Up#INFO][CORPT00.CPY, LINE #123] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][CORPT00.CPY, LINE #124] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #125] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #126] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #127] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #128] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #129] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][CORPT00.CPY, LINE #130] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #131] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #132] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #133] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #134] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #135] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][CORPT00.CPY, LINE #136] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #137] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #138] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #139] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #140] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #141] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][CORPT00.CPY, LINE #142] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #143] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #144] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #145] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #146] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #147] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][CORPT00.CPY, LINE #148] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #149] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #150] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #151] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #152] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #153] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][CORPT00.CPY, LINE #154] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #155] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #156] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #157] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #158] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #159] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][CORPT00.CPY, LINE #160] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #161] MONTHLYC (level: 2)
        private @Getter String monthlyc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #162] MONTHLYP (level: 2)
        private @Getter String monthlyp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #163] MONTHLYH (level: 2)
        private @Getter String monthlyh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #164] MONTHLYV (level: 2)
        private @Getter String monthlyv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #165] MONTHLYO (level: 2)
        private @Getter String monthlyo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #166] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #167] YEARLYC (level: 2)
        private @Getter String yearlyc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #168] YEARLYP (level: 2)
        private @Getter String yearlyp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #169] YEARLYH (level: 2)
        private @Getter String yearlyh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #170] YEARLYV (level: 2)
        private @Getter String yearlyv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #171] YEARLYO (level: 2)
        private @Getter String yearlyo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #172] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #173] CUSTOMC (level: 2)
        private @Getter String customc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #174] CUSTOMP (level: 2)
        private @Getter String customp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #175] CUSTOMH (level: 2)
        private @Getter String customh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #176] CUSTOMV (level: 2)
        private @Getter String customv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #177] CUSTOMO (level: 2)
        private @Getter String customo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #178] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #179] SDTMMC (level: 2)
        private @Getter String sdtmmc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #180] SDTMMP (level: 2)
        private @Getter String sdtmmp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #181] SDTMMH (level: 2)
        private @Getter String sdtmmh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #182] SDTMMV (level: 2)
        private @Getter String sdtmmv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #183] SDTMMO (level: 2)
        private @Getter String sdtmmo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CORPT00.CPY, LINE #184] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #185] SDTDDC (level: 2)
        private @Getter String sdtddc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #186] SDTDDP (level: 2)
        private @Getter String sdtddp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #187] SDTDDH (level: 2)
        private @Getter String sdtddh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #188] SDTDDV (level: 2)
        private @Getter String sdtddv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #189] SDTDDO (level: 2)
        private @Getter String sdtddo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CORPT00.CPY, LINE #190] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #191] SDTYYYYC (level: 2)
        private @Getter String sdtyyyyc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #192] SDTYYYYP (level: 2)
        private @Getter String sdtyyyyp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #193] SDTYYYYH (level: 2)
        private @Getter String sdtyyyyh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #194] SDTYYYYV (level: 2)
        private @Getter String sdtyyyyv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #195] SDTYYYYO (level: 2)
        private @Getter String sdtyyyyo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][CORPT00.CPY, LINE #196] FILLER (level: 2)
        private @Getter String OFFILLER14 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #197] EDTMMC (level: 2)
        private @Getter String edtmmc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #198] EDTMMP (level: 2)
        private @Getter String edtmmp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #199] EDTMMH (level: 2)
        private @Getter String edtmmh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #200] EDTMMV (level: 2)
        private @Getter String edtmmv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #201] EDTMMO (level: 2)
        private @Getter String edtmmo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CORPT00.CPY, LINE #202] FILLER (level: 2)
        private @Getter String OFFILLER15 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #203] EDTDDC (level: 2)
        private @Getter String edtddc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #204] EDTDDP (level: 2)
        private @Getter String edtddp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #205] EDTDDH (level: 2)
        private @Getter String edtddh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #206] EDTDDV (level: 2)
        private @Getter String edtddv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #207] EDTDDO (level: 2)
        private @Getter String edtddo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CORPT00.CPY, LINE #208] FILLER (level: 2)
        private @Getter String OFFILLER16 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #209] EDTYYYYC (level: 2)
        private @Getter String edtyyyyc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #210] EDTYYYYP (level: 2)
        private @Getter String edtyyyyp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #211] EDTYYYYH (level: 2)
        private @Getter String edtyyyyh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #212] EDTYYYYV (level: 2)
        private @Getter String edtyyyyv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #213] EDTYYYYO (level: 2)
        private @Getter String edtyyyyo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][CORPT00.CPY, LINE #214] FILLER (level: 2)
        private @Getter String OFFILLER17 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #215] CONFIRMC (level: 2)
        private @Getter String confirmc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #216] CONFIRMP (level: 2)
        private @Getter String confirmp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #217] CONFIRMH (level: 2)
        private @Getter String confirmh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #218] CONFIRMV (level: 2)
        private @Getter String confirmv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #219] CONFIRMO (level: 2)
        private @Getter String confirmo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #220] FILLER (level: 2)
        private @Getter String OFFILLER18 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][CORPT00.CPY, LINE #221] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #222] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #223] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #224] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CORPT00.CPY, LINE #225] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(monthlyc);
            sb.append(monthlyp);
            sb.append(monthlyh);
            sb.append(monthlyv);
            sb.append(monthlyo);
            sb.append(OFFILLER9);
            sb.append(yearlyc);
            sb.append(yearlyp);
            sb.append(yearlyh);
            sb.append(yearlyv);
            sb.append(yearlyo);
            sb.append(OFFILLER10);
            sb.append(customc);
            sb.append(customp);
            sb.append(customh);
            sb.append(customv);
            sb.append(customo);
            sb.append(OFFILLER11);
            sb.append(sdtmmc);
            sb.append(sdtmmp);
            sb.append(sdtmmh);
            sb.append(sdtmmv);
            sb.append(sdtmmo);
            sb.append(OFFILLER12);
            sb.append(sdtddc);
            sb.append(sdtddp);
            sb.append(sdtddh);
            sb.append(sdtddv);
            sb.append(sdtddo);
            sb.append(OFFILLER13);
            sb.append(sdtyyyyc);
            sb.append(sdtyyyyp);
            sb.append(sdtyyyyh);
            sb.append(sdtyyyyv);
            sb.append(sdtyyyyo);
            sb.append(OFFILLER14);
            sb.append(edtmmc);
            sb.append(edtmmp);
            sb.append(edtmmh);
            sb.append(edtmmv);
            sb.append(edtmmo);
            sb.append(OFFILLER15);
            sb.append(edtddc);
            sb.append(edtddp);
            sb.append(edtddh);
            sb.append(edtddv);
            sb.append(edtddo);
            sb.append(OFFILLER16);
            sb.append(edtyyyyc);
            sb.append(edtyyyyp);
            sb.append(edtyyyyh);
            sb.append(edtyyyyv);
            sb.append(edtyyyyo);
            sb.append(OFFILLER17);
            sb.append(confirmc);
            sb.append(confirmp);
            sb.append(confirmh);
            sb.append(confirmv);
            sb.append(confirmo);
            sb.append(OFFILLER18);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(monthlyc);
            sb.append(monthlyp);
            sb.append(monthlyh);
            sb.append(monthlyv);
            sb.append(monthlyo);
            sb.append(OFFILLER9);
            sb.append(yearlyc);
            sb.append(yearlyp);
            sb.append(yearlyh);
            sb.append(yearlyv);
            sb.append(yearlyo);
            sb.append(OFFILLER10);
            sb.append(customc);
            sb.append(customp);
            sb.append(customh);
            sb.append(customv);
            sb.append(customo);
            sb.append(OFFILLER11);
            sb.append(sdtmmc);
            sb.append(sdtmmp);
            sb.append(sdtmmh);
            sb.append(sdtmmv);
            sb.append(sdtmmo);
            sb.append(OFFILLER12);
            sb.append(sdtddc);
            sb.append(sdtddp);
            sb.append(sdtddh);
            sb.append(sdtddv);
            sb.append(sdtddo);
            sb.append(OFFILLER13);
            sb.append(sdtyyyyc);
            sb.append(sdtyyyyp);
            sb.append(sdtyyyyh);
            sb.append(sdtyyyyv);
            sb.append(sdtyyyyo);
            sb.append(OFFILLER14);
            sb.append(edtmmc);
            sb.append(edtmmp);
            sb.append(edtmmh);
            sb.append(edtmmv);
            sb.append(edtmmo);
            sb.append(OFFILLER15);
            sb.append(edtddc);
            sb.append(edtddp);
            sb.append(edtddh);
            sb.append(edtddv);
            sb.append(edtddo);
            sb.append(OFFILLER16);
            sb.append(edtyyyyc);
            sb.append(edtyyyyp);
            sb.append(edtyyyyh);
            sb.append(edtyyyyv);
            sb.append(edtyyyyo);
            sb.append(OFFILLER17);
            sb.append(confirmc);
            sb.append(confirmp);
            sb.append(confirmh);
            sb.append(confirmv);
            sb.append(confirmo);
            sb.append(OFFILLER18);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }
    }
}
