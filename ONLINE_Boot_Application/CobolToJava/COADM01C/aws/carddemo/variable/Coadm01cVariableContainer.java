package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:40 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class Coadm01cVariableContainer {
    // *----------------------------------------------------------------*
    // *                     WORKING STORAGE SECTION                     
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COADM01C.cbl, LINE #35] WS-VARIABLES (level: 1)
    private @Getter @Setter Coadm01cWsVariables wsVariables = new Coadm01cWsVariables();
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter Coadm01cCarddemoCommarea carddemoCommarea = new Coadm01cCarddemoCommarea();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT 
    // *                                                                 
    //       *COPY COADM02Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COADM02Y.cpy)
    // ******************************************************************
    // * CardDemo - Admin Menu Options                                   
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COADM02Y.cpy, LINE #20] CARDDEMO-ADMIN-MENU-OPTIONS (level: 1)
    private @Getter @Setter Coadm01cCarddemoAdminMenuOptions carddemoAdminMenuOptions = new Coadm01cCarddemoAdminMenuOptions();
    // *                                                                 
    // * Ver: CardDemo_v1.0-26-g42273c1-79 Date: 2022-07-20 16:59:12 CDT 
    // *                                                                 
    //       *COPY COADM01.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COADM01.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COADM01.CPY, LINE #18] COADM1AI (level: 1)
    private @Getter @Setter Coadm01cCoadm1ai coadm1ai = new Coadm01cCoadm1ai();

    public Coadm01cCoadm1ao getCoadm1ao() {
        return Coadm01cCoadm1ao.builder().OFFILLER1(getOFFILLER1())
                .OFFILLER2(getOFFILLER2()).trnnamec(getTrnnamec())
                .trnnamep(getTrnnamep()).trnnameh(getTrnnameh())
                .trnnamev(getTrnnamev()).trnnameo(getTrnnameo())
                .OFFILLER3(getOFFILLER3()).title01c(getTitle01c())
                .title01p(getTitle01p()).title01h(getTitle01h())
                .title01v(getTitle01v()).title01o(getTitle01o())
                .OFFILLER4(getOFFILLER4()).curdatec(getCurdatec())
                .curdatep(getCurdatep()).curdateh(getCurdateh())
                .curdatev(getCurdatev()).curdateo(getCurdateo())
                .OFFILLER5(getOFFILLER5()).pgmnamec(getPgmnamec())
                .pgmnamep(getPgmnamep()).pgmnameh(getPgmnameh())
                .pgmnamev(getPgmnamev()).pgmnameo(getPgmnameo())
                .OFFILLER6(getOFFILLER6()).title02c(getTitle02c())
                .title02p(getTitle02p()).title02h(getTitle02h())
                .title02v(getTitle02v()).title02o(getTitle02o())
                .OFFILLER7(getOFFILLER7()).curtimec(getCurtimec())
                .curtimep(getCurtimep()).curtimeh(getCurtimeh())
                .curtimev(getCurtimev()).curtimeo(getCurtimeo())
                .OFFILLER8(getOFFILLER8()).optn001c(getOptn001c())
                .optn001p(getOptn001p()).optn001h(getOptn001h())
                .optn001v(getOptn001v()).optn001o(getOptn001o())
                .OFFILLER9(getOFFILLER9()).optn002c(getOptn002c())
                .optn002p(getOptn002p()).optn002h(getOptn002h())
                .optn002v(getOptn002v()).optn002o(getOptn002o())
                .OFFILLER10(getOFFILLER10()).optn003c(getOptn003c())
                .optn003p(getOptn003p()).optn003h(getOptn003h())
                .optn003v(getOptn003v()).optn003o(getOptn003o())
                .OFFILLER11(getOFFILLER11()).optn004c(getOptn004c())
                .optn004p(getOptn004p()).optn004h(getOptn004h())
                .optn004v(getOptn004v()).optn004o(getOptn004o())
                .OFFILLER12(getOFFILLER12()).optn005c(getOptn005c())
                .optn005p(getOptn005p()).optn005h(getOptn005h())
                .optn005v(getOptn005v()).optn005o(getOptn005o())
                .OFFILLER13(getOFFILLER13()).optn006c(getOptn006c())
                .optn006p(getOptn006p()).optn006h(getOptn006h())
                .optn006v(getOptn006v()).optn006o(getOptn006o())
                .OFFILLER14(getOFFILLER14()).optn007c(getOptn007c())
                .optn007p(getOptn007p()).optn007h(getOptn007h())
                .optn007v(getOptn007v()).optn007o(getOptn007o())
                .OFFILLER15(getOFFILLER15()).optn008c(getOptn008c())
                .optn008p(getOptn008p()).optn008h(getOptn008h())
                .optn008v(getOptn008v()).optn008o(getOptn008o())
                .OFFILLER16(getOFFILLER16()).optn009c(getOptn009c())
                .optn009p(getOptn009p()).optn009h(getOptn009h())
                .optn009v(getOptn009v()).optn009o(getOptn009o())
                .OFFILLER17(getOFFILLER17()).optn010c(getOptn010c())
                .optn010p(getOptn010p()).optn010h(getOptn010h())
                .optn010v(getOptn010v()).optn010o(getOptn010o())
                .OFFILLER18(getOFFILLER18()).optn011c(getOptn011c())
                .optn011p(getOptn011p()).optn011h(getOptn011h())
                .optn011v(getOptn011v()).optn011o(getOptn011o())
                .OFFILLER19(getOFFILLER19()).optn012c(getOptn012c())
                .optn012p(getOptn012p()).optn012h(getOptn012h())
                .optn012v(getOptn012v()).optn012o(getOptn012o())
                .OFFILLER20(getOFFILLER20()).optionc(getOptionc())
                .optionp(getOptionp()).optionh(getOptionh())
                .optionv(getOptionv()).optiono(getOptiono())
                .OFFILLER21(getOFFILLER21()).errmsgc(getErrmsgc())
                .errmsgp(getErrmsgp()).errmsgh(getErrmsgh())
                .errmsgv(getErrmsgv()).errmsgo(getErrmsgo()).build();
    }

    public void setCoadm1ao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setOptn001c(source.substring(165, 166));
        setOptn001p(source.substring(166, 167));
        setOptn001h(source.substring(167, 168));
        setOptn001v(source.substring(168, 169));
        setOptn001o(source.substring(169, 209));
        setOFFILLER9(source.substring(209, 212));
        setOptn002c(source.substring(212, 213));
        setOptn002p(source.substring(213, 214));
        setOptn002h(source.substring(214, 215));
        setOptn002v(source.substring(215, 216));
        setOptn002o(source.substring(216, 256));
        setOFFILLER10(source.substring(256, 259));
        setOptn003c(source.substring(259, 260));
        setOptn003p(source.substring(260, 261));
        setOptn003h(source.substring(261, 262));
        setOptn003v(source.substring(262, 263));
        setOptn003o(source.substring(263, 303));
        setOFFILLER11(source.substring(303, 306));
        setOptn004c(source.substring(306, 307));
        setOptn004p(source.substring(307, 308));
        setOptn004h(source.substring(308, 309));
        setOptn004v(source.substring(309, 310));
        setOptn004o(source.substring(310, 350));
        setOFFILLER12(source.substring(350, 353));
        setOptn005c(source.substring(353, 354));
        setOptn005p(source.substring(354, 355));
        setOptn005h(source.substring(355, 356));
        setOptn005v(source.substring(356, 357));
        setOptn005o(source.substring(357, 397));
        setOFFILLER13(source.substring(397, 400));
        setOptn006c(source.substring(400, 401));
        setOptn006p(source.substring(401, 402));
        setOptn006h(source.substring(402, 403));
        setOptn006v(source.substring(403, 404));
        setOptn006o(source.substring(404, 444));
        setOFFILLER14(source.substring(444, 447));
        setOptn007c(source.substring(447, 448));
        setOptn007p(source.substring(448, 449));
        setOptn007h(source.substring(449, 450));
        setOptn007v(source.substring(450, 451));
        setOptn007o(source.substring(451, 491));
        setOFFILLER15(source.substring(491, 494));
        setOptn008c(source.substring(494, 495));
        setOptn008p(source.substring(495, 496));
        setOptn008h(source.substring(496, 497));
        setOptn008v(source.substring(497, 498));
        setOptn008o(source.substring(498, 538));
        setOFFILLER16(source.substring(538, 541));
        setOptn009c(source.substring(541, 542));
        setOptn009p(source.substring(542, 543));
        setOptn009h(source.substring(543, 544));
        setOptn009v(source.substring(544, 545));
        setOptn009o(source.substring(545, 585));
        setOFFILLER17(source.substring(585, 588));
        setOptn010c(source.substring(588, 589));
        setOptn010p(source.substring(589, 590));
        setOptn010h(source.substring(590, 591));
        setOptn010v(source.substring(591, 592));
        setOptn010o(source.substring(592, 632));
        setOFFILLER18(source.substring(632, 635));
        setOptn011c(source.substring(635, 636));
        setOptn011p(source.substring(636, 637));
        setOptn011h(source.substring(637, 638));
        setOptn011v(source.substring(638, 639));
        setOptn011o(source.substring(639, 679));
        setOFFILLER19(source.substring(679, 682));
        setOptn012c(source.substring(682, 683));
        setOptn012p(source.substring(683, 684));
        setOptn012h(source.substring(684, 685));
        setOptn012v(source.substring(685, 686));
        setOptn012o(source.substring(686, 726));
        setOFFILLER20(source.substring(726, 729));
        setOptionc(source.substring(729, 730));
        setOptionp(source.substring(730, 731));
        setOptionh(source.substring(731, 732));
        setOptionv(source.substring(732, 733));
        setOptiono(source.substring(733, 735));
        setOFFILLER21(source.substring(735, 738));
        setErrmsgc(source.substring(738, 739));
        setErrmsgp(source.substring(739, 740));
        setErrmsgh(source.substring(740, 741));
        setErrmsgv(source.substring(741, 742));
        setErrmsgo(source.substring(742, 820));
    }

    public void setCoadm1ao(Coadm01cCoadm1ao source) {
        setCoadm1ao(source.toString());
    }

    public String getOFFILLER1() {
        return getCoadm1ai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCoadm1ai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCoadm1ai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCoadm1ai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCoadm1ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCoadm1ai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCoadm1ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCoadm1ai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCoadm1ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCoadm1ai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCoadm1ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCoadm1ai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCoadm1ai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCoadm1ai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCoadm1ai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCoadm1ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCoadm1ai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCoadm1ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCoadm1ai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCoadm1ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCoadm1ai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCoadm1ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCoadm1ai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCoadm1ai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCoadm1ai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCoadm1ai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCoadm1ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCoadm1ai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCoadm1ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCoadm1ai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCoadm1ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCoadm1ai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCoadm1ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCoadm1ai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCoadm1ai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCoadm1ai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCoadm1ai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCoadm1ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCoadm1ai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCoadm1ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCoadm1ai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCoadm1ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCoadm1ai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCoadm1ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCoadm1ai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCoadm1ai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCoadm1ai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCoadm1ai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCoadm1ai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCoadm1ai().setOFFILLER11(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCoadm1ai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCoadm1ai().setOFFILLER11(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCoadm1ai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCoadm1ai().setOFFILLER11(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCoadm1ai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCoadm1ai().setOFFILLER11(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCoadm1ai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCoadm1ai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCoadm1ai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCoadm1ai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCoadm1ai().setOFFILLER13(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCoadm1ai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCoadm1ai().setOFFILLER13(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCoadm1ai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCoadm1ai().setOFFILLER13(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCoadm1ai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCoadm1ai().setOFFILLER13(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCoadm1ai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCoadm1ai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn001l());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCoadm1ai().getOptn001f();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn001l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn001l(0);
        }
    }

    public String getOptn001c() {
        return getCoadm1ai().getOFFILLER15().substring(0, 1);
    }

    public void setOptn001c(String source) {
        getCoadm1ai().setOFFILLER15(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER15(), source, 0, 1));
    }

    public String getOptn001p() {
        return getCoadm1ai().getOFFILLER15().substring(1, 2);
    }

    public void setOptn001p(String source) {
        getCoadm1ai().setOFFILLER15(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER15(), source, 1, 2));
    }

    public String getOptn001h() {
        return getCoadm1ai().getOFFILLER15().substring(2, 3);
    }

    public void setOptn001h(String source) {
        getCoadm1ai().setOFFILLER15(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER15(), source, 2, 3));
    }

    public String getOptn001v() {
        return getCoadm1ai().getOFFILLER15().substring(3);
    }

    public void setOptn001v(String source) {
        getCoadm1ai().setOFFILLER15(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER15(), source, 3, 4));
    }

    public String getOptn001o() {
        return getCoadm1ai().getOptn001i();
    }

    public void setOptn001o(String source) {
        getCoadm1ai().setOptn001i(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn002l());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCoadm1ai().getOptn002f();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn002l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn002l(0);
        }
    }

    public String getOptn002c() {
        return getCoadm1ai().getOFFILLER17().substring(0, 1);
    }

    public void setOptn002c(String source) {
        getCoadm1ai().setOFFILLER17(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER17(), source, 0, 1));
    }

    public String getOptn002p() {
        return getCoadm1ai().getOFFILLER17().substring(1, 2);
    }

    public void setOptn002p(String source) {
        getCoadm1ai().setOFFILLER17(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER17(), source, 1, 2));
    }

    public String getOptn002h() {
        return getCoadm1ai().getOFFILLER17().substring(2, 3);
    }

    public void setOptn002h(String source) {
        getCoadm1ai().setOFFILLER17(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER17(), source, 2, 3));
    }

    public String getOptn002v() {
        return getCoadm1ai().getOFFILLER17().substring(3);
    }

    public void setOptn002v(String source) {
        getCoadm1ai().setOFFILLER17(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER17(), source, 3, 4));
    }

    public String getOptn002o() {
        return getCoadm1ai().getOptn002i();
    }

    public void setOptn002o(String source) {
        getCoadm1ai().setOptn002i(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn003l());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCoadm1ai().getOptn003f();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn003l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn003l(0);
        }
    }

    public String getOptn003c() {
        return getCoadm1ai().getOFFILLER19().substring(0, 1);
    }

    public void setOptn003c(String source) {
        getCoadm1ai().setOFFILLER19(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER19(), source, 0, 1));
    }

    public String getOptn003p() {
        return getCoadm1ai().getOFFILLER19().substring(1, 2);
    }

    public void setOptn003p(String source) {
        getCoadm1ai().setOFFILLER19(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER19(), source, 1, 2));
    }

    public String getOptn003h() {
        return getCoadm1ai().getOFFILLER19().substring(2, 3);
    }

    public void setOptn003h(String source) {
        getCoadm1ai().setOFFILLER19(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER19(), source, 2, 3));
    }

    public String getOptn003v() {
        return getCoadm1ai().getOFFILLER19().substring(3);
    }

    public void setOptn003v(String source) {
        getCoadm1ai().setOFFILLER19(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER19(), source, 3, 4));
    }

    public String getOptn003o() {
        return getCoadm1ai().getOptn003i();
    }

    public void setOptn003o(String source) {
        getCoadm1ai().setOptn003i(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn004l());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCoadm1ai().getOptn004f();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn004l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn004l(0);
        }
    }

    public String getOptn004c() {
        return getCoadm1ai().getOFFILLER21().substring(0, 1);
    }

    public void setOptn004c(String source) {
        getCoadm1ai().setOFFILLER21(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER21(), source, 0, 1));
    }

    public String getOptn004p() {
        return getCoadm1ai().getOFFILLER21().substring(1, 2);
    }

    public void setOptn004p(String source) {
        getCoadm1ai().setOFFILLER21(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER21(), source, 1, 2));
    }

    public String getOptn004h() {
        return getCoadm1ai().getOFFILLER21().substring(2, 3);
    }

    public void setOptn004h(String source) {
        getCoadm1ai().setOFFILLER21(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER21(), source, 2, 3));
    }

    public String getOptn004v() {
        return getCoadm1ai().getOFFILLER21().substring(3);
    }

    public void setOptn004v(String source) {
        getCoadm1ai().setOFFILLER21(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER21(), source, 3, 4));
    }

    public String getOptn004o() {
        return getCoadm1ai().getOptn004i();
    }

    public void setOptn004o(String source) {
        getCoadm1ai().setOptn004i(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn005l());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCoadm1ai().getOptn005f();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn005l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn005l(0);
        }
    }

    public String getOptn005c() {
        return getCoadm1ai().getOFFILLER23().substring(0, 1);
    }

    public void setOptn005c(String source) {
        getCoadm1ai().setOFFILLER23(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER23(), source, 0, 1));
    }

    public String getOptn005p() {
        return getCoadm1ai().getOFFILLER23().substring(1, 2);
    }

    public void setOptn005p(String source) {
        getCoadm1ai().setOFFILLER23(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER23(), source, 1, 2));
    }

    public String getOptn005h() {
        return getCoadm1ai().getOFFILLER23().substring(2, 3);
    }

    public void setOptn005h(String source) {
        getCoadm1ai().setOFFILLER23(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER23(), source, 2, 3));
    }

    public String getOptn005v() {
        return getCoadm1ai().getOFFILLER23().substring(3);
    }

    public void setOptn005v(String source) {
        getCoadm1ai().setOFFILLER23(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER23(), source, 3, 4));
    }

    public String getOptn005o() {
        return getCoadm1ai().getOptn005i();
    }

    public void setOptn005o(String source) {
        getCoadm1ai().setOptn005i(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn006l());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCoadm1ai().getOptn006f();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn006l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn006l(0);
        }
    }

    public String getOptn006c() {
        return getCoadm1ai().getOFFILLER25().substring(0, 1);
    }

    public void setOptn006c(String source) {
        getCoadm1ai().setOFFILLER25(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER25(), source, 0, 1));
    }

    public String getOptn006p() {
        return getCoadm1ai().getOFFILLER25().substring(1, 2);
    }

    public void setOptn006p(String source) {
        getCoadm1ai().setOFFILLER25(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER25(), source, 1, 2));
    }

    public String getOptn006h() {
        return getCoadm1ai().getOFFILLER25().substring(2, 3);
    }

    public void setOptn006h(String source) {
        getCoadm1ai().setOFFILLER25(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER25(), source, 2, 3));
    }

    public String getOptn006v() {
        return getCoadm1ai().getOFFILLER25().substring(3);
    }

    public void setOptn006v(String source) {
        getCoadm1ai().setOFFILLER25(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER25(), source, 3, 4));
    }

    public String getOptn006o() {
        return getCoadm1ai().getOptn006i();
    }

    public void setOptn006o(String source) {
        getCoadm1ai().setOptn006i(source);
    }

    public String getOFFILLER14() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn007l());
        tempByteBuffer1.flip();
        String temp13 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp13 + getCoadm1ai().getOptn007f();
    }

    public void setOFFILLER14(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn007l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn007l(0);
        }
    }

    public String getOptn007c() {
        return getCoadm1ai().getOFFILLER27().substring(0, 1);
    }

    public void setOptn007c(String source) {
        getCoadm1ai().setOFFILLER27(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER27(), source, 0, 1));
    }

    public String getOptn007p() {
        return getCoadm1ai().getOFFILLER27().substring(1, 2);
    }

    public void setOptn007p(String source) {
        getCoadm1ai().setOFFILLER27(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER27(), source, 1, 2));
    }

    public String getOptn007h() {
        return getCoadm1ai().getOFFILLER27().substring(2, 3);
    }

    public void setOptn007h(String source) {
        getCoadm1ai().setOFFILLER27(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER27(), source, 2, 3));
    }

    public String getOptn007v() {
        return getCoadm1ai().getOFFILLER27().substring(3);
    }

    public void setOptn007v(String source) {
        getCoadm1ai().setOFFILLER27(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER27(), source, 3, 4));
    }

    public String getOptn007o() {
        return getCoadm1ai().getOptn007i();
    }

    public void setOptn007o(String source) {
        getCoadm1ai().setOptn007i(source);
    }

    public String getOFFILLER15() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn008l());
        tempByteBuffer1.flip();
        String temp14 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp14 + getCoadm1ai().getOptn008f();
    }

    public void setOFFILLER15(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn008l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn008l(0);
        }
    }

    public String getOptn008c() {
        return getCoadm1ai().getOFFILLER29().substring(0, 1);
    }

    public void setOptn008c(String source) {
        getCoadm1ai().setOFFILLER29(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER29(), source, 0, 1));
    }

    public String getOptn008p() {
        return getCoadm1ai().getOFFILLER29().substring(1, 2);
    }

    public void setOptn008p(String source) {
        getCoadm1ai().setOFFILLER29(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER29(), source, 1, 2));
    }

    public String getOptn008h() {
        return getCoadm1ai().getOFFILLER29().substring(2, 3);
    }

    public void setOptn008h(String source) {
        getCoadm1ai().setOFFILLER29(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER29(), source, 2, 3));
    }

    public String getOptn008v() {
        return getCoadm1ai().getOFFILLER29().substring(3);
    }

    public void setOptn008v(String source) {
        getCoadm1ai().setOFFILLER29(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER29(), source, 3, 4));
    }

    public String getOptn008o() {
        return getCoadm1ai().getOptn008i();
    }

    public void setOptn008o(String source) {
        getCoadm1ai().setOptn008i(source);
    }

    public String getOFFILLER16() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn009l());
        tempByteBuffer1.flip();
        String temp15 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp15 + getCoadm1ai().getOptn009f();
    }

    public void setOFFILLER16(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn009l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn009l(0);
        }
    }

    public String getOptn009c() {
        return getCoadm1ai().getOFFILLER31().substring(0, 1);
    }

    public void setOptn009c(String source) {
        getCoadm1ai().setOFFILLER31(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER31(), source, 0, 1));
    }

    public String getOptn009p() {
        return getCoadm1ai().getOFFILLER31().substring(1, 2);
    }

    public void setOptn009p(String source) {
        getCoadm1ai().setOFFILLER31(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER31(), source, 1, 2));
    }

    public String getOptn009h() {
        return getCoadm1ai().getOFFILLER31().substring(2, 3);
    }

    public void setOptn009h(String source) {
        getCoadm1ai().setOFFILLER31(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER31(), source, 2, 3));
    }

    public String getOptn009v() {
        return getCoadm1ai().getOFFILLER31().substring(3);
    }

    public void setOptn009v(String source) {
        getCoadm1ai().setOFFILLER31(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER31(), source, 3, 4));
    }

    public String getOptn009o() {
        return getCoadm1ai().getOptn009i();
    }

    public void setOptn009o(String source) {
        getCoadm1ai().setOptn009i(source);
    }

    public String getOFFILLER17() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn010l());
        tempByteBuffer1.flip();
        String temp16 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp16 + getCoadm1ai().getOptn010f();
    }

    public void setOFFILLER17(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn010l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn010l(0);
        }
    }

    public String getOptn010c() {
        return getCoadm1ai().getOFFILLER33().substring(0, 1);
    }

    public void setOptn010c(String source) {
        getCoadm1ai().setOFFILLER33(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER33(), source, 0, 1));
    }

    public String getOptn010p() {
        return getCoadm1ai().getOFFILLER33().substring(1, 2);
    }

    public void setOptn010p(String source) {
        getCoadm1ai().setOFFILLER33(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER33(), source, 1, 2));
    }

    public String getOptn010h() {
        return getCoadm1ai().getOFFILLER33().substring(2, 3);
    }

    public void setOptn010h(String source) {
        getCoadm1ai().setOFFILLER33(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER33(), source, 2, 3));
    }

    public String getOptn010v() {
        return getCoadm1ai().getOFFILLER33().substring(3);
    }

    public void setOptn010v(String source) {
        getCoadm1ai().setOFFILLER33(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER33(), source, 3, 4));
    }

    public String getOptn010o() {
        return getCoadm1ai().getOptn010i();
    }

    public void setOptn010o(String source) {
        getCoadm1ai().setOptn010i(source);
    }

    public String getOFFILLER18() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn011l());
        tempByteBuffer1.flip();
        String temp17 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp17 + getCoadm1ai().getOptn011f();
    }

    public void setOFFILLER18(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn011l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn011l(0);
        }
    }

    public String getOptn011c() {
        return getCoadm1ai().getOFFILLER35().substring(0, 1);
    }

    public void setOptn011c(String source) {
        getCoadm1ai().setOFFILLER35(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER35(), source, 0, 1));
    }

    public String getOptn011p() {
        return getCoadm1ai().getOFFILLER35().substring(1, 2);
    }

    public void setOptn011p(String source) {
        getCoadm1ai().setOFFILLER35(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER35(), source, 1, 2));
    }

    public String getOptn011h() {
        return getCoadm1ai().getOFFILLER35().substring(2, 3);
    }

    public void setOptn011h(String source) {
        getCoadm1ai().setOFFILLER35(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER35(), source, 2, 3));
    }

    public String getOptn011v() {
        return getCoadm1ai().getOFFILLER35().substring(3);
    }

    public void setOptn011v(String source) {
        getCoadm1ai().setOFFILLER35(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER35(), source, 3, 4));
    }

    public String getOptn011o() {
        return getCoadm1ai().getOptn011i();
    }

    public void setOptn011o(String source) {
        getCoadm1ai().setOptn011i(source);
    }

    public String getOFFILLER19() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptn012l());
        tempByteBuffer1.flip();
        String temp18 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp18 + getCoadm1ai().getOptn012f();
    }

    public void setOFFILLER19(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptn012l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptn012l(0);
        }
    }

    public String getOptn012c() {
        return getCoadm1ai().getOFFILLER37().substring(0, 1);
    }

    public void setOptn012c(String source) {
        getCoadm1ai().setOFFILLER37(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER37(), source, 0, 1));
    }

    public String getOptn012p() {
        return getCoadm1ai().getOFFILLER37().substring(1, 2);
    }

    public void setOptn012p(String source) {
        getCoadm1ai().setOFFILLER37(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER37(), source, 1, 2));
    }

    public String getOptn012h() {
        return getCoadm1ai().getOFFILLER37().substring(2, 3);
    }

    public void setOptn012h(String source) {
        getCoadm1ai().setOFFILLER37(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER37(), source, 2, 3));
    }

    public String getOptn012v() {
        return getCoadm1ai().getOFFILLER37().substring(3);
    }

    public void setOptn012v(String source) {
        getCoadm1ai().setOFFILLER37(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER37(), source, 3, 4));
    }

    public String getOptn012o() {
        return getCoadm1ai().getOptn012i();
    }

    public void setOptn012o(String source) {
        getCoadm1ai().setOptn012i(source);
    }

    public String getOFFILLER20() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getOptionl());
        tempByteBuffer1.flip();
        String temp19 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp19 + getCoadm1ai().getOptionf();
    }

    public void setOFFILLER20(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setOptionl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setOptionl(0);
        }
    }

    public String getOptionc() {
        return getCoadm1ai().getOFFILLER39().substring(0, 1);
    }

    public void setOptionc(String source) {
        getCoadm1ai().setOFFILLER39(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER39(), source, 0, 1));
    }

    public String getOptionp() {
        return getCoadm1ai().getOFFILLER39().substring(1, 2);
    }

    public void setOptionp(String source) {
        getCoadm1ai().setOFFILLER39(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER39(), source, 1, 2));
    }

    public String getOptionh() {
        return getCoadm1ai().getOFFILLER39().substring(2, 3);
    }

    public void setOptionh(String source) {
        getCoadm1ai().setOFFILLER39(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER39(), source, 2, 3));
    }

    public String getOptionv() {
        return getCoadm1ai().getOFFILLER39().substring(3);
    }

    public void setOptionv(String source) {
        getCoadm1ai().setOFFILLER39(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER39(), source, 3, 4));
    }

    public String getOptiono() {
        return getCoadm1ai().getOptioni();
    }

    public void setOptiono(String source) {
        getCoadm1ai().setOptioni(source);
    }

    public String getOFFILLER21() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCoadm1ai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp20 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp20 + getCoadm1ai().getErrmsgf();
    }

    public void setOFFILLER21(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCoadm1ai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCoadm1ai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCoadm1ai().getOFFILLER41().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCoadm1ai().setOFFILLER41(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER41(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCoadm1ai().getOFFILLER41().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCoadm1ai().setOFFILLER41(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER41(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCoadm1ai().getOFFILLER41().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCoadm1ai().setOFFILLER41(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER41(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCoadm1ai().getOFFILLER41().substring(3);
    }

    public void setErrmsgv(String source) {
        getCoadm1ai().setOFFILLER41(
                StringUtils
                        .overlay(getCoadm1ai().getOFFILLER41(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCoadm1ai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCoadm1ai().setErrmsgi(source);
    }

    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter Coadm01cCcdaScreenTitle ccdaScreenTitle = new Coadm01cCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter Coadm01cWsDateTime wsDateTime = new Coadm01cWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter Coadm01cCcdaCommonMessages ccdaCommonMessages = new Coadm01cCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSUSR01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSUSR01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSUSR01Y.cpy, LINE #18] SEC-USER-DATA (level: 1)
    private @Getter @Setter Coadm01cSecUserData secUserData = new Coadm01cSecUserData();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter Coadm01cDfhaid dfhaid = new Coadm01cDfhaid();
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter Coadm01cDfhbmsca dfhbmsca = new Coadm01cDfhbmsca();
    // *----------------------------------------------------------------*
    // *                        LINKAGE SECTION                          
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COADM01C.cbl, LINE #67] DFHCOMMAREA (level: 1)
    private @Getter @Setter Coadm01cDfhcommarea dfhcommarea = new Coadm01cDfhcommarea();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class Coadm01cCoadm1ao {
        // [T-Up#INFO][COADM01.CPY, LINE #141] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COADM01.CPY, LINE #142] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #143] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #144] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #145] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #146] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #147] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COADM01.CPY, LINE #148] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #149] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #150] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #151] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #152] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #153] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #154] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #155] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #156] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #157] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #158] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #159] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COADM01.CPY, LINE #160] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #161] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #162] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #163] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #164] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #165] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COADM01.CPY, LINE #166] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #167] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #168] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #169] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #170] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #171] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #172] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #173] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #174] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #175] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #176] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #177] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COADM01.CPY, LINE #178] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #179] OPTN001C (level: 2)
        private @Getter String optn001c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #180] OPTN001P (level: 2)
        private @Getter String optn001p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #181] OPTN001H (level: 2)
        private @Getter String optn001h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #182] OPTN001V (level: 2)
        private @Getter String optn001v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #183] OPTN001O (level: 2)
        private @Getter String optn001o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #184] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #185] OPTN002C (level: 2)
        private @Getter String optn002c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #186] OPTN002P (level: 2)
        private @Getter String optn002p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #187] OPTN002H (level: 2)
        private @Getter String optn002h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #188] OPTN002V (level: 2)
        private @Getter String optn002v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #189] OPTN002O (level: 2)
        private @Getter String optn002o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #190] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #191] OPTN003C (level: 2)
        private @Getter String optn003c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #192] OPTN003P (level: 2)
        private @Getter String optn003p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #193] OPTN003H (level: 2)
        private @Getter String optn003h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #194] OPTN003V (level: 2)
        private @Getter String optn003v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #195] OPTN003O (level: 2)
        private @Getter String optn003o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #196] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #197] OPTN004C (level: 2)
        private @Getter String optn004c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #198] OPTN004P (level: 2)
        private @Getter String optn004p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #199] OPTN004H (level: 2)
        private @Getter String optn004h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #200] OPTN004V (level: 2)
        private @Getter String optn004v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #201] OPTN004O (level: 2)
        private @Getter String optn004o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #202] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #203] OPTN005C (level: 2)
        private @Getter String optn005c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #204] OPTN005P (level: 2)
        private @Getter String optn005p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #205] OPTN005H (level: 2)
        private @Getter String optn005h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #206] OPTN005V (level: 2)
        private @Getter String optn005v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #207] OPTN005O (level: 2)
        private @Getter String optn005o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #208] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #209] OPTN006C (level: 2)
        private @Getter String optn006c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #210] OPTN006P (level: 2)
        private @Getter String optn006p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #211] OPTN006H (level: 2)
        private @Getter String optn006h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #212] OPTN006V (level: 2)
        private @Getter String optn006v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #213] OPTN006O (level: 2)
        private @Getter String optn006o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #214] FILLER (level: 2)
        private @Getter String OFFILLER14 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #215] OPTN007C (level: 2)
        private @Getter String optn007c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #216] OPTN007P (level: 2)
        private @Getter String optn007p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #217] OPTN007H (level: 2)
        private @Getter String optn007h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #218] OPTN007V (level: 2)
        private @Getter String optn007v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #219] OPTN007O (level: 2)
        private @Getter String optn007o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #220] FILLER (level: 2)
        private @Getter String OFFILLER15 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #221] OPTN008C (level: 2)
        private @Getter String optn008c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #222] OPTN008P (level: 2)
        private @Getter String optn008p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #223] OPTN008H (level: 2)
        private @Getter String optn008h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #224] OPTN008V (level: 2)
        private @Getter String optn008v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #225] OPTN008O (level: 2)
        private @Getter String optn008o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #226] FILLER (level: 2)
        private @Getter String OFFILLER16 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #227] OPTN009C (level: 2)
        private @Getter String optn009c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #228] OPTN009P (level: 2)
        private @Getter String optn009p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #229] OPTN009H (level: 2)
        private @Getter String optn009h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #230] OPTN009V (level: 2)
        private @Getter String optn009v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #231] OPTN009O (level: 2)
        private @Getter String optn009o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #232] FILLER (level: 2)
        private @Getter String OFFILLER17 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #233] OPTN010C (level: 2)
        private @Getter String optn010c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #234] OPTN010P (level: 2)
        private @Getter String optn010p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #235] OPTN010H (level: 2)
        private @Getter String optn010h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #236] OPTN010V (level: 2)
        private @Getter String optn010v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #237] OPTN010O (level: 2)
        private @Getter String optn010o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #238] FILLER (level: 2)
        private @Getter String OFFILLER18 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #239] OPTN011C (level: 2)
        private @Getter String optn011c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #240] OPTN011P (level: 2)
        private @Getter String optn011p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #241] OPTN011H (level: 2)
        private @Getter String optn011h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #242] OPTN011V (level: 2)
        private @Getter String optn011v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #243] OPTN011O (level: 2)
        private @Getter String optn011o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #244] FILLER (level: 2)
        private @Getter String OFFILLER19 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #245] OPTN012C (level: 2)
        private @Getter String optn012c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #246] OPTN012P (level: 2)
        private @Getter String optn012p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #247] OPTN012H (level: 2)
        private @Getter String optn012h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #248] OPTN012V (level: 2)
        private @Getter String optn012v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #249] OPTN012O (level: 2)
        private @Getter String optn012o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COADM01.CPY, LINE #250] FILLER (level: 2)
        private @Getter String OFFILLER20 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #251] OPTIONC (level: 2)
        private @Getter String optionc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #252] OPTIONP (level: 2)
        private @Getter String optionp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #253] OPTIONH (level: 2)
        private @Getter String optionh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #254] OPTIONV (level: 2)
        private @Getter String optionv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #255] OPTIONO (level: 2)
        private @Getter String optiono = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COADM01.CPY, LINE #256] FILLER (level: 2)
        private @Getter String OFFILLER21 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COADM01.CPY, LINE #257] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #258] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #259] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #260] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COADM01.CPY, LINE #261] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(optn001c);
            sb.append(optn001p);
            sb.append(optn001h);
            sb.append(optn001v);
            sb.append(optn001o);
            sb.append(OFFILLER9);
            sb.append(optn002c);
            sb.append(optn002p);
            sb.append(optn002h);
            sb.append(optn002v);
            sb.append(optn002o);
            sb.append(OFFILLER10);
            sb.append(optn003c);
            sb.append(optn003p);
            sb.append(optn003h);
            sb.append(optn003v);
            sb.append(optn003o);
            sb.append(OFFILLER11);
            sb.append(optn004c);
            sb.append(optn004p);
            sb.append(optn004h);
            sb.append(optn004v);
            sb.append(optn004o);
            sb.append(OFFILLER12);
            sb.append(optn005c);
            sb.append(optn005p);
            sb.append(optn005h);
            sb.append(optn005v);
            sb.append(optn005o);
            sb.append(OFFILLER13);
            sb.append(optn006c);
            sb.append(optn006p);
            sb.append(optn006h);
            sb.append(optn006v);
            sb.append(optn006o);
            sb.append(OFFILLER14);
            sb.append(optn007c);
            sb.append(optn007p);
            sb.append(optn007h);
            sb.append(optn007v);
            sb.append(optn007o);
            sb.append(OFFILLER15);
            sb.append(optn008c);
            sb.append(optn008p);
            sb.append(optn008h);
            sb.append(optn008v);
            sb.append(optn008o);
            sb.append(OFFILLER16);
            sb.append(optn009c);
            sb.append(optn009p);
            sb.append(optn009h);
            sb.append(optn009v);
            sb.append(optn009o);
            sb.append(OFFILLER17);
            sb.append(optn010c);
            sb.append(optn010p);
            sb.append(optn010h);
            sb.append(optn010v);
            sb.append(optn010o);
            sb.append(OFFILLER18);
            sb.append(optn011c);
            sb.append(optn011p);
            sb.append(optn011h);
            sb.append(optn011v);
            sb.append(optn011o);
            sb.append(OFFILLER19);
            sb.append(optn012c);
            sb.append(optn012p);
            sb.append(optn012h);
            sb.append(optn012v);
            sb.append(optn012o);
            sb.append(OFFILLER20);
            sb.append(optionc);
            sb.append(optionp);
            sb.append(optionh);
            sb.append(optionv);
            sb.append(optiono);
            sb.append(OFFILLER21);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(optn001c);
            sb.append(optn001p);
            sb.append(optn001h);
            sb.append(optn001v);
            sb.append(optn001o);
            sb.append(OFFILLER9);
            sb.append(optn002c);
            sb.append(optn002p);
            sb.append(optn002h);
            sb.append(optn002v);
            sb.append(optn002o);
            sb.append(OFFILLER10);
            sb.append(optn003c);
            sb.append(optn003p);
            sb.append(optn003h);
            sb.append(optn003v);
            sb.append(optn003o);
            sb.append(OFFILLER11);
            sb.append(optn004c);
            sb.append(optn004p);
            sb.append(optn004h);
            sb.append(optn004v);
            sb.append(optn004o);
            sb.append(OFFILLER12);
            sb.append(optn005c);
            sb.append(optn005p);
            sb.append(optn005h);
            sb.append(optn005v);
            sb.append(optn005o);
            sb.append(OFFILLER13);
            sb.append(optn006c);
            sb.append(optn006p);
            sb.append(optn006h);
            sb.append(optn006v);
            sb.append(optn006o);
            sb.append(OFFILLER14);
            sb.append(optn007c);
            sb.append(optn007p);
            sb.append(optn007h);
            sb.append(optn007v);
            sb.append(optn007o);
            sb.append(OFFILLER15);
            sb.append(optn008c);
            sb.append(optn008p);
            sb.append(optn008h);
            sb.append(optn008v);
            sb.append(optn008o);
            sb.append(OFFILLER16);
            sb.append(optn009c);
            sb.append(optn009p);
            sb.append(optn009h);
            sb.append(optn009v);
            sb.append(optn009o);
            sb.append(OFFILLER17);
            sb.append(optn010c);
            sb.append(optn010p);
            sb.append(optn010h);
            sb.append(optn010v);
            sb.append(optn010o);
            sb.append(OFFILLER18);
            sb.append(optn011c);
            sb.append(optn011p);
            sb.append(optn011h);
            sb.append(optn011v);
            sb.append(optn011o);
            sb.append(OFFILLER19);
            sb.append(optn012c);
            sb.append(optn012p);
            sb.append(optn012h);
            sb.append(optn012v);
            sb.append(optn012o);
            sb.append(OFFILLER20);
            sb.append(optionc);
            sb.append(optionp);
            sb.append(optionh);
            sb.append(optionv);
            sb.append(optiono);
            sb.append(OFFILLER21);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }
    }
}
