package aws.carddemo.mapper;

import com.tmax.openframe.DataConverter;
import org.apache.commons.lang3.StringUtils;
import org.mapstruct.*;
import org.mapstruct.factory.*;
import aws.carddemo.variable.group.Cbtrn02cFdTranCatBalRecord;
import aws.carddemo.dto.AwsM2CarddemoTcatbalfVsamKsdsDto;
import aws.carddemo.variable.group.Cbtrn02cFdAcctfileRec;
import aws.carddemo.dto.AwsM2CarddemoAcctdataVsamKsdsDto;
import aws.carddemo.variable.group.Cbtrn02cFdRejsRecord;
import aws.carddemo.dto.AwsM2CarddemoDalyrejsDto;
import aws.carddemo.variable.group.Cbtrn02cFdTranfileRec;
import aws.carddemo.dto.AwsM2CarddemoTransactVsamKsdsDto;
import aws.carddemo.variable.group.Cbtrn02cFdXreffileRec;
import aws.carddemo.dto.AwsM2CarddemoCardxrefVsamKsdsDto;
import aws.carddemo.variable.group.Cbtrn02cFdTranRecord;
import aws.carddemo.dto.AwsM2CarddemoDalytranPsDto;
import lombok.*;
import java.math.*;
import java.util.*;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:55:56 UTC</p>
 * <hr>
 * <p>Mapper class for converting data between different classes</p>
 */
public interface Cbtrn02cMapperInterface {
    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdTranCatBalRecord}</li>
     * <li>target class: {@link AwsM2CarddemoTcatbalfVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdTranCatBalRecordToAwsM2CarddemoTcatbalfVsamKsdsDto {
        Cbtrn02cFdTranCatBalRecordToAwsM2CarddemoTcatbalfVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdTranCatBalRecordToAwsM2CarddemoTcatbalfVsamKsdsDto.class);

        @Mapping(source = "fdTranCatKey.fdTrancatAcctId", target = "fdTrancatAcctId")
        @Mapping(source = "fdTranCatKey.fdTrancatTypeCd", target = "fdTrancatTypeCd")
        @Mapping(source = "fdTranCatKey.fdTrancatCd", target = "fdTrancatCd")
        @Mapping(source = "fdFdTranCatData", target = "fdFdTranCatData")
        AwsM2CarddemoTcatbalfVsamKsdsDto toTarget(
                Cbtrn02cFdTranCatBalRecord source);

        @Mapping(source = "fdTrancatAcctId", target = "fdTranCatKey.fdTrancatAcctId")
        @Mapping(source = "fdTrancatTypeCd", target = "fdTranCatKey.fdTrancatTypeCd")
        @Mapping(source = "fdTrancatCd", target = "fdTranCatKey.fdTrancatCd")
        @Mapping(source = "fdFdTranCatData", target = "fdFdTranCatData")
        Cbtrn02cFdTranCatBalRecord toSource(
                AwsM2CarddemoTcatbalfVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdAcctfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoAcctdataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto {
        Cbtrn02cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdAcctfileRecToAwsM2CarddemoAcctdataVsamKsdsDto.class);

        @Mapping(source = "fdAcctId", target = "acctId")
        @Mapping(source = "fdAcctActiveStatus", target = "acctActiveStatus")
        @Mapping(source = "fdAcctCurrBal", target = "acctCurrBal")
        @Mapping(source = "fdAcctCreditLimit", target = "acctCreditLimit")
        @Mapping(source = "fdAcctCashCreditLimit", target = "acctCashCreditLimit")
        @Mapping(source = "fdAcctOpenDate", target = "acctOpenDate")
        @Mapping(source = "fdAcctExpiraionDate", target = "acctExpiraionDate")
        @Mapping(source = "fdAcctReissueDate", target = "acctReissueDate")
        @Mapping(source = "fdAcctCurrCycCredit", target = "acctCurrCycCredit")
        @Mapping(source = "fdAcctCurrCycDebit", target = "acctCurrCycDebit")
        @Mapping(source = "fdAcctAddrZip", target = "acctAddrZip")
        @Mapping(source = "fdAcctGroupId", target = "acctGroupId")
        @Mapping(source = "OFFILLER1", target = "filler")
        AwsM2CarddemoAcctdataVsamKsdsDto toTarget(Cbtrn02cFdAcctfileRec source);

        @Mapping(source = "acctId", target = "fdAcctId")
        @Mapping(source = "acctActiveStatus", target = "fdAcctActiveStatus")
        @Mapping(source = "acctCurrBal", target = "fdAcctCurrBal")
        @Mapping(source = "acctCreditLimit", target = "fdAcctCreditLimit")
        @Mapping(source = "acctCashCreditLimit", target = "fdAcctCashCreditLimit")
        @Mapping(source = "acctOpenDate", target = "fdAcctOpenDate")
        @Mapping(source = "acctExpiraionDate", target = "fdAcctExpiraionDate")
        @Mapping(source = "acctReissueDate", target = "fdAcctReissueDate")
        @Mapping(source = "acctCurrCycCredit", target = "fdAcctCurrCycCredit")
        @Mapping(source = "acctCurrCycDebit", target = "fdAcctCurrCycDebit")
        @Mapping(source = "acctAddrZip", target = "fdAcctAddrZip")
        @Mapping(source = "acctGroupId", target = "fdAcctGroupId")
        @Mapping(source = "filler", target = "OFFILLER1")
        Cbtrn02cFdAcctfileRec toSource(AwsM2CarddemoAcctdataVsamKsdsDto source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdTranCatBalRecord}</li>
     * <li>target class: {@link AwsM2CarddemoTcatbalfVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdTranCatBalRecordKeyToAwsM2CarddemoTcatbalfVsamKsdsDto {
        Cbtrn02cFdTranCatBalRecordKeyToAwsM2CarddemoTcatbalfVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdTranCatBalRecordKeyToAwsM2CarddemoTcatbalfVsamKsdsDto.class);

        @Mapping(source = "fdTranCatKey.fdTrancatAcctId", target = "fdTrancatAcctId")
        @Mapping(source = "fdTranCatKey.fdTrancatTypeCd", target = "fdTrancatTypeCd")
        @Mapping(source = "fdTranCatKey.fdTrancatCd", target = "fdTrancatCd")
        AwsM2CarddemoTcatbalfVsamKsdsDto toTarget(
                Cbtrn02cFdTranCatBalRecord source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdRejsRecord}</li>
     * <li>target class: {@link AwsM2CarddemoDalyrejsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdRejsRecordToAwsM2CarddemoDalyrejsDto {
        Cbtrn02cFdRejsRecordToAwsM2CarddemoDalyrejsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdRejsRecordToAwsM2CarddemoDalyrejsDto.class);

        @Mapping(source = "fdRejectRecord", target = "fdRejectRecord")
        @Mapping(source = "fdValidationTrailer", target = "fdValidationTrailer")
        AwsM2CarddemoDalyrejsDto toTarget(Cbtrn02cFdRejsRecord source);

        @Mapping(source = "fdRejectRecord", target = "fdRejectRecord")
        @Mapping(source = "fdValidationTrailer", target = "fdValidationTrailer")
        Cbtrn02cFdRejsRecord toSource(AwsM2CarddemoDalyrejsDto source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdTranfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoTransactVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdTranfileRecKeyToAwsM2CarddemoTransactVsamKsdsDto {
        Cbtrn02cFdTranfileRecKeyToAwsM2CarddemoTransactVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdTranfileRecKeyToAwsM2CarddemoTransactVsamKsdsDto.class);

        @Mapping(source = "fdTransId", target = "tranId")
        AwsM2CarddemoTransactVsamKsdsDto toTarget(Cbtrn02cFdTranfileRec source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdXreffileRec}</li>
     * <li>target class: {@link AwsM2CarddemoCardxrefVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdXreffileRecToAwsM2CarddemoCardxrefVsamKsdsDto {
        Cbtrn02cFdXreffileRecToAwsM2CarddemoCardxrefVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdXreffileRecToAwsM2CarddemoCardxrefVsamKsdsDto.class);

        @Mapping(source = "fdXrefCardNum", target = "xrefCardNum")
        AwsM2CarddemoCardxrefVsamKsdsDto toTarget(Cbtrn02cFdXreffileRec source);

        @Mapping(source = "xrefCardNum", target = "fdXrefCardNum")
        Cbtrn02cFdXreffileRec toSource(AwsM2CarddemoCardxrefVsamKsdsDto source);

        @AfterMapping
        default void makeTarget(Cbtrn02cFdXreffileRec source,
                @MappingTarget AwsM2CarddemoCardxrefVsamKsdsDto target) {
            target.setXrefCustId(DataConverter.convZonedStringToBigDecimal(
                    source.getFdXrefData().substring(0, 9), 9, 0));
            target.setXrefAcctId(DataConverter.convZonedStringToBigDecimal(
                    source.getFdXrefData().substring(9, 20), 11, 0));
            target.setFiller(source.getFdXrefData().substring(20));
        }

        @AfterMapping
        default void makeSource(AwsM2CarddemoCardxrefVsamKsdsDto source,
                @MappingTarget Cbtrn02cFdXreffileRec target) {
            target.setFdXrefData(DataConverter.convZonedBigDecimalToString(
                    source.getXrefCustId(), 9, 0)
                    + DataConverter.convZonedBigDecimalToString(
                            source.getXrefAcctId(), 11, 0) + source.getFiller());
        }
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdAcctfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoAcctdataVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto {
        Cbtrn02cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdAcctfileRecKeyToAwsM2CarddemoAcctdataVsamKsdsDto.class);

        @Mapping(source = "fdAcctId", target = "acctId")
        AwsM2CarddemoAcctdataVsamKsdsDto toTarget(Cbtrn02cFdAcctfileRec source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdTranRecord}</li>
     * <li>target class: {@link AwsM2CarddemoDalytranPsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdTranRecordToAwsM2CarddemoDalytranPsDto {
        Cbtrn02cFdTranRecordToAwsM2CarddemoDalytranPsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdTranRecordToAwsM2CarddemoDalytranPsDto.class);

        @Mapping(source = "fdTranId", target = "fdTranId")
        @Mapping(source = "fdCustData", target = "fdCustData")
        AwsM2CarddemoDalytranPsDto toTarget(Cbtrn02cFdTranRecord source);

        @Mapping(source = "fdTranId", target = "fdTranId")
        @Mapping(source = "fdCustData", target = "fdCustData")
        Cbtrn02cFdTranRecord toSource(AwsM2CarddemoDalytranPsDto source);
    }

    /** 
     * <p>Mapper class to convert data for indexed file I/O that uses only the record key</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdXreffileRec}</li>
     * <li>target class: {@link AwsM2CarddemoCardxrefVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdXreffileRecKeyToAwsM2CarddemoCardxrefVsamKsdsDto {
        Cbtrn02cFdXreffileRecKeyToAwsM2CarddemoCardxrefVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdXreffileRecKeyToAwsM2CarddemoCardxrefVsamKsdsDto.class);

        @Mapping(source = "fdXrefCardNum", target = "xrefCardNum")
        AwsM2CarddemoCardxrefVsamKsdsDto toTarget(Cbtrn02cFdXreffileRec source);
    }

    /** 
     * <p>Mapper class to convert data for file I/O</p>
     * <ul>
     * <li>source class: {@link Cbtrn02cFdTranfileRec}</li>
     * <li>target class: {@link AwsM2CarddemoTransactVsamKsdsDto}</li>
     * </ul>
     */
    @Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
    public interface Cbtrn02cFdTranfileRecToAwsM2CarddemoTransactVsamKsdsDto {
        Cbtrn02cFdTranfileRecToAwsM2CarddemoTransactVsamKsdsDto INSTANCE = Mappers
                .getMapper(Cbtrn02cFdTranfileRecToAwsM2CarddemoTransactVsamKsdsDto.class);

        @Mapping(source = "fdTransId", target = "tranId")
        @Mapping(source = "fdTranTypeCd", target = "tranTypeCd")
        @Mapping(source = "fdTranCatCd", target = "tranCatCd")
        @Mapping(source = "fdTranSource", target = "tranSource")
        @Mapping(source = "fdTranDesc", target = "tranDesc")
        @Mapping(source = "fdTranAmt", target = "tranAmt")
        @Mapping(source = "fdTranMerchantId", target = "tranMerchantId")
        @Mapping(source = "fdTranMerchantName", target = "tranMerchantName")
        @Mapping(source = "fdTranMerchantCity", target = "tranMerchantCity")
        @Mapping(source = "fdTranMerchantZip", target = "tranMerchantZip")
        @Mapping(source = "fdTranCardNum", target = "tranCardNum")
        @Mapping(source = "fdTranOrigTs", target = "tranOrigTs")
        @Mapping(source = "fdTranProcTs", target = "tranProcTs")
        @Mapping(source = "OFFILLER1", target = "filler")
        AwsM2CarddemoTransactVsamKsdsDto toTarget(Cbtrn02cFdTranfileRec source);

        @Mapping(source = "tranId", target = "fdTransId")
        @Mapping(source = "tranTypeCd", target = "fdTranTypeCd")
        @Mapping(source = "tranCatCd", target = "fdTranCatCd")
        @Mapping(source = "tranSource", target = "fdTranSource")
        @Mapping(source = "tranDesc", target = "fdTranDesc")
        @Mapping(source = "tranAmt", target = "fdTranAmt")
        @Mapping(source = "tranMerchantId", target = "fdTranMerchantId")
        @Mapping(source = "tranMerchantName", target = "fdTranMerchantName")
        @Mapping(source = "tranMerchantCity", target = "fdTranMerchantCity")
        @Mapping(source = "tranMerchantZip", target = "fdTranMerchantZip")
        @Mapping(source = "tranCardNum", target = "fdTranCardNum")
        @Mapping(source = "tranOrigTs", target = "fdTranOrigTs")
        @Mapping(source = "tranProcTs", target = "fdTranProcTs")
        @Mapping(source = "filler", target = "OFFILLER1")
        Cbtrn02cFdTranfileRec toSource(AwsM2CarddemoTransactVsamKsdsDto source);
    }
}
