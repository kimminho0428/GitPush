package aws.carddemo.variable.group;

import com.tmax.openframe.DataConverter;
import com.tmax.openframe.runtime.cobol.PictureFormatter;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:46 UTC</p>
 */
public @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class CoactvwcCactvwai {
    // [T-Up#INFO][COACTVW.CPY, LINE #19] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER1 = StringUtils.repeat(' ',
            12);
    // [T-Up#INFO][COACTVW.CPY, LINE #20] TRNNAMEL (level: 2)
    private @Getter @Setter int trnnamel;
    // [T-Up#INFO][COACTVW.CPY, LINE #21] TRNNAMEF (level: 2)
    private @Getter @Builder.Default String trnnamef = StringUtils.repeat(' ',
            1);

    public _OFFILLER2 getOFFILLER2() {
        return _OFFILLER2.builder().trnnamea(getTrnnamea()).build();
    }

    public void setOFFILLER2(String source) {
        setTrnnamea(source.substring(0, 1));
    }

    public void setOFFILLER2(_OFFILLER2 source) {
        setOFFILLER2(source.toString());
    }

    public String getTrnnamea() {
        return getTrnnamef();
    }

    public void setTrnnamea(String source) {
        setTrnnamef(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #24] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER3 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTVW.CPY, LINE #25] TRNNAMEI (level: 2)
    private @Getter @Builder.Default String trnnamei = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTVW.CPY, LINE #26] TITLE01L (level: 2)
    private @Getter @Setter int title01l;
    // [T-Up#INFO][COACTVW.CPY, LINE #27] TITLE01F (level: 2)
    private @Getter @Builder.Default String title01f = StringUtils.repeat(' ',
            1);

    public _OFFILLER4 getOFFILLER4() {
        return _OFFILLER4.builder().title01a(getTitle01a()).build();
    }

    public void setOFFILLER4(String source) {
        setTitle01a(source.substring(0, 1));
    }

    public void setOFFILLER4(_OFFILLER4 source) {
        setOFFILLER4(source.toString());
    }

    public String getTitle01a() {
        return getTitle01f();
    }

    public void setTitle01a(String source) {
        setTitle01f(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #30] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER5 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTVW.CPY, LINE #31] TITLE01I (level: 2)
    private @Getter @Builder.Default String title01i = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COACTVW.CPY, LINE #32] CURDATEL (level: 2)
    private @Getter @Setter int curdatel;
    // [T-Up#INFO][COACTVW.CPY, LINE #33] CURDATEF (level: 2)
    private @Getter @Builder.Default String curdatef = StringUtils.repeat(' ',
            1);

    public _OFFILLER6 getOFFILLER6() {
        return _OFFILLER6.builder().curdatea(getCurdatea()).build();
    }

    public void setOFFILLER6(String source) {
        setCurdatea(source.substring(0, 1));
    }

    public void setOFFILLER6(_OFFILLER6 source) {
        setOFFILLER6(source.toString());
    }

    public String getCurdatea() {
        return getCurdatef();
    }

    public void setCurdatea(String source) {
        setCurdatef(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #36] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER7 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTVW.CPY, LINE #37] CURDATEI (level: 2)
    private @Getter @Builder.Default String curdatei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COACTVW.CPY, LINE #38] PGMNAMEL (level: 2)
    private @Getter @Setter int pgmnamel;
    // [T-Up#INFO][COACTVW.CPY, LINE #39] PGMNAMEF (level: 2)
    private @Getter @Builder.Default String pgmnamef = StringUtils.repeat(' ',
            1);

    public _OFFILLER8 getOFFILLER8() {
        return _OFFILLER8.builder().pgmnamea(getPgmnamea()).build();
    }

    public void setOFFILLER8(String source) {
        setPgmnamea(source.substring(0, 1));
    }

    public void setOFFILLER8(_OFFILLER8 source) {
        setOFFILLER8(source.toString());
    }

    public String getPgmnamea() {
        return getPgmnamef();
    }

    public void setPgmnamea(String source) {
        setPgmnamef(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #42] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER9 = StringUtils.repeat(' ',
            4);
    // [T-Up#INFO][COACTVW.CPY, LINE #43] PGMNAMEI (level: 2)
    private @Getter @Builder.Default String pgmnamei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COACTVW.CPY, LINE #44] TITLE02L (level: 2)
    private @Getter @Setter int title02l;
    // [T-Up#INFO][COACTVW.CPY, LINE #45] TITLE02F (level: 2)
    private @Getter @Builder.Default String title02f = StringUtils.repeat(' ',
            1);

    public _OFFILLER10 getOFFILLER10() {
        return _OFFILLER10.builder().title02a(getTitle02a()).build();
    }

    public void setOFFILLER10(String source) {
        setTitle02a(source.substring(0, 1));
    }

    public void setOFFILLER10(_OFFILLER10 source) {
        setOFFILLER10(source.toString());
    }

    public String getTitle02a() {
        return getTitle02f();
    }

    public void setTitle02a(String source) {
        setTitle02f(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #48] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER11 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #49] TITLE02I (level: 2)
    private @Getter @Builder.Default String title02i = StringUtils.repeat(' ',
            40);
    // [T-Up#INFO][COACTVW.CPY, LINE #50] CURTIMEL (level: 2)
    private @Getter @Setter int curtimel;
    // [T-Up#INFO][COACTVW.CPY, LINE #51] CURTIMEF (level: 2)
    private @Getter @Builder.Default String curtimef = StringUtils.repeat(' ',
            1);

    public _OFFILLER12 getOFFILLER12() {
        return _OFFILLER12.builder().curtimea(getCurtimea()).build();
    }

    public void setOFFILLER12(String source) {
        setCurtimea(source.substring(0, 1));
    }

    public void setOFFILLER12(_OFFILLER12 source) {
        setOFFILLER12(source.toString());
    }

    public String getCurtimea() {
        return getCurtimef();
    }

    public void setCurtimea(String source) {
        setCurtimef(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #54] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER13 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #55] CURTIMEI (level: 2)
    private @Getter @Builder.Default String curtimei = StringUtils.repeat(' ',
            8);
    // [T-Up#INFO][COACTVW.CPY, LINE #56] ACCTSIDL (level: 2)
    private @Getter @Setter int acctsidl;
    // [T-Up#INFO][COACTVW.CPY, LINE #57] ACCTSIDF (level: 2)
    private @Getter @Builder.Default String acctsidf = StringUtils.repeat(' ',
            1);

    public _OFFILLER14 getOFFILLER14() {
        return _OFFILLER14.builder().acctsida(getAcctsida()).build();
    }

    public void setOFFILLER14(String source) {
        setAcctsida(source.substring(0, 1));
    }

    public void setOFFILLER14(_OFFILLER14 source) {
        setOFFILLER14(source.toString());
    }

    public String getAcctsida() {
        return getAcctsidf();
    }

    public void setAcctsida(String source) {
        setAcctsidf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #60] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER15 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #61] ACCTSIDI (level: 2)
    private @Getter @Setter long acctsidi;
    // [T-Up#INFO][COACTVW.CPY, LINE #62] ACSTTUSL (level: 2)
    private @Getter @Setter int acsttusl;
    // [T-Up#INFO][COACTVW.CPY, LINE #63] ACSTTUSF (level: 2)
    private @Getter @Builder.Default String acsttusf = StringUtils.repeat(' ',
            1);

    public _OFFILLER16 getOFFILLER16() {
        return _OFFILLER16.builder().acsttusa(getAcsttusa()).build();
    }

    public void setOFFILLER16(String source) {
        setAcsttusa(source.substring(0, 1));
    }

    public void setOFFILLER16(_OFFILLER16 source) {
        setOFFILLER16(source.toString());
    }

    public String getAcsttusa() {
        return getAcsttusf();
    }

    public void setAcsttusa(String source) {
        setAcsttusf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #66] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER17 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #67] ACSTTUSI (level: 2)
    private @Getter @Builder.Default String acsttusi = StringUtils.repeat(' ',
            1);
    // [T-Up#INFO][COACTVW.CPY, LINE #68] ADTOPENL (level: 2)
    private @Getter @Setter int adtopenl;
    // [T-Up#INFO][COACTVW.CPY, LINE #69] ADTOPENF (level: 2)
    private @Getter @Builder.Default String adtopenf = StringUtils.repeat(' ',
            1);

    public _OFFILLER18 getOFFILLER18() {
        return _OFFILLER18.builder().adtopena(getAdtopena()).build();
    }

    public void setOFFILLER18(String source) {
        setAdtopena(source.substring(0, 1));
    }

    public void setOFFILLER18(_OFFILLER18 source) {
        setOFFILLER18(source.toString());
    }

    public String getAdtopena() {
        return getAdtopenf();
    }

    public void setAdtopena(String source) {
        setAdtopenf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #72] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER19 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #73] ADTOPENI (level: 2)
    private @Getter @Builder.Default String adtopeni = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTVW.CPY, LINE #74] ACRDLIML (level: 2)
    private @Getter @Setter int acrdliml;
    // [T-Up#INFO][COACTVW.CPY, LINE #75] ACRDLIMF (level: 2)
    private @Getter @Builder.Default String acrdlimf = StringUtils.repeat(' ',
            1);

    public _OFFILLER20 getOFFILLER20() {
        return _OFFILLER20.builder().acrdlima(getAcrdlima()).build();
    }

    public void setOFFILLER20(String source) {
        setAcrdlima(source.substring(0, 1));
    }

    public void setOFFILLER20(_OFFILLER20 source) {
        setOFFILLER20(source.toString());
    }

    public String getAcrdlima() {
        return getAcrdlimf();
    }

    public void setAcrdlima(String source) {
        setAcrdlimf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #78] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER21 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #79] ACRDLIMI (level: 2)
    private @Getter @Builder.Default String acrdlimi = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTVW.CPY, LINE #80] AEXPDTL (level: 2)
    private @Getter @Setter int aexpdtl;
    // [T-Up#INFO][COACTVW.CPY, LINE #81] AEXPDTF (level: 2)
    private @Getter @Builder.Default String aexpdtf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER22 getOFFILLER22() {
        return _OFFILLER22.builder().aexpdta(getAexpdta()).build();
    }

    public void setOFFILLER22(String source) {
        setAexpdta(source.substring(0, 1));
    }

    public void setOFFILLER22(_OFFILLER22 source) {
        setOFFILLER22(source.toString());
    }

    public String getAexpdta() {
        return getAexpdtf();
    }

    public void setAexpdta(String source) {
        setAexpdtf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #84] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER23 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #85] AEXPDTI (level: 2)
    private @Getter @Builder.Default String aexpdti = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTVW.CPY, LINE #86] ACSHLIML (level: 2)
    private @Getter @Setter int acshliml;
    // [T-Up#INFO][COACTVW.CPY, LINE #87] ACSHLIMF (level: 2)
    private @Getter @Builder.Default String acshlimf = StringUtils.repeat(' ',
            1);

    public _OFFILLER24 getOFFILLER24() {
        return _OFFILLER24.builder().acshlima(getAcshlima()).build();
    }

    public void setOFFILLER24(String source) {
        setAcshlima(source.substring(0, 1));
    }

    public void setOFFILLER24(_OFFILLER24 source) {
        setOFFILLER24(source.toString());
    }

    public String getAcshlima() {
        return getAcshlimf();
    }

    public void setAcshlima(String source) {
        setAcshlimf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #90] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER25 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #91] ACSHLIMI (level: 2)
    private @Getter @Builder.Default String acshlimi = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTVW.CPY, LINE #92] AREISDTL (level: 2)
    private @Getter @Setter int areisdtl;
    // [T-Up#INFO][COACTVW.CPY, LINE #93] AREISDTF (level: 2)
    private @Getter @Builder.Default String areisdtf = StringUtils.repeat(' ',
            1);

    public _OFFILLER26 getOFFILLER26() {
        return _OFFILLER26.builder().areisdta(getAreisdta()).build();
    }

    public void setOFFILLER26(String source) {
        setAreisdta(source.substring(0, 1));
    }

    public void setOFFILLER26(_OFFILLER26 source) {
        setOFFILLER26(source.toString());
    }

    public String getAreisdta() {
        return getAreisdtf();
    }

    public void setAreisdta(String source) {
        setAreisdtf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #96] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER27 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #97] AREISDTI (level: 2)
    private @Getter @Builder.Default String areisdti = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTVW.CPY, LINE #98] ACURBALL (level: 2)
    private @Getter @Setter int acurball;
    // [T-Up#INFO][COACTVW.CPY, LINE #99] ACURBALF (level: 2)
    private @Getter @Builder.Default String acurbalf = StringUtils.repeat(' ',
            1);

    public _OFFILLER28 getOFFILLER28() {
        return _OFFILLER28.builder().acurbala(getAcurbala()).build();
    }

    public void setOFFILLER28(String source) {
        setAcurbala(source.substring(0, 1));
    }

    public void setOFFILLER28(_OFFILLER28 source) {
        setOFFILLER28(source.toString());
    }

    public String getAcurbala() {
        return getAcurbalf();
    }

    public void setAcurbala(String source) {
        setAcurbalf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #102] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER29 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #103] ACURBALI (level: 2)
    private @Getter @Builder.Default String acurbali = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTVW.CPY, LINE #104] ACRCYCRL (level: 2)
    private @Getter @Setter int acrcycrl;
    // [T-Up#INFO][COACTVW.CPY, LINE #105] ACRCYCRF (level: 2)
    private @Getter @Builder.Default String acrcycrf = StringUtils.repeat(' ',
            1);

    public _OFFILLER30 getOFFILLER30() {
        return _OFFILLER30.builder().acrcycra(getAcrcycra()).build();
    }

    public void setOFFILLER30(String source) {
        setAcrcycra(source.substring(0, 1));
    }

    public void setOFFILLER30(_OFFILLER30 source) {
        setOFFILLER30(source.toString());
    }

    public String getAcrcycra() {
        return getAcrcycrf();
    }

    public void setAcrcycra(String source) {
        setAcrcycrf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #108] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER31 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #109] ACRCYCRI (level: 2)
    private @Getter @Builder.Default String acrcycri = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTVW.CPY, LINE #110] AADDGRPL (level: 2)
    private @Getter @Setter int aaddgrpl;
    // [T-Up#INFO][COACTVW.CPY, LINE #111] AADDGRPF (level: 2)
    private @Getter @Builder.Default String aaddgrpf = StringUtils.repeat(' ',
            1);

    public _OFFILLER32 getOFFILLER32() {
        return _OFFILLER32.builder().aaddgrpa(getAaddgrpa()).build();
    }

    public void setOFFILLER32(String source) {
        setAaddgrpa(source.substring(0, 1));
    }

    public void setOFFILLER32(_OFFILLER32 source) {
        setOFFILLER32(source.toString());
    }

    public String getAaddgrpa() {
        return getAaddgrpf();
    }

    public void setAaddgrpa(String source) {
        setAaddgrpf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #114] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER33 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #115] AADDGRPI (level: 2)
    private @Getter @Builder.Default String aaddgrpi = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTVW.CPY, LINE #116] ACRCYDBL (level: 2)
    private @Getter @Setter int acrcydbl;
    // [T-Up#INFO][COACTVW.CPY, LINE #117] ACRCYDBF (level: 2)
    private @Getter @Builder.Default String acrcydbf = StringUtils.repeat(' ',
            1);

    public _OFFILLER34 getOFFILLER34() {
        return _OFFILLER34.builder().acrcydba(getAcrcydba()).build();
    }

    public void setOFFILLER34(String source) {
        setAcrcydba(source.substring(0, 1));
    }

    public void setOFFILLER34(_OFFILLER34 source) {
        setOFFILLER34(source.toString());
    }

    public String getAcrcydba() {
        return getAcrcydbf();
    }

    public void setAcrcydba(String source) {
        setAcrcydbf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #120] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER35 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #121] ACRCYDBI (level: 2)
    private @Getter @Builder.Default String acrcydbi = StringUtils.repeat(' ',
            15);
    // [T-Up#INFO][COACTVW.CPY, LINE #122] ACSTNUML (level: 2)
    private @Getter @Setter int acstnuml;
    // [T-Up#INFO][COACTVW.CPY, LINE #123] ACSTNUMF (level: 2)
    private @Getter @Builder.Default String acstnumf = StringUtils.repeat(' ',
            1);

    public _OFFILLER36 getOFFILLER36() {
        return _OFFILLER36.builder().acstnuma(getAcstnuma()).build();
    }

    public void setOFFILLER36(String source) {
        setAcstnuma(source.substring(0, 1));
    }

    public void setOFFILLER36(_OFFILLER36 source) {
        setOFFILLER36(source.toString());
    }

    public String getAcstnuma() {
        return getAcstnumf();
    }

    public void setAcstnuma(String source) {
        setAcstnumf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #126] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER37 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #127] ACSTNUMI (level: 2)
    private @Getter @Builder.Default String acstnumi = StringUtils.repeat(' ',
            9);
    // [T-Up#INFO][COACTVW.CPY, LINE #128] ACSTSSNL (level: 2)
    private @Getter @Setter int acstssnl;
    // [T-Up#INFO][COACTVW.CPY, LINE #129] ACSTSSNF (level: 2)
    private @Getter @Builder.Default String acstssnf = StringUtils.repeat(' ',
            1);

    public _OFFILLER38 getOFFILLER38() {
        return _OFFILLER38.builder().acstssna(getAcstssna()).build();
    }

    public void setOFFILLER38(String source) {
        setAcstssna(source.substring(0, 1));
    }

    public void setOFFILLER38(_OFFILLER38 source) {
        setOFFILLER38(source.toString());
    }

    public String getAcstssna() {
        return getAcstssnf();
    }

    public void setAcstssna(String source) {
        setAcstssnf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #132] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER39 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #133] ACSTSSNI (level: 2)
    private @Getter @Builder.Default String acstssni = StringUtils.repeat(' ',
            12);
    // [T-Up#INFO][COACTVW.CPY, LINE #134] ACSTDOBL (level: 2)
    private @Getter @Setter int acstdobl;
    // [T-Up#INFO][COACTVW.CPY, LINE #135] ACSTDOBF (level: 2)
    private @Getter @Builder.Default String acstdobf = StringUtils.repeat(' ',
            1);

    public _OFFILLER40 getOFFILLER40() {
        return _OFFILLER40.builder().acstdoba(getAcstdoba()).build();
    }

    public void setOFFILLER40(String source) {
        setAcstdoba(source.substring(0, 1));
    }

    public void setOFFILLER40(_OFFILLER40 source) {
        setOFFILLER40(source.toString());
    }

    public String getAcstdoba() {
        return getAcstdobf();
    }

    public void setAcstdoba(String source) {
        setAcstdobf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #138] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER41 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #139] ACSTDOBI (level: 2)
    private @Getter @Builder.Default String acstdobi = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTVW.CPY, LINE #140] ACSTFCOL (level: 2)
    private @Getter @Setter int acstfcol;
    // [T-Up#INFO][COACTVW.CPY, LINE #141] ACSTFCOF (level: 2)
    private @Getter @Builder.Default String acstfcof = StringUtils.repeat(' ',
            1);

    public _OFFILLER42 getOFFILLER42() {
        return _OFFILLER42.builder().acstfcoa(getAcstfcoa()).build();
    }

    public void setOFFILLER42(String source) {
        setAcstfcoa(source.substring(0, 1));
    }

    public void setOFFILLER42(_OFFILLER42 source) {
        setOFFILLER42(source.toString());
    }

    public String getAcstfcoa() {
        return getAcstfcof();
    }

    public void setAcstfcoa(String source) {
        setAcstfcof(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #144] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER43 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #145] ACSTFCOI (level: 2)
    private @Getter @Builder.Default String acstfcoi = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTVW.CPY, LINE #146] ACSFNAML (level: 2)
    private @Getter @Setter int acsfnaml;
    // [T-Up#INFO][COACTVW.CPY, LINE #147] ACSFNAMF (level: 2)
    private @Getter @Builder.Default String acsfnamf = StringUtils.repeat(' ',
            1);

    public _OFFILLER44 getOFFILLER44() {
        return _OFFILLER44.builder().acsfnama(getAcsfnama()).build();
    }

    public void setOFFILLER44(String source) {
        setAcsfnama(source.substring(0, 1));
    }

    public void setOFFILLER44(_OFFILLER44 source) {
        setOFFILLER44(source.toString());
    }

    public String getAcsfnama() {
        return getAcsfnamf();
    }

    public void setAcsfnama(String source) {
        setAcsfnamf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #150] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER45 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #151] ACSFNAMI (level: 2)
    private @Getter @Builder.Default String acsfnami = StringUtils.repeat(' ',
            25);
    // [T-Up#INFO][COACTVW.CPY, LINE #152] ACSMNAML (level: 2)
    private @Getter @Setter int acsmnaml;
    // [T-Up#INFO][COACTVW.CPY, LINE #153] ACSMNAMF (level: 2)
    private @Getter @Builder.Default String acsmnamf = StringUtils.repeat(' ',
            1);

    public _OFFILLER46 getOFFILLER46() {
        return _OFFILLER46.builder().acsmnama(getAcsmnama()).build();
    }

    public void setOFFILLER46(String source) {
        setAcsmnama(source.substring(0, 1));
    }

    public void setOFFILLER46(_OFFILLER46 source) {
        setOFFILLER46(source.toString());
    }

    public String getAcsmnama() {
        return getAcsmnamf();
    }

    public void setAcsmnama(String source) {
        setAcsmnamf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #156] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER47 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #157] ACSMNAMI (level: 2)
    private @Getter @Builder.Default String acsmnami = StringUtils.repeat(' ',
            25);
    // [T-Up#INFO][COACTVW.CPY, LINE #158] ACSLNAML (level: 2)
    private @Getter @Setter int acslnaml;
    // [T-Up#INFO][COACTVW.CPY, LINE #159] ACSLNAMF (level: 2)
    private @Getter @Builder.Default String acslnamf = StringUtils.repeat(' ',
            1);

    public _OFFILLER48 getOFFILLER48() {
        return _OFFILLER48.builder().acslnama(getAcslnama()).build();
    }

    public void setOFFILLER48(String source) {
        setAcslnama(source.substring(0, 1));
    }

    public void setOFFILLER48(_OFFILLER48 source) {
        setOFFILLER48(source.toString());
    }

    public String getAcslnama() {
        return getAcslnamf();
    }

    public void setAcslnama(String source) {
        setAcslnamf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #162] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER49 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #163] ACSLNAMI (level: 2)
    private @Getter @Builder.Default String acslnami = StringUtils.repeat(' ',
            25);
    // [T-Up#INFO][COACTVW.CPY, LINE #164] ACSADL1L (level: 2)
    private @Getter @Setter int acsadl1l;
    // [T-Up#INFO][COACTVW.CPY, LINE #165] ACSADL1F (level: 2)
    private @Getter @Builder.Default String acsadl1f = StringUtils.repeat(' ',
            1);

    public _OFFILLER50 getOFFILLER50() {
        return _OFFILLER50.builder().acsadl1a(getAcsadl1a()).build();
    }

    public void setOFFILLER50(String source) {
        setAcsadl1a(source.substring(0, 1));
    }

    public void setOFFILLER50(_OFFILLER50 source) {
        setOFFILLER50(source.toString());
    }

    public String getAcsadl1a() {
        return getAcsadl1f();
    }

    public void setAcsadl1a(String source) {
        setAcsadl1f(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #168] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER51 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #169] ACSADL1I (level: 2)
    private @Getter @Builder.Default String acsadl1i = StringUtils.repeat(' ',
            50);
    // [T-Up#INFO][COACTVW.CPY, LINE #170] ACSSTTEL (level: 2)
    private @Getter @Setter int acssttel;
    // [T-Up#INFO][COACTVW.CPY, LINE #171] ACSSTTEF (level: 2)
    private @Getter @Builder.Default String acssttef = StringUtils.repeat(' ',
            1);

    public _OFFILLER52 getOFFILLER52() {
        return _OFFILLER52.builder().acssttea(getAcssttea()).build();
    }

    public void setOFFILLER52(String source) {
        setAcssttea(source.substring(0, 1));
    }

    public void setOFFILLER52(_OFFILLER52 source) {
        setOFFILLER52(source.toString());
    }

    public String getAcssttea() {
        return getAcssttef();
    }

    public void setAcssttea(String source) {
        setAcssttef(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #174] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER53 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #175] ACSSTTEI (level: 2)
    private @Getter @Builder.Default String acssttei = StringUtils.repeat(' ',
            2);
    // [T-Up#INFO][COACTVW.CPY, LINE #176] ACSADL2L (level: 2)
    private @Getter @Setter int acsadl2l;
    // [T-Up#INFO][COACTVW.CPY, LINE #177] ACSADL2F (level: 2)
    private @Getter @Builder.Default String acsadl2f = StringUtils.repeat(' ',
            1);

    public _OFFILLER54 getOFFILLER54() {
        return _OFFILLER54.builder().acsadl2a(getAcsadl2a()).build();
    }

    public void setOFFILLER54(String source) {
        setAcsadl2a(source.substring(0, 1));
    }

    public void setOFFILLER54(_OFFILLER54 source) {
        setOFFILLER54(source.toString());
    }

    public String getAcsadl2a() {
        return getAcsadl2f();
    }

    public void setAcsadl2a(String source) {
        setAcsadl2f(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #180] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER55 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #181] ACSADL2I (level: 2)
    private @Getter @Builder.Default String acsadl2i = StringUtils.repeat(' ',
            50);
    // [T-Up#INFO][COACTVW.CPY, LINE #182] ACSZIPCL (level: 2)
    private @Getter @Setter int acszipcl;
    // [T-Up#INFO][COACTVW.CPY, LINE #183] ACSZIPCF (level: 2)
    private @Getter @Builder.Default String acszipcf = StringUtils.repeat(' ',
            1);

    public _OFFILLER56 getOFFILLER56() {
        return _OFFILLER56.builder().acszipca(getAcszipca()).build();
    }

    public void setOFFILLER56(String source) {
        setAcszipca(source.substring(0, 1));
    }

    public void setOFFILLER56(_OFFILLER56 source) {
        setOFFILLER56(source.toString());
    }

    public String getAcszipca() {
        return getAcszipcf();
    }

    public void setAcszipca(String source) {
        setAcszipcf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #186] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER57 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #187] ACSZIPCI (level: 2)
    private @Getter @Builder.Default String acszipci = StringUtils.repeat(' ',
            5);
    // [T-Up#INFO][COACTVW.CPY, LINE #188] ACSCITYL (level: 2)
    private @Getter @Setter int acscityl;
    // [T-Up#INFO][COACTVW.CPY, LINE #189] ACSCITYF (level: 2)
    private @Getter @Builder.Default String acscityf = StringUtils.repeat(' ',
            1);

    public _OFFILLER58 getOFFILLER58() {
        return _OFFILLER58.builder().acscitya(getAcscitya()).build();
    }

    public void setOFFILLER58(String source) {
        setAcscitya(source.substring(0, 1));
    }

    public void setOFFILLER58(_OFFILLER58 source) {
        setOFFILLER58(source.toString());
    }

    public String getAcscitya() {
        return getAcscityf();
    }

    public void setAcscitya(String source) {
        setAcscityf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #192] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER59 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #193] ACSCITYI (level: 2)
    private @Getter @Builder.Default String acscityi = StringUtils.repeat(' ',
            50);
    // [T-Up#INFO][COACTVW.CPY, LINE #194] ACSCTRYL (level: 2)
    private @Getter @Setter int acsctryl;
    // [T-Up#INFO][COACTVW.CPY, LINE #195] ACSCTRYF (level: 2)
    private @Getter @Builder.Default String acsctryf = StringUtils.repeat(' ',
            1);

    public _OFFILLER60 getOFFILLER60() {
        return _OFFILLER60.builder().acsctrya(getAcsctrya()).build();
    }

    public void setOFFILLER60(String source) {
        setAcsctrya(source.substring(0, 1));
    }

    public void setOFFILLER60(_OFFILLER60 source) {
        setOFFILLER60(source.toString());
    }

    public String getAcsctrya() {
        return getAcsctryf();
    }

    public void setAcsctrya(String source) {
        setAcsctryf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #198] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER61 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #199] ACSCTRYI (level: 2)
    private @Getter @Builder.Default String acsctryi = StringUtils.repeat(' ',
            3);
    // [T-Up#INFO][COACTVW.CPY, LINE #200] ACSPHN1L (level: 2)
    private @Getter @Setter int acsphn1l;
    // [T-Up#INFO][COACTVW.CPY, LINE #201] ACSPHN1F (level: 2)
    private @Getter @Builder.Default String acsphn1f = StringUtils.repeat(' ',
            1);

    public _OFFILLER62 getOFFILLER62() {
        return _OFFILLER62.builder().acsphn1a(getAcsphn1a()).build();
    }

    public void setOFFILLER62(String source) {
        setAcsphn1a(source.substring(0, 1));
    }

    public void setOFFILLER62(_OFFILLER62 source) {
        setOFFILLER62(source.toString());
    }

    public String getAcsphn1a() {
        return getAcsphn1f();
    }

    public void setAcsphn1a(String source) {
        setAcsphn1f(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #204] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER63 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #205] ACSPHN1I (level: 2)
    private @Getter @Builder.Default String acsphn1i = StringUtils.repeat(' ',
            13);
    // [T-Up#INFO][COACTVW.CPY, LINE #206] ACSGOVTL (level: 2)
    private @Getter @Setter int acsgovtl;
    // [T-Up#INFO][COACTVW.CPY, LINE #207] ACSGOVTF (level: 2)
    private @Getter @Builder.Default String acsgovtf = StringUtils.repeat(' ',
            1);

    public _OFFILLER64 getOFFILLER64() {
        return _OFFILLER64.builder().acsgovta(getAcsgovta()).build();
    }

    public void setOFFILLER64(String source) {
        setAcsgovta(source.substring(0, 1));
    }

    public void setOFFILLER64(_OFFILLER64 source) {
        setOFFILLER64(source.toString());
    }

    public String getAcsgovta() {
        return getAcsgovtf();
    }

    public void setAcsgovta(String source) {
        setAcsgovtf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #210] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER65 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #211] ACSGOVTI (level: 2)
    private @Getter @Builder.Default String acsgovti = StringUtils.repeat(' ',
            20);
    // [T-Up#INFO][COACTVW.CPY, LINE #212] ACSPHN2L (level: 2)
    private @Getter @Setter int acsphn2l;
    // [T-Up#INFO][COACTVW.CPY, LINE #213] ACSPHN2F (level: 2)
    private @Getter @Builder.Default String acsphn2f = StringUtils.repeat(' ',
            1);

    public _OFFILLER66 getOFFILLER66() {
        return _OFFILLER66.builder().acsphn2a(getAcsphn2a()).build();
    }

    public void setOFFILLER66(String source) {
        setAcsphn2a(source.substring(0, 1));
    }

    public void setOFFILLER66(_OFFILLER66 source) {
        setOFFILLER66(source.toString());
    }

    public String getAcsphn2a() {
        return getAcsphn2f();
    }

    public void setAcsphn2a(String source) {
        setAcsphn2f(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #216] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER67 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #217] ACSPHN2I (level: 2)
    private @Getter @Builder.Default String acsphn2i = StringUtils.repeat(' ',
            13);
    // [T-Up#INFO][COACTVW.CPY, LINE #218] ACSEFTCL (level: 2)
    private @Getter @Setter int acseftcl;
    // [T-Up#INFO][COACTVW.CPY, LINE #219] ACSEFTCF (level: 2)
    private @Getter @Builder.Default String acseftcf = StringUtils.repeat(' ',
            1);

    public _OFFILLER68 getOFFILLER68() {
        return _OFFILLER68.builder().acseftca(getAcseftca()).build();
    }

    public void setOFFILLER68(String source) {
        setAcseftca(source.substring(0, 1));
    }

    public void setOFFILLER68(_OFFILLER68 source) {
        setOFFILLER68(source.toString());
    }

    public String getAcseftca() {
        return getAcseftcf();
    }

    public void setAcseftca(String source) {
        setAcseftcf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #222] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER69 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #223] ACSEFTCI (level: 2)
    private @Getter @Builder.Default String acseftci = StringUtils.repeat(' ',
            10);
    // [T-Up#INFO][COACTVW.CPY, LINE #224] ACSPFLGL (level: 2)
    private @Getter @Setter int acspflgl;
    // [T-Up#INFO][COACTVW.CPY, LINE #225] ACSPFLGF (level: 2)
    private @Getter @Builder.Default String acspflgf = StringUtils.repeat(' ',
            1);

    public _OFFILLER70 getOFFILLER70() {
        return _OFFILLER70.builder().acspflga(getAcspflga()).build();
    }

    public void setOFFILLER70(String source) {
        setAcspflga(source.substring(0, 1));
    }

    public void setOFFILLER70(_OFFILLER70 source) {
        setOFFILLER70(source.toString());
    }

    public String getAcspflga() {
        return getAcspflgf();
    }

    public void setAcspflga(String source) {
        setAcspflgf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #228] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER71 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #229] ACSPFLGI (level: 2)
    private @Getter @Builder.Default String acspflgi = StringUtils.repeat(' ',
            1);
    // [T-Up#INFO][COACTVW.CPY, LINE #230] INFOMSGL (level: 2)
    private @Getter @Setter int infomsgl;
    // [T-Up#INFO][COACTVW.CPY, LINE #231] INFOMSGF (level: 2)
    private @Getter @Builder.Default String infomsgf = StringUtils.repeat(' ',
            1);

    public _OFFILLER72 getOFFILLER72() {
        return _OFFILLER72.builder().infomsga(getInfomsga()).build();
    }

    public void setOFFILLER72(String source) {
        setInfomsga(source.substring(0, 1));
    }

    public void setOFFILLER72(_OFFILLER72 source) {
        setOFFILLER72(source.toString());
    }

    public String getInfomsga() {
        return getInfomsgf();
    }

    public void setInfomsga(String source) {
        setInfomsgf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #234] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER73 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #235] INFOMSGI (level: 2)
    private @Getter @Builder.Default String infomsgi = StringUtils.repeat(' ',
            45);
    // [T-Up#INFO][COACTVW.CPY, LINE #236] ERRMSGL (level: 2)
    private @Getter @Setter int errmsgl;
    // [T-Up#INFO][COACTVW.CPY, LINE #237] ERRMSGF (level: 2)
    private @Getter @Builder.Default String errmsgf = StringUtils
            .repeat(' ', 1);

    public _OFFILLER74 getOFFILLER74() {
        return _OFFILLER74.builder().errmsga(getErrmsga()).build();
    }

    public void setOFFILLER74(String source) {
        setErrmsga(source.substring(0, 1));
    }

    public void setOFFILLER74(_OFFILLER74 source) {
        setOFFILLER74(source.toString());
    }

    public String getErrmsga() {
        return getErrmsgf();
    }

    public void setErrmsga(String source) {
        setErrmsgf(source);
    }

    // [T-Up#INFO][COACTVW.CPY, LINE #240] FILLER (level: 2)
    private @Getter @Builder.Default String OFFILLER75 = StringUtils.repeat(
            ' ', 4);
    // [T-Up#INFO][COACTVW.CPY, LINE #241] ERRMSGI (level: 2)
    private @Getter @Builder.Default String errmsgi = StringUtils.repeat(' ',
            78);

    public void setOFFILLER1(String source) {
        OFFILLER1 = StringUtils.truncate(StringUtils.rightPad(source, 12), 12);
    }

    public void setTrnnamef(String source) {
        trnnamef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER3(String source) {
        OFFILLER3 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTrnnamei(String source) {
        trnnamei = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle01f(String source) {
        title01f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER5(String source) {
        OFFILLER5 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle01i(String source) {
        title01i = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setCurdatef(String source) {
        curdatef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER7(String source) {
        OFFILLER7 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCurdatei(String source) {
        curdatei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setPgmnamef(String source) {
        pgmnamef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER9(String source) {
        OFFILLER9 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setPgmnamei(String source) {
        pgmnamei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setTitle02f(String source) {
        title02f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER11(String source) {
        OFFILLER11 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setTitle02i(String source) {
        title02i = StringUtils.truncate(StringUtils.rightPad(source, 40), 40);
    }

    public void setCurtimef(String source) {
        curtimef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER13(String source) {
        OFFILLER13 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setCurtimei(String source) {
        curtimei = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
    }

    public void setAcctsidf(String source) {
        acctsidf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER15(String source) {
        OFFILLER15 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsttusf(String source) {
        acsttusf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER17(String source) {
        OFFILLER17 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsttusi(String source) {
        acsttusi = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setAdtopenf(String source) {
        adtopenf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER19(String source) {
        OFFILLER19 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAdtopeni(String source) {
        adtopeni = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcrdlimf(String source) {
        acrdlimf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER21(String source) {
        OFFILLER21 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcrdlimi(String source) {
        acrdlimi = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAexpdtf(String source) {
        aexpdtf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER23(String source) {
        OFFILLER23 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAexpdti(String source) {
        aexpdti = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcshlimf(String source) {
        acshlimf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER25(String source) {
        OFFILLER25 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcshlimi(String source) {
        acshlimi = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAreisdtf(String source) {
        areisdtf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER27(String source) {
        OFFILLER27 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAreisdti(String source) {
        areisdti = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcurbalf(String source) {
        acurbalf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER29(String source) {
        OFFILLER29 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcurbali(String source) {
        acurbali = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAcrcycrf(String source) {
        acrcycrf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER31(String source) {
        OFFILLER31 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcrcycri(String source) {
        acrcycri = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAaddgrpf(String source) {
        aaddgrpf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER33(String source) {
        OFFILLER33 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAaddgrpi(String source) {
        aaddgrpi = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcrcydbf(String source) {
        acrcydbf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER35(String source) {
        OFFILLER35 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcrcydbi(String source) {
        acrcydbi = StringUtils.truncate(StringUtils.rightPad(source, 15), 15);
    }

    public void setAcstnumf(String source) {
        acstnumf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER37(String source) {
        OFFILLER37 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcstnumi(String source) {
        acstnumi = StringUtils.truncate(StringUtils.rightPad(source, 9), 9);
    }

    public void setAcstssnf(String source) {
        acstssnf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER39(String source) {
        OFFILLER39 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcstssni(String source) {
        acstssni = StringUtils.truncate(StringUtils.rightPad(source, 12), 12);
    }

    public void setAcstdobf(String source) {
        acstdobf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER41(String source) {
        OFFILLER41 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcstdobi(String source) {
        acstdobi = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcstfcof(String source) {
        acstfcof = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER43(String source) {
        OFFILLER43 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcstfcoi(String source) {
        acstfcoi = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsfnamf(String source) {
        acsfnamf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER45(String source) {
        OFFILLER45 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsfnami(String source) {
        acsfnami = StringUtils.truncate(StringUtils.rightPad(source, 25), 25);
    }

    public void setAcsmnamf(String source) {
        acsmnamf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER47(String source) {
        OFFILLER47 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsmnami(String source) {
        acsmnami = StringUtils.truncate(StringUtils.rightPad(source, 25), 25);
    }

    public void setAcslnamf(String source) {
        acslnamf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER49(String source) {
        OFFILLER49 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcslnami(String source) {
        acslnami = StringUtils.truncate(StringUtils.rightPad(source, 25), 25);
    }

    public void setAcsadl1f(String source) {
        acsadl1f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER51(String source) {
        OFFILLER51 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsadl1i(String source) {
        acsadl1i = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
    }

    public void setAcssttef(String source) {
        acssttef = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER53(String source) {
        OFFILLER53 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcssttei(String source) {
        acssttei = StringUtils.truncate(StringUtils.rightPad(source, 2), 2);
    }

    public void setAcsadl2f(String source) {
        acsadl2f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER55(String source) {
        OFFILLER55 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsadl2i(String source) {
        acsadl2i = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
    }

    public void setAcszipcf(String source) {
        acszipcf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER57(String source) {
        OFFILLER57 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcszipci(String source) {
        acszipci = StringUtils.truncate(StringUtils.rightPad(source, 5), 5);
    }

    public void setAcscityf(String source) {
        acscityf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER59(String source) {
        OFFILLER59 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcscityi(String source) {
        acscityi = StringUtils.truncate(StringUtils.rightPad(source, 50), 50);
    }

    public void setAcsctryf(String source) {
        acsctryf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER61(String source) {
        OFFILLER61 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsctryi(String source) {
        acsctryi = StringUtils.truncate(StringUtils.rightPad(source, 3), 3);
    }

    public void setAcsphn1f(String source) {
        acsphn1f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER63(String source) {
        OFFILLER63 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsphn1i(String source) {
        acsphn1i = StringUtils.truncate(StringUtils.rightPad(source, 13), 13);
    }

    public void setAcsgovtf(String source) {
        acsgovtf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER65(String source) {
        OFFILLER65 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsgovti(String source) {
        acsgovti = StringUtils.truncate(StringUtils.rightPad(source, 20), 20);
    }

    public void setAcsphn2f(String source) {
        acsphn2f = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER67(String source) {
        OFFILLER67 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcsphn2i(String source) {
        acsphn2i = StringUtils.truncate(StringUtils.rightPad(source, 13), 13);
    }

    public void setAcseftcf(String source) {
        acseftcf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER69(String source) {
        OFFILLER69 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcseftci(String source) {
        acseftci = StringUtils.truncate(StringUtils.rightPad(source, 10), 10);
    }

    public void setAcspflgf(String source) {
        acspflgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER71(String source) {
        OFFILLER71 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setAcspflgi(String source) {
        acspflgi = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setInfomsgf(String source) {
        infomsgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER73(String source) {
        OFFILLER73 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setInfomsgi(String source) {
        infomsgi = StringUtils.truncate(StringUtils.rightPad(source, 45), 45);
    }

    public void setErrmsgf(String source) {
        errmsgf = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setOFFILLER75(String source) {
        OFFILLER75 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public void setErrmsgi(String source) {
        errmsgi = StringUtils.truncate(StringUtils.rightPad(source, 78), 78);
    }

    public static CoactvwcCactvwai createDefaultValueInstance() {
        return new CoactvwcCactvwai.builder().build();
    }

    public void set(String source) {
        ByteBuffer tempByteBuffer1;
        source = StringUtils.truncate(StringUtils.rightPad(source, 955), 955);
        OFFILLER1 = source.substring(0, 12);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(12, 14).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            trnnamel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            trnnamel = 0;
        }
        trnnamef = source.substring(14, 15);
        OFFILLER3 = source.substring(15, 19);
        trnnamei = source.substring(19, 23);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(23, 25).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            title01l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            title01l = 0;
        }
        title01f = source.substring(25, 26);
        OFFILLER5 = source.substring(26, 30);
        title01i = source.substring(30, 70);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(70, 72).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            curdatel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            curdatel = 0;
        }
        curdatef = source.substring(72, 73);
        OFFILLER7 = source.substring(73, 77);
        curdatei = source.substring(77, 85);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(85, 87).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            pgmnamel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            pgmnamel = 0;
        }
        pgmnamef = source.substring(87, 88);
        OFFILLER9 = source.substring(88, 92);
        pgmnamei = source.substring(92, 100);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(100, 102).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            title02l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            title02l = 0;
        }
        title02f = source.substring(102, 103);
        OFFILLER11 = source.substring(103, 107);
        title02i = source.substring(107, 147);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(147, 149).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            curtimel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            curtimel = 0;
        }
        curtimef = source.substring(149, 150);
        OFFILLER13 = source.substring(150, 154);
        curtimei = source.substring(154, 162);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(162, 164).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acctsidl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acctsidl = 0;
        }
        acctsidf = source.substring(164, 165);
        OFFILLER15 = source.substring(165, 169);
        try {
            acctsidi = DataConverter.convZonedStringToLong(
                    source.substring(169, 180), 11);
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acctsidi = 0;
        }
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(180, 182).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsttusl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsttusl = 0;
        }
        acsttusf = source.substring(182, 183);
        OFFILLER17 = source.substring(183, 187);
        acsttusi = source.substring(187, 188);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(188, 190).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            adtopenl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            adtopenl = 0;
        }
        adtopenf = source.substring(190, 191);
        OFFILLER19 = source.substring(191, 195);
        adtopeni = source.substring(195, 205);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(205, 207).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acrdliml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acrdliml = 0;
        }
        acrdlimf = source.substring(207, 208);
        OFFILLER21 = source.substring(208, 212);
        acrdlimi = source.substring(212, 227);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(227, 229).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            aexpdtl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            aexpdtl = 0;
        }
        aexpdtf = source.substring(229, 230);
        OFFILLER23 = source.substring(230, 234);
        aexpdti = source.substring(234, 244);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(244, 246).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acshliml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acshliml = 0;
        }
        acshlimf = source.substring(246, 247);
        OFFILLER25 = source.substring(247, 251);
        acshlimi = source.substring(251, 266);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(266, 268).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            areisdtl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            areisdtl = 0;
        }
        areisdtf = source.substring(268, 269);
        OFFILLER27 = source.substring(269, 273);
        areisdti = source.substring(273, 283);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(283, 285).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acurball = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acurball = 0;
        }
        acurbalf = source.substring(285, 286);
        OFFILLER29 = source.substring(286, 290);
        acurbali = source.substring(290, 305);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(305, 307).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acrcycrl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acrcycrl = 0;
        }
        acrcycrf = source.substring(307, 308);
        OFFILLER31 = source.substring(308, 312);
        acrcycri = source.substring(312, 327);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(327, 329).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            aaddgrpl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            aaddgrpl = 0;
        }
        aaddgrpf = source.substring(329, 330);
        OFFILLER33 = source.substring(330, 334);
        aaddgrpi = source.substring(334, 344);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(344, 346).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acrcydbl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acrcydbl = 0;
        }
        acrcydbf = source.substring(346, 347);
        OFFILLER35 = source.substring(347, 351);
        acrcydbi = source.substring(351, 366);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(366, 368).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acstnuml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acstnuml = 0;
        }
        acstnumf = source.substring(368, 369);
        OFFILLER37 = source.substring(369, 373);
        acstnumi = source.substring(373, 382);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(382, 384).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acstssnl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acstssnl = 0;
        }
        acstssnf = source.substring(384, 385);
        OFFILLER39 = source.substring(385, 389);
        acstssni = source.substring(389, 401);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(401, 403).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acstdobl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acstdobl = 0;
        }
        acstdobf = source.substring(403, 404);
        OFFILLER41 = source.substring(404, 408);
        acstdobi = source.substring(408, 418);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(418, 420).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acstfcol = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acstfcol = 0;
        }
        acstfcof = source.substring(420, 421);
        OFFILLER43 = source.substring(421, 425);
        acstfcoi = source.substring(425, 428);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(428, 430).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsfnaml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsfnaml = 0;
        }
        acsfnamf = source.substring(430, 431);
        OFFILLER45 = source.substring(431, 435);
        acsfnami = source.substring(435, 460);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(460, 462).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsmnaml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsmnaml = 0;
        }
        acsmnamf = source.substring(462, 463);
        OFFILLER47 = source.substring(463, 467);
        acsmnami = source.substring(467, 492);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(492, 494).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acslnaml = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acslnaml = 0;
        }
        acslnamf = source.substring(494, 495);
        OFFILLER49 = source.substring(495, 499);
        acslnami = source.substring(499, 524);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(524, 526).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsadl1l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsadl1l = 0;
        }
        acsadl1f = source.substring(526, 527);
        OFFILLER51 = source.substring(527, 531);
        acsadl1i = source.substring(531, 581);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(581, 583).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acssttel = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acssttel = 0;
        }
        acssttef = source.substring(583, 584);
        OFFILLER53 = source.substring(584, 588);
        acssttei = source.substring(588, 590);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(590, 592).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsadl2l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsadl2l = 0;
        }
        acsadl2f = source.substring(592, 593);
        OFFILLER55 = source.substring(593, 597);
        acsadl2i = source.substring(597, 647);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(647, 649).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acszipcl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acszipcl = 0;
        }
        acszipcf = source.substring(649, 650);
        OFFILLER57 = source.substring(650, 654);
        acszipci = source.substring(654, 659);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(659, 661).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acscityl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acscityl = 0;
        }
        acscityf = source.substring(661, 662);
        OFFILLER59 = source.substring(662, 666);
        acscityi = source.substring(666, 716);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(716, 718).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsctryl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsctryl = 0;
        }
        acsctryf = source.substring(718, 719);
        OFFILLER61 = source.substring(719, 723);
        acsctryi = source.substring(723, 726);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(726, 728).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsphn1l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsphn1l = 0;
        }
        acsphn1f = source.substring(728, 729);
        OFFILLER63 = source.substring(729, 733);
        acsphn1i = source.substring(733, 746);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(746, 748).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsgovtl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsgovtl = 0;
        }
        acsgovtf = source.substring(748, 749);
        OFFILLER65 = source.substring(749, 753);
        acsgovti = source.substring(753, 773);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(773, 775).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acsphn2l = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acsphn2l = 0;
        }
        acsphn2f = source.substring(775, 776);
        OFFILLER67 = source.substring(776, 780);
        acsphn2i = source.substring(780, 793);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(793, 795).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acseftcl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acseftcl = 0;
        }
        acseftcf = source.substring(795, 796);
        OFFILLER69 = source.substring(796, 800);
        acseftci = source.substring(800, 810);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(810, 812).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            acspflgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            acspflgl = 0;
        }
        acspflgf = source.substring(812, 813);
        OFFILLER71 = source.substring(813, 817);
        acspflgi = source.substring(817, 818);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(818, 820).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            infomsgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            infomsgl = 0;
        }
        infomsgf = source.substring(820, 821);
        OFFILLER73 = source.substring(821, 825);
        infomsgi = source.substring(825, 870);
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(870, 872).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            errmsgl = tempByteBuffer1.getShort();
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            errmsgl = 0;
        }
        errmsgf = source.substring(872, 873);
        OFFILLER75 = source.substring(873, 877);
        errmsgi = source.substring(877, 955);
    }

    public String get() {
        ByteBuffer tempByteBuffer1;
        StringBuilder sb = new StringBuilder();
        sb.append(OFFILLER1);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) trnnamel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(trnnamef);
        sb.append(OFFILLER3);
        sb.append(trnnamei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) title01l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(title01f);
        sb.append(OFFILLER5);
        sb.append(title01i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) curdatel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(curdatef);
        sb.append(OFFILLER7);
        sb.append(curdatei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) pgmnamel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(pgmnamef);
        sb.append(OFFILLER9);
        sb.append(pgmnamei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) title02l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(title02f);
        sb.append(OFFILLER11);
        sb.append(title02i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) curtimel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(curtimef);
        sb.append(OFFILLER13);
        sb.append(curtimei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acctsidl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acctsidf);
        sb.append(OFFILLER15);
        sb.append(DataConverter.convZonedLongToString(acctsidi, 11));
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsttusl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsttusf);
        sb.append(OFFILLER17);
        sb.append(acsttusi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) adtopenl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(adtopenf);
        sb.append(OFFILLER19);
        sb.append(adtopeni);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acrdliml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acrdlimf);
        sb.append(OFFILLER21);
        sb.append(acrdlimi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) aexpdtl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(aexpdtf);
        sb.append(OFFILLER23);
        sb.append(aexpdti);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acshliml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acshlimf);
        sb.append(OFFILLER25);
        sb.append(acshlimi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) areisdtl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(areisdtf);
        sb.append(OFFILLER27);
        sb.append(areisdti);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acurball);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acurbalf);
        sb.append(OFFILLER29);
        sb.append(acurbali);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acrcycrl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acrcycrf);
        sb.append(OFFILLER31);
        sb.append(acrcycri);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) aaddgrpl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(aaddgrpf);
        sb.append(OFFILLER33);
        sb.append(aaddgrpi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acrcydbl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acrcydbf);
        sb.append(OFFILLER35);
        sb.append(acrcydbi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acstnuml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acstnumf);
        sb.append(OFFILLER37);
        sb.append(acstnumi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acstssnl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acstssnf);
        sb.append(OFFILLER39);
        sb.append(acstssni);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acstdobl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acstdobf);
        sb.append(OFFILLER41);
        sb.append(acstdobi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acstfcol);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acstfcof);
        sb.append(OFFILLER43);
        sb.append(acstfcoi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsfnaml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsfnamf);
        sb.append(OFFILLER45);
        sb.append(acsfnami);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsmnaml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsmnamf);
        sb.append(OFFILLER47);
        sb.append(acsmnami);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acslnaml);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acslnamf);
        sb.append(OFFILLER49);
        sb.append(acslnami);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsadl1l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsadl1f);
        sb.append(OFFILLER51);
        sb.append(acsadl1i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acssttel);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acssttef);
        sb.append(OFFILLER53);
        sb.append(acssttei);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsadl2l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsadl2f);
        sb.append(OFFILLER55);
        sb.append(acsadl2i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acszipcl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acszipcf);
        sb.append(OFFILLER57);
        sb.append(acszipci);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acscityl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acscityf);
        sb.append(OFFILLER59);
        sb.append(acscityi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsctryl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsctryf);
        sb.append(OFFILLER61);
        sb.append(acsctryi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsphn1l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsphn1f);
        sb.append(OFFILLER63);
        sb.append(acsphn1i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsgovtl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsgovtf);
        sb.append(OFFILLER65);
        sb.append(acsgovti);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acsphn2l);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acsphn2f);
        sb.append(OFFILLER67);
        sb.append(acsphn2i);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acseftcl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acseftcf);
        sb.append(OFFILLER69);
        sb.append(acseftci);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) acspflgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(acspflgf);
        sb.append(OFFILLER71);
        sb.append(acspflgi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) infomsgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(infomsgf);
        sb.append(OFFILLER73);
        sb.append(infomsgi);
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) errmsgl);
        tempByteBuffer1.flip();
        sb.append(StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString());
        sb.append(errmsgf);
        sb.append(OFFILLER75);
        sb.append(errmsgi);
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(OFFILLER1);
        sb.append(String.valueOf(getTrnnamel()));
        sb.append(getTrnnamef());
        sb.append(OFFILLER3);
        sb.append(getTrnnamei());
        sb.append(String.valueOf(getTitle01l()));
        sb.append(getTitle01f());
        sb.append(OFFILLER5);
        sb.append(getTitle01i());
        sb.append(String.valueOf(getCurdatel()));
        sb.append(getCurdatef());
        sb.append(OFFILLER7);
        sb.append(getCurdatei());
        sb.append(String.valueOf(getPgmnamel()));
        sb.append(getPgmnamef());
        sb.append(OFFILLER9);
        sb.append(getPgmnamei());
        sb.append(String.valueOf(getTitle02l()));
        sb.append(getTitle02f());
        sb.append(OFFILLER11);
        sb.append(getTitle02i());
        sb.append(String.valueOf(getCurtimel()));
        sb.append(getCurtimef());
        sb.append(OFFILLER13);
        sb.append(getCurtimei());
        sb.append(String.valueOf(getAcctsidl()));
        sb.append(getAcctsidf());
        sb.append(OFFILLER15);
        sb.append(PictureFormatter
                .intFormatWithoutSign(acctsidi, "00000000000"));
        sb.append(String.valueOf(getAcsttusl()));
        sb.append(getAcsttusf());
        sb.append(OFFILLER17);
        sb.append(getAcsttusi());
        sb.append(String.valueOf(getAdtopenl()));
        sb.append(getAdtopenf());
        sb.append(OFFILLER19);
        sb.append(getAdtopeni());
        sb.append(String.valueOf(getAcrdliml()));
        sb.append(getAcrdlimf());
        sb.append(OFFILLER21);
        sb.append(getAcrdlimi());
        sb.append(String.valueOf(getAexpdtl()));
        sb.append(getAexpdtf());
        sb.append(OFFILLER23);
        sb.append(getAexpdti());
        sb.append(String.valueOf(getAcshliml()));
        sb.append(getAcshlimf());
        sb.append(OFFILLER25);
        sb.append(getAcshlimi());
        sb.append(String.valueOf(getAreisdtl()));
        sb.append(getAreisdtf());
        sb.append(OFFILLER27);
        sb.append(getAreisdti());
        sb.append(String.valueOf(getAcurball()));
        sb.append(getAcurbalf());
        sb.append(OFFILLER29);
        sb.append(getAcurbali());
        sb.append(String.valueOf(getAcrcycrl()));
        sb.append(getAcrcycrf());
        sb.append(OFFILLER31);
        sb.append(getAcrcycri());
        sb.append(String.valueOf(getAaddgrpl()));
        sb.append(getAaddgrpf());
        sb.append(OFFILLER33);
        sb.append(getAaddgrpi());
        sb.append(String.valueOf(getAcrcydbl()));
        sb.append(getAcrcydbf());
        sb.append(OFFILLER35);
        sb.append(getAcrcydbi());
        sb.append(String.valueOf(getAcstnuml()));
        sb.append(getAcstnumf());
        sb.append(OFFILLER37);
        sb.append(getAcstnumi());
        sb.append(String.valueOf(getAcstssnl()));
        sb.append(getAcstssnf());
        sb.append(OFFILLER39);
        sb.append(getAcstssni());
        sb.append(String.valueOf(getAcstdobl()));
        sb.append(getAcstdobf());
        sb.append(OFFILLER41);
        sb.append(getAcstdobi());
        sb.append(String.valueOf(getAcstfcol()));
        sb.append(getAcstfcof());
        sb.append(OFFILLER43);
        sb.append(getAcstfcoi());
        sb.append(String.valueOf(getAcsfnaml()));
        sb.append(getAcsfnamf());
        sb.append(OFFILLER45);
        sb.append(getAcsfnami());
        sb.append(String.valueOf(getAcsmnaml()));
        sb.append(getAcsmnamf());
        sb.append(OFFILLER47);
        sb.append(getAcsmnami());
        sb.append(String.valueOf(getAcslnaml()));
        sb.append(getAcslnamf());
        sb.append(OFFILLER49);
        sb.append(getAcslnami());
        sb.append(String.valueOf(getAcsadl1l()));
        sb.append(getAcsadl1f());
        sb.append(OFFILLER51);
        sb.append(getAcsadl1i());
        sb.append(String.valueOf(getAcssttel()));
        sb.append(getAcssttef());
        sb.append(OFFILLER53);
        sb.append(getAcssttei());
        sb.append(String.valueOf(getAcsadl2l()));
        sb.append(getAcsadl2f());
        sb.append(OFFILLER55);
        sb.append(getAcsadl2i());
        sb.append(String.valueOf(getAcszipcl()));
        sb.append(getAcszipcf());
        sb.append(OFFILLER57);
        sb.append(getAcszipci());
        sb.append(String.valueOf(getAcscityl()));
        sb.append(getAcscityf());
        sb.append(OFFILLER59);
        sb.append(getAcscityi());
        sb.append(String.valueOf(getAcsctryl()));
        sb.append(getAcsctryf());
        sb.append(OFFILLER61);
        sb.append(getAcsctryi());
        sb.append(String.valueOf(getAcsphn1l()));
        sb.append(getAcsphn1f());
        sb.append(OFFILLER63);
        sb.append(getAcsphn1i());
        sb.append(String.valueOf(getAcsgovtl()));
        sb.append(getAcsgovtf());
        sb.append(OFFILLER65);
        sb.append(getAcsgovti());
        sb.append(String.valueOf(getAcsphn2l()));
        sb.append(getAcsphn2f());
        sb.append(OFFILLER67);
        sb.append(getAcsphn2i());
        sb.append(String.valueOf(getAcseftcl()));
        sb.append(getAcseftcf());
        sb.append(OFFILLER69);
        sb.append(getAcseftci());
        sb.append(String.valueOf(getAcspflgl()));
        sb.append(getAcspflgf());
        sb.append(OFFILLER71);
        sb.append(getAcspflgi());
        sb.append(String.valueOf(getInfomsgl()));
        sb.append(getInfomsgf());
        sb.append(OFFILLER73);
        sb.append(getInfomsgi());
        sb.append(String.valueOf(getErrmsgl()));
        sb.append(getErrmsgf());
        sb.append(OFFILLER75);
        sb.append(getErrmsgi());
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER2 {
        // [T-Up#INFO][COACTVW.CPY, LINE #23] TRNNAMEA (level: 3)
        private @Getter String trnnamea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(trnnamea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(trnnamea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER4 {
        // [T-Up#INFO][COACTVW.CPY, LINE #29] TITLE01A (level: 3)
        private @Getter String title01a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(title01a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(title01a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER6 {
        // [T-Up#INFO][COACTVW.CPY, LINE #35] CURDATEA (level: 3)
        private @Getter String curdatea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(curdatea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(curdatea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER8 {
        // [T-Up#INFO][COACTVW.CPY, LINE #41] PGMNAMEA (level: 3)
        private @Getter String pgmnamea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(pgmnamea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(pgmnamea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER10 {
        // [T-Up#INFO][COACTVW.CPY, LINE #47] TITLE02A (level: 3)
        private @Getter String title02a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(title02a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(title02a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER12 {
        // [T-Up#INFO][COACTVW.CPY, LINE #53] CURTIMEA (level: 3)
        private @Getter String curtimea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(curtimea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(curtimea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER14 {
        // [T-Up#INFO][COACTVW.CPY, LINE #59] ACCTSIDA (level: 3)
        private @Getter String acctsida = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acctsida);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acctsida);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER16 {
        // [T-Up#INFO][COACTVW.CPY, LINE #65] ACSTTUSA (level: 3)
        private @Getter String acsttusa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsttusa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsttusa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER18 {
        // [T-Up#INFO][COACTVW.CPY, LINE #71] ADTOPENA (level: 3)
        private @Getter String adtopena = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(adtopena);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(adtopena);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER20 {
        // [T-Up#INFO][COACTVW.CPY, LINE #77] ACRDLIMA (level: 3)
        private @Getter String acrdlima = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrdlima);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrdlima);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER22 {
        // [T-Up#INFO][COACTVW.CPY, LINE #83] AEXPDTA (level: 3)
        private @Getter String aexpdta = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(aexpdta);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(aexpdta);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER24 {
        // [T-Up#INFO][COACTVW.CPY, LINE #89] ACSHLIMA (level: 3)
        private @Getter String acshlima = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acshlima);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acshlima);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER26 {
        // [T-Up#INFO][COACTVW.CPY, LINE #95] AREISDTA (level: 3)
        private @Getter String areisdta = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(areisdta);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(areisdta);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER28 {
        // [T-Up#INFO][COACTVW.CPY, LINE #101] ACURBALA (level: 3)
        private @Getter String acurbala = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acurbala);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acurbala);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER30 {
        // [T-Up#INFO][COACTVW.CPY, LINE #107] ACRCYCRA (level: 3)
        private @Getter String acrcycra = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcycra);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcycra);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER32 {
        // [T-Up#INFO][COACTVW.CPY, LINE #113] AADDGRPA (level: 3)
        private @Getter String aaddgrpa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(aaddgrpa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(aaddgrpa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER34 {
        // [T-Up#INFO][COACTVW.CPY, LINE #119] ACRCYDBA (level: 3)
        private @Getter String acrcydba = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcydba);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acrcydba);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER36 {
        // [T-Up#INFO][COACTVW.CPY, LINE #125] ACSTNUMA (level: 3)
        private @Getter String acstnuma = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstnuma);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstnuma);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER38 {
        // [T-Up#INFO][COACTVW.CPY, LINE #131] ACSTSSNA (level: 3)
        private @Getter String acstssna = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstssna);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstssna);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER40 {
        // [T-Up#INFO][COACTVW.CPY, LINE #137] ACSTDOBA (level: 3)
        private @Getter String acstdoba = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstdoba);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstdoba);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER42 {
        // [T-Up#INFO][COACTVW.CPY, LINE #143] ACSTFCOA (level: 3)
        private @Getter String acstfcoa = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstfcoa);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acstfcoa);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER44 {
        // [T-Up#INFO][COACTVW.CPY, LINE #149] ACSFNAMA (level: 3)
        private @Getter String acsfnama = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsfnama);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsfnama);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER46 {
        // [T-Up#INFO][COACTVW.CPY, LINE #155] ACSMNAMA (level: 3)
        private @Getter String acsmnama = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsmnama);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsmnama);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER48 {
        // [T-Up#INFO][COACTVW.CPY, LINE #161] ACSLNAMA (level: 3)
        private @Getter String acslnama = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acslnama);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acslnama);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER50 {
        // [T-Up#INFO][COACTVW.CPY, LINE #167] ACSADL1A (level: 3)
        private @Getter String acsadl1a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl1a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl1a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER52 {
        // [T-Up#INFO][COACTVW.CPY, LINE #173] ACSSTTEA (level: 3)
        private @Getter String acssttea = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acssttea);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acssttea);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER54 {
        // [T-Up#INFO][COACTVW.CPY, LINE #179] ACSADL2A (level: 3)
        private @Getter String acsadl2a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl2a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsadl2a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER56 {
        // [T-Up#INFO][COACTVW.CPY, LINE #185] ACSZIPCA (level: 3)
        private @Getter String acszipca = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acszipca);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acszipca);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER58 {
        // [T-Up#INFO][COACTVW.CPY, LINE #191] ACSCITYA (level: 3)
        private @Getter String acscitya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acscitya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acscitya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER60 {
        // [T-Up#INFO][COACTVW.CPY, LINE #197] ACSCTRYA (level: 3)
        private @Getter String acsctrya = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsctrya);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsctrya);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER62 {
        // [T-Up#INFO][COACTVW.CPY, LINE #203] ACSPHN1A (level: 3)
        private @Getter String acsphn1a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsphn1a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsphn1a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER64 {
        // [T-Up#INFO][COACTVW.CPY, LINE #209] ACSGOVTA (level: 3)
        private @Getter String acsgovta = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsgovta);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsgovta);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER66 {
        // [T-Up#INFO][COACTVW.CPY, LINE #215] ACSPHN2A (level: 3)
        private @Getter String acsphn2a = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsphn2a);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acsphn2a);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER68 {
        // [T-Up#INFO][COACTVW.CPY, LINE #221] ACSEFTCA (level: 3)
        private @Getter String acseftca = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acseftca);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acseftca);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER70 {
        // [T-Up#INFO][COACTVW.CPY, LINE #227] ACSPFLGA (level: 3)
        private @Getter String acspflga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(acspflga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(acspflga);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER72 {
        // [T-Up#INFO][COACTVW.CPY, LINE #233] INFOMSGA (level: 3)
        private @Getter String infomsga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(infomsga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(infomsga);
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _OFFILLER74 {
        // [T-Up#INFO][COACTVW.CPY, LINE #239] ERRMSGA (level: 3)
        private @Getter String errmsga = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(errmsga);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(errmsga);
            return sb.toString();
        }
    }
}
