package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:47 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class Cobil00cVariableContainer {
    // *----------------------------------------------------------------*
    // *                     WORKING STORAGE SECTION                     
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COBIL00C.cbl, LINE #36] WS-VARIABLES (level: 1)
    private @Getter @Setter Cobil00cWsVariables wsVariables = new Cobil00cWsVariables();
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter Cobil00cCarddemoCommarea carddemoCommarea = new Cobil00cCarddemoCommarea();
    //       *COPY COBIL00.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COBIL00.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COBIL00.CPY, LINE #18] COBIL0AI (level: 1)
    private @Getter @Setter Cobil00cCobil0ai cobil0ai = new Cobil00cCobil0ai();

    public Cobil00cCobil0ao getCobil0ao() {
        return Cobil00cCobil0ao.builder().OFFILLER1(getOFFILLER1())
                .OFFILLER2(getOFFILLER2()).trnnamec(getTrnnamec())
                .trnnamep(getTrnnamep()).trnnameh(getTrnnameh())
                .trnnamev(getTrnnamev()).trnnameo(getTrnnameo())
                .OFFILLER3(getOFFILLER3()).title01c(getTitle01c())
                .title01p(getTitle01p()).title01h(getTitle01h())
                .title01v(getTitle01v()).title01o(getTitle01o())
                .OFFILLER4(getOFFILLER4()).curdatec(getCurdatec())
                .curdatep(getCurdatep()).curdateh(getCurdateh())
                .curdatev(getCurdatev()).curdateo(getCurdateo())
                .OFFILLER5(getOFFILLER5()).pgmnamec(getPgmnamec())
                .pgmnamep(getPgmnamep()).pgmnameh(getPgmnameh())
                .pgmnamev(getPgmnamev()).pgmnameo(getPgmnameo())
                .OFFILLER6(getOFFILLER6()).title02c(getTitle02c())
                .title02p(getTitle02p()).title02h(getTitle02h())
                .title02v(getTitle02v()).title02o(getTitle02o())
                .OFFILLER7(getOFFILLER7()).curtimec(getCurtimec())
                .curtimep(getCurtimep()).curtimeh(getCurtimeh())
                .curtimev(getCurtimev()).curtimeo(getCurtimeo())
                .OFFILLER8(getOFFILLER8()).actidinc(getActidinc())
                .actidinp(getActidinp()).actidinh(getActidinh())
                .actidinv(getActidinv()).actidino(getActidino())
                .OFFILLER9(getOFFILLER9()).curbalc(getCurbalc())
                .curbalp(getCurbalp()).curbalh(getCurbalh())
                .curbalv(getCurbalv()).curbalo(getCurbalo())
                .OFFILLER10(getOFFILLER10()).confirmc(getConfirmc())
                .confirmp(getConfirmp()).confirmh(getConfirmh())
                .confirmv(getConfirmv()).confirmo(getConfirmo())
                .OFFILLER11(getOFFILLER11()).errmsgc(getErrmsgc())
                .errmsgp(getErrmsgp()).errmsgh(getErrmsgh())
                .errmsgv(getErrmsgv()).errmsgo(getErrmsgo()).build();
    }

    public void setCobil0ao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setActidinc(source.substring(165, 166));
        setActidinp(source.substring(166, 167));
        setActidinh(source.substring(167, 168));
        setActidinv(source.substring(168, 169));
        setActidino(source.substring(169, 180));
        setOFFILLER9(source.substring(180, 183));
        setCurbalc(source.substring(183, 184));
        setCurbalp(source.substring(184, 185));
        setCurbalh(source.substring(185, 186));
        setCurbalv(source.substring(186, 187));
        setCurbalo(source.substring(187, 201));
        setOFFILLER10(source.substring(201, 204));
        setConfirmc(source.substring(204, 205));
        setConfirmp(source.substring(205, 206));
        setConfirmh(source.substring(206, 207));
        setConfirmv(source.substring(207, 208));
        setConfirmo(source.substring(208, 209));
        setOFFILLER11(source.substring(209, 212));
        setErrmsgc(source.substring(212, 213));
        setErrmsgp(source.substring(213, 214));
        setErrmsgh(source.substring(214, 215));
        setErrmsgv(source.substring(215, 216));
        setErrmsgo(source.substring(216, 294));
    }

    public void setCobil0ao(Cobil00cCobil0ao source) {
        setCobil0ao(source.toString());
    }

    public String getOFFILLER1() {
        return getCobil0ai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCobil0ai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCobil0ai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCobil0ai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCobil0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCobil0ai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCobil0ai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCobil0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCobil0ai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCobil0ai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCobil0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCobil0ai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCobil0ai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCobil0ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCobil0ai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCobil0ai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCobil0ai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCobil0ai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCobil0ai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCobil0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCobil0ai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCobil0ai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCobil0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCobil0ai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCobil0ai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCobil0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCobil0ai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCobil0ai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCobil0ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCobil0ai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCobil0ai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCobil0ai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCobil0ai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCobil0ai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCobil0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCobil0ai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCobil0ai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCobil0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCobil0ai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCobil0ai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCobil0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCobil0ai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCobil0ai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCobil0ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCobil0ai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCobil0ai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCobil0ai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCobil0ai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCobil0ai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCobil0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCobil0ai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCobil0ai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCobil0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCobil0ai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCobil0ai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCobil0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCobil0ai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCobil0ai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCobil0ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCobil0ai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCobil0ai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCobil0ai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCobil0ai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCobil0ai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCobil0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCobil0ai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCobil0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCobil0ai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCobil0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCobil0ai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCobil0ai().setOFFILLER11(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCobil0ai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCobil0ai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCobil0ai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCobil0ai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCobil0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCobil0ai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCobil0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCobil0ai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCobil0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCobil0ai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCobil0ai().setOFFILLER13(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCobil0ai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCobil0ai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getActidinl());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCobil0ai().getActidinf();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setActidinl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setActidinl(0);
        }
    }

    public String getActidinc() {
        return getCobil0ai().getOFFILLER15().substring(0, 1);
    }

    public void setActidinc(String source) {
        getCobil0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER15(), source, 0, 1));
    }

    public String getActidinp() {
        return getCobil0ai().getOFFILLER15().substring(1, 2);
    }

    public void setActidinp(String source) {
        getCobil0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER15(), source, 1, 2));
    }

    public String getActidinh() {
        return getCobil0ai().getOFFILLER15().substring(2, 3);
    }

    public void setActidinh(String source) {
        getCobil0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER15(), source, 2, 3));
    }

    public String getActidinv() {
        return getCobil0ai().getOFFILLER15().substring(3);
    }

    public void setActidinv(String source) {
        getCobil0ai().setOFFILLER15(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER15(), source, 3, 4));
    }

    public String getActidino() {
        return getCobil0ai().getActidini();
    }

    public void setActidino(String source) {
        getCobil0ai().setActidini(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getCurball());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCobil0ai().getCurbalf();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setCurball(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setCurball(0);
        }
    }

    public String getCurbalc() {
        return getCobil0ai().getOFFILLER17().substring(0, 1);
    }

    public void setCurbalc(String source) {
        getCobil0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER17(), source, 0, 1));
    }

    public String getCurbalp() {
        return getCobil0ai().getOFFILLER17().substring(1, 2);
    }

    public void setCurbalp(String source) {
        getCobil0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER17(), source, 1, 2));
    }

    public String getCurbalh() {
        return getCobil0ai().getOFFILLER17().substring(2, 3);
    }

    public void setCurbalh(String source) {
        getCobil0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER17(), source, 2, 3));
    }

    public String getCurbalv() {
        return getCobil0ai().getOFFILLER17().substring(3);
    }

    public void setCurbalv(String source) {
        getCobil0ai().setOFFILLER17(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER17(), source, 3, 4));
    }

    public String getCurbalo() {
        return getCobil0ai().getCurbali();
    }

    public void setCurbalo(String source) {
        getCobil0ai().setCurbali(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getConfirml());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCobil0ai().getConfirmf();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setConfirml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setConfirml(0);
        }
    }

    public String getConfirmc() {
        return getCobil0ai().getOFFILLER19().substring(0, 1);
    }

    public void setConfirmc(String source) {
        getCobil0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER19(), source, 0, 1));
    }

    public String getConfirmp() {
        return getCobil0ai().getOFFILLER19().substring(1, 2);
    }

    public void setConfirmp(String source) {
        getCobil0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER19(), source, 1, 2));
    }

    public String getConfirmh() {
        return getCobil0ai().getOFFILLER19().substring(2, 3);
    }

    public void setConfirmh(String source) {
        getCobil0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER19(), source, 2, 3));
    }

    public String getConfirmv() {
        return getCobil0ai().getOFFILLER19().substring(3);
    }

    public void setConfirmv(String source) {
        getCobil0ai().setOFFILLER19(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER19(), source, 3, 4));
    }

    public String getConfirmo() {
        return getCobil0ai().getConfirmi();
    }

    public void setConfirmo(String source) {
        getCobil0ai().setConfirmi(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCobil0ai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCobil0ai().getErrmsgf();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCobil0ai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCobil0ai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCobil0ai().getOFFILLER21().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCobil0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER21(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCobil0ai().getOFFILLER21().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCobil0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER21(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCobil0ai().getOFFILLER21().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCobil0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER21(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCobil0ai().getOFFILLER21().substring(3);
    }

    public void setErrmsgv(String source) {
        getCobil0ai().setOFFILLER21(
                StringUtils
                        .overlay(getCobil0ai().getOFFILLER21(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCobil0ai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCobil0ai().setErrmsgi(source);
    }

    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter Cobil00cCcdaScreenTitle ccdaScreenTitle = new Cobil00cCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter Cobil00cWsDateTime wsDateTime = new Cobil00cWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter Cobil00cCcdaCommonMessages ccdaCommonMessages = new Cobil00cCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CVACT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for  account entity (RECLN 300)               
    // ***************************************************************** 
    // [T-Up#INFO][CVACT01Y.cpy, LINE #5] ACCOUNT-RECORD (level: 1)
    private @Getter @Setter Cobil00cAccountRecord accountRecord = new Cobil00cAccountRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    //       *COPY CVACT03Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT03Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for card xref (RECLN 50)                      
    // ***************************************************************** 
    // [T-Up#INFO][CVACT03Y.cpy, LINE #5] CARD-XREF-RECORD (level: 1)
    private @Getter @Setter Cobil00cCardXrefRecord cardXrefRecord = new Cobil00cCardXrefRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    //       *COPY CVTRA05Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVTRA05Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for TRANsaction record (RECLN = 350)          
    // ***************************************************************** 
    // [T-Up#INFO][CVTRA05Y.cpy, LINE #5] TRAN-RECORD (level: 1)
    private @Getter @Setter Cobil00cTranRecord tranRecord = new Cobil00cTranRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT 
    // *                                                                 
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter Cobil00cDfhaid dfhaid = new Cobil00cDfhaid();
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter Cobil00cDfhbmsca dfhbmsca = new Cobil00cDfhbmsca();
    // *----------------------------------------------------------------*
    // *                        LINKAGE SECTION                          
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COBIL00C.cbl, LINE #91] DFHCOMMAREA (level: 1)
    private @Getter @Setter Cobil00cDfhcommarea dfhcommarea = new Cobil00cDfhcommarea();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class Cobil00cCobil0ao {
        // [T-Up#INFO][COBIL00.CPY, LINE #81] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COBIL00.CPY, LINE #82] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #83] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #84] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #85] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #86] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #87] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COBIL00.CPY, LINE #88] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #89] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #90] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #91] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #92] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #93] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COBIL00.CPY, LINE #94] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #95] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #96] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #97] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #98] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #99] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COBIL00.CPY, LINE #100] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #101] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #102] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #103] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #104] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #105] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COBIL00.CPY, LINE #106] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #107] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #108] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #109] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #110] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #111] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COBIL00.CPY, LINE #112] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #113] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #114] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #115] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #116] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #117] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COBIL00.CPY, LINE #118] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #119] ACTIDINC (level: 2)
        private @Getter String actidinc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #120] ACTIDINP (level: 2)
        private @Getter String actidinp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #121] ACTIDINH (level: 2)
        private @Getter String actidinh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #122] ACTIDINV (level: 2)
        private @Getter String actidinv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #123] ACTIDINO (level: 2)
        private @Getter String actidino = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COBIL00.CPY, LINE #124] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #125] CURBALC (level: 2)
        private @Getter String curbalc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #126] CURBALP (level: 2)
        private @Getter String curbalp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #127] CURBALH (level: 2)
        private @Getter String curbalh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #128] CURBALV (level: 2)
        private @Getter String curbalv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #129] CURBALO (level: 2)
        private @Getter String curbalo = StringUtils.repeat(' ', 14);
        // [T-Up#INFO][COBIL00.CPY, LINE #130] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #131] CONFIRMC (level: 2)
        private @Getter String confirmc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #132] CONFIRMP (level: 2)
        private @Getter String confirmp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #133] CONFIRMH (level: 2)
        private @Getter String confirmh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #134] CONFIRMV (level: 2)
        private @Getter String confirmv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #135] CONFIRMO (level: 2)
        private @Getter String confirmo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #136] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COBIL00.CPY, LINE #137] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #138] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #139] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #140] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COBIL00.CPY, LINE #141] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(actidinc);
            sb.append(actidinp);
            sb.append(actidinh);
            sb.append(actidinv);
            sb.append(actidino);
            sb.append(OFFILLER9);
            sb.append(curbalc);
            sb.append(curbalp);
            sb.append(curbalh);
            sb.append(curbalv);
            sb.append(curbalo);
            sb.append(OFFILLER10);
            sb.append(confirmc);
            sb.append(confirmp);
            sb.append(confirmh);
            sb.append(confirmv);
            sb.append(confirmo);
            sb.append(OFFILLER11);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(actidinc);
            sb.append(actidinp);
            sb.append(actidinh);
            sb.append(actidinv);
            sb.append(actidino);
            sb.append(OFFILLER9);
            sb.append(curbalc);
            sb.append(curbalp);
            sb.append(curbalh);
            sb.append(curbalv);
            sb.append(curbalo);
            sb.append(OFFILLER10);
            sb.append(confirmc);
            sb.append(confirmp);
            sb.append(confirmh);
            sb.append(confirmv);
            sb.append(confirmo);
            sb.append(OFFILLER11);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }
    }
}
