package aws.carddemo.variable;

import aws.carddemo.variable.group.*;
import java.math.*;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/05/02 05:57:49 UTC</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class Cotrn02cVariableContainer {
    // *----------------------------------------------------------------*
    // *                     WORKING STORAGE SECTION                     
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COTRN02C.cbl, LINE #35] WS-VARIABLES (level: 1)
    private @Getter @Setter Cotrn02cWsVariables wsVariables = new Cotrn02cWsVariables();
    // [T-Up#INFO][COTRN02C.cbl, LINE #62] CSUTLDTC-PARM (level: 1)
    private @Getter @Setter Cotrn02cCsutldtcParm csutldtcParm = new Cotrn02cCsutldtcParm();
    //       *COPY COCOM01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COCOM01Y.cpy)
    // ******************************************************************
    // * Communication area for CardDemo application programs            
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COCOM01Y.cpy, LINE #20] CARDDEMO-COMMAREA (level: 1)
    private @Getter @Setter Cotrn02cCarddemoCommarea carddemoCommarea = new Cotrn02cCarddemoCommarea();
    //       *COPY COTRN02.                                                    
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTRN02.CPY) 
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTRN02.CPY, LINE #18] COTRN2AI (level: 1)
    private @Getter @Setter Cotrn02cCotrn2ai cotrn2ai = new Cotrn02cCotrn2ai();

    public Cotrn02cCotrn2ao getCotrn2ao() {
        return Cotrn02cCotrn2ao.builder().OFFILLER1(getOFFILLER1())
                .OFFILLER2(getOFFILLER2()).trnnamec(getTrnnamec())
                .trnnamep(getTrnnamep()).trnnameh(getTrnnameh())
                .trnnamev(getTrnnamev()).trnnameo(getTrnnameo())
                .OFFILLER3(getOFFILLER3()).title01c(getTitle01c())
                .title01p(getTitle01p()).title01h(getTitle01h())
                .title01v(getTitle01v()).title01o(getTitle01o())
                .OFFILLER4(getOFFILLER4()).curdatec(getCurdatec())
                .curdatep(getCurdatep()).curdateh(getCurdateh())
                .curdatev(getCurdatev()).curdateo(getCurdateo())
                .OFFILLER5(getOFFILLER5()).pgmnamec(getPgmnamec())
                .pgmnamep(getPgmnamep()).pgmnameh(getPgmnameh())
                .pgmnamev(getPgmnamev()).pgmnameo(getPgmnameo())
                .OFFILLER6(getOFFILLER6()).title02c(getTitle02c())
                .title02p(getTitle02p()).title02h(getTitle02h())
                .title02v(getTitle02v()).title02o(getTitle02o())
                .OFFILLER7(getOFFILLER7()).curtimec(getCurtimec())
                .curtimep(getCurtimep()).curtimeh(getCurtimeh())
                .curtimev(getCurtimev()).curtimeo(getCurtimeo())
                .OFFILLER8(getOFFILLER8()).actidinc(getActidinc())
                .actidinp(getActidinp()).actidinh(getActidinh())
                .actidinv(getActidinv()).actidino(getActidino())
                .OFFILLER9(getOFFILLER9()).cardninc(getCardninc())
                .cardninp(getCardninp()).cardninh(getCardninh())
                .cardninv(getCardninv()).cardnino(getCardnino())
                .OFFILLER10(getOFFILLER10()).ttypcdc(getTtypcdc())
                .ttypcdp(getTtypcdp()).ttypcdh(getTtypcdh())
                .ttypcdv(getTtypcdv()).ttypcdo(getTtypcdo())
                .OFFILLER11(getOFFILLER11()).tcatcdc(getTcatcdc())
                .tcatcdp(getTcatcdp()).tcatcdh(getTcatcdh())
                .tcatcdv(getTcatcdv()).tcatcdo(getTcatcdo())
                .OFFILLER12(getOFFILLER12()).trnsrcc(getTrnsrcc())
                .trnsrcp(getTrnsrcp()).trnsrch(getTrnsrch())
                .trnsrcv(getTrnsrcv()).trnsrco(getTrnsrco())
                .OFFILLER13(getOFFILLER13()).tdescc(getTdescc())
                .tdescp(getTdescp()).tdesch(getTdesch()).tdescv(getTdescv())
                .tdesco(getTdesco()).OFFILLER14(getOFFILLER14())
                .trnamtc(getTrnamtc()).trnamtp(getTrnamtp())
                .trnamth(getTrnamth()).trnamtv(getTrnamtv())
                .trnamto(getTrnamto()).OFFILLER15(getOFFILLER15())
                .torigdtc(getTorigdtc()).torigdtp(getTorigdtp())
                .torigdth(getTorigdth()).torigdtv(getTorigdtv())
                .torigdto(getTorigdto()).OFFILLER16(getOFFILLER16())
                .tprocdtc(getTprocdtc()).tprocdtp(getTprocdtp())
                .tprocdth(getTprocdth()).tprocdtv(getTprocdtv())
                .tprocdto(getTprocdto()).OFFILLER17(getOFFILLER17())
                .midc(getMidc()).midp(getMidp()).midh(getMidh())
                .midv(getMidv()).mido(getMido()).OFFILLER18(getOFFILLER18())
                .mnamec(getMnamec()).mnamep(getMnamep()).mnameh(getMnameh())
                .mnamev(getMnamev()).mnameo(getMnameo())
                .OFFILLER19(getOFFILLER19()).mcityc(getMcityc())
                .mcityp(getMcityp()).mcityh(getMcityh()).mcityv(getMcityv())
                .mcityo(getMcityo()).OFFILLER20(getOFFILLER20())
                .mzipc(getMzipc()).mzipp(getMzipp()).mziph(getMziph())
                .mzipv(getMzipv()).mzipo(getMzipo())
                .OFFILLER21(getOFFILLER21()).confirmc(getConfirmc())
                .confirmp(getConfirmp()).confirmh(getConfirmh())
                .confirmv(getConfirmv()).confirmo(getConfirmo())
                .OFFILLER22(getOFFILLER22()).errmsgc(getErrmsgc())
                .errmsgp(getErrmsgp()).errmsgh(getErrmsgh())
                .errmsgv(getErrmsgv()).errmsgo(getErrmsgo()).build();
    }

    public void setCotrn2ao(String source) {
        setOFFILLER1(source.substring(0, 12));
        setOFFILLER2(source.substring(12, 15));
        setTrnnamec(source.substring(15, 16));
        setTrnnamep(source.substring(16, 17));
        setTrnnameh(source.substring(17, 18));
        setTrnnamev(source.substring(18, 19));
        setTrnnameo(source.substring(19, 23));
        setOFFILLER3(source.substring(23, 26));
        setTitle01c(source.substring(26, 27));
        setTitle01p(source.substring(27, 28));
        setTitle01h(source.substring(28, 29));
        setTitle01v(source.substring(29, 30));
        setTitle01o(source.substring(30, 70));
        setOFFILLER4(source.substring(70, 73));
        setCurdatec(source.substring(73, 74));
        setCurdatep(source.substring(74, 75));
        setCurdateh(source.substring(75, 76));
        setCurdatev(source.substring(76, 77));
        setCurdateo(source.substring(77, 85));
        setOFFILLER5(source.substring(85, 88));
        setPgmnamec(source.substring(88, 89));
        setPgmnamep(source.substring(89, 90));
        setPgmnameh(source.substring(90, 91));
        setPgmnamev(source.substring(91, 92));
        setPgmnameo(source.substring(92, 100));
        setOFFILLER6(source.substring(100, 103));
        setTitle02c(source.substring(103, 104));
        setTitle02p(source.substring(104, 105));
        setTitle02h(source.substring(105, 106));
        setTitle02v(source.substring(106, 107));
        setTitle02o(source.substring(107, 147));
        setOFFILLER7(source.substring(147, 150));
        setCurtimec(source.substring(150, 151));
        setCurtimep(source.substring(151, 152));
        setCurtimeh(source.substring(152, 153));
        setCurtimev(source.substring(153, 154));
        setCurtimeo(source.substring(154, 162));
        setOFFILLER8(source.substring(162, 165));
        setActidinc(source.substring(165, 166));
        setActidinp(source.substring(166, 167));
        setActidinh(source.substring(167, 168));
        setActidinv(source.substring(168, 169));
        setActidino(source.substring(169, 180));
        setOFFILLER9(source.substring(180, 183));
        setCardninc(source.substring(183, 184));
        setCardninp(source.substring(184, 185));
        setCardninh(source.substring(185, 186));
        setCardninv(source.substring(186, 187));
        setCardnino(source.substring(187, 203));
        setOFFILLER10(source.substring(203, 206));
        setTtypcdc(source.substring(206, 207));
        setTtypcdp(source.substring(207, 208));
        setTtypcdh(source.substring(208, 209));
        setTtypcdv(source.substring(209, 210));
        setTtypcdo(source.substring(210, 212));
        setOFFILLER11(source.substring(212, 215));
        setTcatcdc(source.substring(215, 216));
        setTcatcdp(source.substring(216, 217));
        setTcatcdh(source.substring(217, 218));
        setTcatcdv(source.substring(218, 219));
        setTcatcdo(source.substring(219, 223));
        setOFFILLER12(source.substring(223, 226));
        setTrnsrcc(source.substring(226, 227));
        setTrnsrcp(source.substring(227, 228));
        setTrnsrch(source.substring(228, 229));
        setTrnsrcv(source.substring(229, 230));
        setTrnsrco(source.substring(230, 240));
        setOFFILLER13(source.substring(240, 243));
        setTdescc(source.substring(243, 244));
        setTdescp(source.substring(244, 245));
        setTdesch(source.substring(245, 246));
        setTdescv(source.substring(246, 247));
        setTdesco(source.substring(247, 307));
        setOFFILLER14(source.substring(307, 310));
        setTrnamtc(source.substring(310, 311));
        setTrnamtp(source.substring(311, 312));
        setTrnamth(source.substring(312, 313));
        setTrnamtv(source.substring(313, 314));
        setTrnamto(source.substring(314, 326));
        setOFFILLER15(source.substring(326, 329));
        setTorigdtc(source.substring(329, 330));
        setTorigdtp(source.substring(330, 331));
        setTorigdth(source.substring(331, 332));
        setTorigdtv(source.substring(332, 333));
        setTorigdto(source.substring(333, 343));
        setOFFILLER16(source.substring(343, 346));
        setTprocdtc(source.substring(346, 347));
        setTprocdtp(source.substring(347, 348));
        setTprocdth(source.substring(348, 349));
        setTprocdtv(source.substring(349, 350));
        setTprocdto(source.substring(350, 360));
        setOFFILLER17(source.substring(360, 363));
        setMidc(source.substring(363, 364));
        setMidp(source.substring(364, 365));
        setMidh(source.substring(365, 366));
        setMidv(source.substring(366, 367));
        setMido(source.substring(367, 376));
        setOFFILLER18(source.substring(376, 379));
        setMnamec(source.substring(379, 380));
        setMnamep(source.substring(380, 381));
        setMnameh(source.substring(381, 382));
        setMnamev(source.substring(382, 383));
        setMnameo(source.substring(383, 413));
        setOFFILLER19(source.substring(413, 416));
        setMcityc(source.substring(416, 417));
        setMcityp(source.substring(417, 418));
        setMcityh(source.substring(418, 419));
        setMcityv(source.substring(419, 420));
        setMcityo(source.substring(420, 445));
        setOFFILLER20(source.substring(445, 448));
        setMzipc(source.substring(448, 449));
        setMzipp(source.substring(449, 450));
        setMziph(source.substring(450, 451));
        setMzipv(source.substring(451, 452));
        setMzipo(source.substring(452, 462));
        setOFFILLER21(source.substring(462, 465));
        setConfirmc(source.substring(465, 466));
        setConfirmp(source.substring(466, 467));
        setConfirmh(source.substring(467, 468));
        setConfirmv(source.substring(468, 469));
        setConfirmo(source.substring(469, 470));
        setOFFILLER22(source.substring(470, 473));
        setErrmsgc(source.substring(473, 474));
        setErrmsgp(source.substring(474, 475));
        setErrmsgh(source.substring(475, 476));
        setErrmsgv(source.substring(476, 477));
        setErrmsgo(source.substring(477, 555));
    }

    public void setCotrn2ao(Cotrn02cCotrn2ao source) {
        setCotrn2ao(source.toString());
    }

    public String getOFFILLER1() {
        return getCotrn2ai().getOFFILLER1();
    }

    public void setOFFILLER1(String source) {
        getCotrn2ai().setOFFILLER1(source);
    }

    public String getOFFILLER2() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTrnnamel());
        tempByteBuffer1.flip();
        String temp1 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp1 + getCotrn2ai().getTrnnamef();
    }

    public void setOFFILLER2(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTrnnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTrnnamel(0);
        }
    }

    public String getTrnnamec() {
        return getCotrn2ai().getOFFILLER3().substring(0, 1);
    }

    public void setTrnnamec(String source) {
        getCotrn2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER3(),
                                source, 0, 1));
    }

    public String getTrnnamep() {
        return getCotrn2ai().getOFFILLER3().substring(1, 2);
    }

    public void setTrnnamep(String source) {
        getCotrn2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER3(),
                                source, 1, 2));
    }

    public String getTrnnameh() {
        return getCotrn2ai().getOFFILLER3().substring(2, 3);
    }

    public void setTrnnameh(String source) {
        getCotrn2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER3(),
                                source, 2, 3));
    }

    public String getTrnnamev() {
        return getCotrn2ai().getOFFILLER3().substring(3);
    }

    public void setTrnnamev(String source) {
        getCotrn2ai()
                .setOFFILLER3(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER3(),
                                source, 3, 4));
    }

    public String getTrnnameo() {
        return getCotrn2ai().getTrnnamei();
    }

    public void setTrnnameo(String source) {
        getCotrn2ai().setTrnnamei(source);
    }

    public String getOFFILLER3() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTitle01l());
        tempByteBuffer1.flip();
        String temp2 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp2 + getCotrn2ai().getTitle01f();
    }

    public void setOFFILLER3(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTitle01l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTitle01l(0);
        }
    }

    public String getTitle01c() {
        return getCotrn2ai().getOFFILLER5().substring(0, 1);
    }

    public void setTitle01c(String source) {
        getCotrn2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER5(),
                                source, 0, 1));
    }

    public String getTitle01p() {
        return getCotrn2ai().getOFFILLER5().substring(1, 2);
    }

    public void setTitle01p(String source) {
        getCotrn2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER5(),
                                source, 1, 2));
    }

    public String getTitle01h() {
        return getCotrn2ai().getOFFILLER5().substring(2, 3);
    }

    public void setTitle01h(String source) {
        getCotrn2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER5(),
                                source, 2, 3));
    }

    public String getTitle01v() {
        return getCotrn2ai().getOFFILLER5().substring(3);
    }

    public void setTitle01v(String source) {
        getCotrn2ai()
                .setOFFILLER5(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER5(),
                                source, 3, 4));
    }

    public String getTitle01o() {
        return getCotrn2ai().getTitle01i();
    }

    public void setTitle01o(String source) {
        getCotrn2ai().setTitle01i(source);
    }

    public String getOFFILLER4() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getCurdatel());
        tempByteBuffer1.flip();
        String temp3 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp3 + getCotrn2ai().getCurdatef();
    }

    public void setOFFILLER4(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setCurdatel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setCurdatel(0);
        }
    }

    public String getCurdatec() {
        return getCotrn2ai().getOFFILLER7().substring(0, 1);
    }

    public void setCurdatec(String source) {
        getCotrn2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER7(),
                                source, 0, 1));
    }

    public String getCurdatep() {
        return getCotrn2ai().getOFFILLER7().substring(1, 2);
    }

    public void setCurdatep(String source) {
        getCotrn2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER7(),
                                source, 1, 2));
    }

    public String getCurdateh() {
        return getCotrn2ai().getOFFILLER7().substring(2, 3);
    }

    public void setCurdateh(String source) {
        getCotrn2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER7(),
                                source, 2, 3));
    }

    public String getCurdatev() {
        return getCotrn2ai().getOFFILLER7().substring(3);
    }

    public void setCurdatev(String source) {
        getCotrn2ai()
                .setOFFILLER7(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER7(),
                                source, 3, 4));
    }

    public String getCurdateo() {
        return getCotrn2ai().getCurdatei();
    }

    public void setCurdateo(String source) {
        getCotrn2ai().setCurdatei(source);
    }

    public String getOFFILLER5() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getPgmnamel());
        tempByteBuffer1.flip();
        String temp4 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp4 + getCotrn2ai().getPgmnamef();
    }

    public void setOFFILLER5(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setPgmnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setPgmnamel(0);
        }
    }

    public String getPgmnamec() {
        return getCotrn2ai().getOFFILLER9().substring(0, 1);
    }

    public void setPgmnamec(String source) {
        getCotrn2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER9(),
                                source, 0, 1));
    }

    public String getPgmnamep() {
        return getCotrn2ai().getOFFILLER9().substring(1, 2);
    }

    public void setPgmnamep(String source) {
        getCotrn2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER9(),
                                source, 1, 2));
    }

    public String getPgmnameh() {
        return getCotrn2ai().getOFFILLER9().substring(2, 3);
    }

    public void setPgmnameh(String source) {
        getCotrn2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER9(),
                                source, 2, 3));
    }

    public String getPgmnamev() {
        return getCotrn2ai().getOFFILLER9().substring(3);
    }

    public void setPgmnamev(String source) {
        getCotrn2ai()
                .setOFFILLER9(
                        StringUtils.overlay(getCotrn2ai().getOFFILLER9(),
                                source, 3, 4));
    }

    public String getPgmnameo() {
        return getCotrn2ai().getPgmnamei();
    }

    public void setPgmnameo(String source) {
        getCotrn2ai().setPgmnamei(source);
    }

    public String getOFFILLER6() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTitle02l());
        tempByteBuffer1.flip();
        String temp5 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp5 + getCotrn2ai().getTitle02f();
    }

    public void setOFFILLER6(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTitle02l(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTitle02l(0);
        }
    }

    public String getTitle02c() {
        return getCotrn2ai().getOFFILLER11().substring(0, 1);
    }

    public void setTitle02c(String source) {
        getCotrn2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER11(), source, 0, 1));
    }

    public String getTitle02p() {
        return getCotrn2ai().getOFFILLER11().substring(1, 2);
    }

    public void setTitle02p(String source) {
        getCotrn2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER11(), source, 1, 2));
    }

    public String getTitle02h() {
        return getCotrn2ai().getOFFILLER11().substring(2, 3);
    }

    public void setTitle02h(String source) {
        getCotrn2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER11(), source, 2, 3));
    }

    public String getTitle02v() {
        return getCotrn2ai().getOFFILLER11().substring(3);
    }

    public void setTitle02v(String source) {
        getCotrn2ai().setOFFILLER11(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER11(), source, 3, 4));
    }

    public String getTitle02o() {
        return getCotrn2ai().getTitle02i();
    }

    public void setTitle02o(String source) {
        getCotrn2ai().setTitle02i(source);
    }

    public String getOFFILLER7() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getCurtimel());
        tempByteBuffer1.flip();
        String temp6 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp6 + getCotrn2ai().getCurtimef();
    }

    public void setOFFILLER7(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setCurtimel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setCurtimel(0);
        }
    }

    public String getCurtimec() {
        return getCotrn2ai().getOFFILLER13().substring(0, 1);
    }

    public void setCurtimec(String source) {
        getCotrn2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER13(), source, 0, 1));
    }

    public String getCurtimep() {
        return getCotrn2ai().getOFFILLER13().substring(1, 2);
    }

    public void setCurtimep(String source) {
        getCotrn2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER13(), source, 1, 2));
    }

    public String getCurtimeh() {
        return getCotrn2ai().getOFFILLER13().substring(2, 3);
    }

    public void setCurtimeh(String source) {
        getCotrn2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER13(), source, 2, 3));
    }

    public String getCurtimev() {
        return getCotrn2ai().getOFFILLER13().substring(3);
    }

    public void setCurtimev(String source) {
        getCotrn2ai().setOFFILLER13(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER13(), source, 3, 4));
    }

    public String getCurtimeo() {
        return getCotrn2ai().getCurtimei();
    }

    public void setCurtimeo(String source) {
        getCotrn2ai().setCurtimei(source);
    }

    public String getOFFILLER8() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getActidinl());
        tempByteBuffer1.flip();
        String temp7 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp7 + getCotrn2ai().getActidinf();
    }

    public void setOFFILLER8(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setActidinl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setActidinl(0);
        }
    }

    public String getActidinc() {
        return getCotrn2ai().getOFFILLER15().substring(0, 1);
    }

    public void setActidinc(String source) {
        getCotrn2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER15(), source, 0, 1));
    }

    public String getActidinp() {
        return getCotrn2ai().getOFFILLER15().substring(1, 2);
    }

    public void setActidinp(String source) {
        getCotrn2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER15(), source, 1, 2));
    }

    public String getActidinh() {
        return getCotrn2ai().getOFFILLER15().substring(2, 3);
    }

    public void setActidinh(String source) {
        getCotrn2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER15(), source, 2, 3));
    }

    public String getActidinv() {
        return getCotrn2ai().getOFFILLER15().substring(3);
    }

    public void setActidinv(String source) {
        getCotrn2ai().setOFFILLER15(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER15(), source, 3, 4));
    }

    public String getActidino() {
        return getCotrn2ai().getActidini();
    }

    public void setActidino(String source) {
        getCotrn2ai().setActidini(source);
    }

    public String getOFFILLER9() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getCardninl());
        tempByteBuffer1.flip();
        String temp8 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp8 + getCotrn2ai().getCardninf();
    }

    public void setOFFILLER9(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setCardninl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setCardninl(0);
        }
    }

    public String getCardninc() {
        return getCotrn2ai().getOFFILLER17().substring(0, 1);
    }

    public void setCardninc(String source) {
        getCotrn2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER17(), source, 0, 1));
    }

    public String getCardninp() {
        return getCotrn2ai().getOFFILLER17().substring(1, 2);
    }

    public void setCardninp(String source) {
        getCotrn2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER17(), source, 1, 2));
    }

    public String getCardninh() {
        return getCotrn2ai().getOFFILLER17().substring(2, 3);
    }

    public void setCardninh(String source) {
        getCotrn2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER17(), source, 2, 3));
    }

    public String getCardninv() {
        return getCotrn2ai().getOFFILLER17().substring(3);
    }

    public void setCardninv(String source) {
        getCotrn2ai().setOFFILLER17(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER17(), source, 3, 4));
    }

    public String getCardnino() {
        return getCotrn2ai().getCardnini();
    }

    public void setCardnino(String source) {
        getCotrn2ai().setCardnini(source);
    }

    public String getOFFILLER10() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTtypcdl());
        tempByteBuffer1.flip();
        String temp9 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp9 + getCotrn2ai().getTtypcdf();
    }

    public void setOFFILLER10(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTtypcdl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTtypcdl(0);
        }
    }

    public String getTtypcdc() {
        return getCotrn2ai().getOFFILLER19().substring(0, 1);
    }

    public void setTtypcdc(String source) {
        getCotrn2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER19(), source, 0, 1));
    }

    public String getTtypcdp() {
        return getCotrn2ai().getOFFILLER19().substring(1, 2);
    }

    public void setTtypcdp(String source) {
        getCotrn2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER19(), source, 1, 2));
    }

    public String getTtypcdh() {
        return getCotrn2ai().getOFFILLER19().substring(2, 3);
    }

    public void setTtypcdh(String source) {
        getCotrn2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER19(), source, 2, 3));
    }

    public String getTtypcdv() {
        return getCotrn2ai().getOFFILLER19().substring(3);
    }

    public void setTtypcdv(String source) {
        getCotrn2ai().setOFFILLER19(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER19(), source, 3, 4));
    }

    public String getTtypcdo() {
        return getCotrn2ai().getTtypcdi();
    }

    public void setTtypcdo(String source) {
        getCotrn2ai().setTtypcdi(source);
    }

    public String getOFFILLER11() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTcatcdl());
        tempByteBuffer1.flip();
        String temp10 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp10 + getCotrn2ai().getTcatcdf();
    }

    public void setOFFILLER11(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTcatcdl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTcatcdl(0);
        }
    }

    public String getTcatcdc() {
        return getCotrn2ai().getOFFILLER21().substring(0, 1);
    }

    public void setTcatcdc(String source) {
        getCotrn2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER21(), source, 0, 1));
    }

    public String getTcatcdp() {
        return getCotrn2ai().getOFFILLER21().substring(1, 2);
    }

    public void setTcatcdp(String source) {
        getCotrn2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER21(), source, 1, 2));
    }

    public String getTcatcdh() {
        return getCotrn2ai().getOFFILLER21().substring(2, 3);
    }

    public void setTcatcdh(String source) {
        getCotrn2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER21(), source, 2, 3));
    }

    public String getTcatcdv() {
        return getCotrn2ai().getOFFILLER21().substring(3);
    }

    public void setTcatcdv(String source) {
        getCotrn2ai().setOFFILLER21(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER21(), source, 3, 4));
    }

    public String getTcatcdo() {
        return getCotrn2ai().getTcatcdi();
    }

    public void setTcatcdo(String source) {
        getCotrn2ai().setTcatcdi(source);
    }

    public String getOFFILLER12() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTrnsrcl());
        tempByteBuffer1.flip();
        String temp11 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp11 + getCotrn2ai().getTrnsrcf();
    }

    public void setOFFILLER12(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTrnsrcl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTrnsrcl(0);
        }
    }

    public String getTrnsrcc() {
        return getCotrn2ai().getOFFILLER23().substring(0, 1);
    }

    public void setTrnsrcc(String source) {
        getCotrn2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER23(), source, 0, 1));
    }

    public String getTrnsrcp() {
        return getCotrn2ai().getOFFILLER23().substring(1, 2);
    }

    public void setTrnsrcp(String source) {
        getCotrn2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER23(), source, 1, 2));
    }

    public String getTrnsrch() {
        return getCotrn2ai().getOFFILLER23().substring(2, 3);
    }

    public void setTrnsrch(String source) {
        getCotrn2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER23(), source, 2, 3));
    }

    public String getTrnsrcv() {
        return getCotrn2ai().getOFFILLER23().substring(3);
    }

    public void setTrnsrcv(String source) {
        getCotrn2ai().setOFFILLER23(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER23(), source, 3, 4));
    }

    public String getTrnsrco() {
        return getCotrn2ai().getTrnsrci();
    }

    public void setTrnsrco(String source) {
        getCotrn2ai().setTrnsrci(source);
    }

    public String getOFFILLER13() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTdescl());
        tempByteBuffer1.flip();
        String temp12 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp12 + getCotrn2ai().getTdescf();
    }

    public void setOFFILLER13(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTdescl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTdescl(0);
        }
    }

    public String getTdescc() {
        return getCotrn2ai().getOFFILLER25().substring(0, 1);
    }

    public void setTdescc(String source) {
        getCotrn2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER25(), source, 0, 1));
    }

    public String getTdescp() {
        return getCotrn2ai().getOFFILLER25().substring(1, 2);
    }

    public void setTdescp(String source) {
        getCotrn2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER25(), source, 1, 2));
    }

    public String getTdesch() {
        return getCotrn2ai().getOFFILLER25().substring(2, 3);
    }

    public void setTdesch(String source) {
        getCotrn2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER25(), source, 2, 3));
    }

    public String getTdescv() {
        return getCotrn2ai().getOFFILLER25().substring(3);
    }

    public void setTdescv(String source) {
        getCotrn2ai().setOFFILLER25(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER25(), source, 3, 4));
    }

    public String getTdesco() {
        return getCotrn2ai().getTdesci();
    }

    public void setTdesco(String source) {
        getCotrn2ai().setTdesci(source);
    }

    public String getOFFILLER14() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTrnamtl());
        tempByteBuffer1.flip();
        String temp13 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp13 + getCotrn2ai().getTrnamtf();
    }

    public void setOFFILLER14(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTrnamtl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTrnamtl(0);
        }
    }

    public String getTrnamtc() {
        return getCotrn2ai().getOFFILLER27().substring(0, 1);
    }

    public void setTrnamtc(String source) {
        getCotrn2ai().setOFFILLER27(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER27(), source, 0, 1));
    }

    public String getTrnamtp() {
        return getCotrn2ai().getOFFILLER27().substring(1, 2);
    }

    public void setTrnamtp(String source) {
        getCotrn2ai().setOFFILLER27(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER27(), source, 1, 2));
    }

    public String getTrnamth() {
        return getCotrn2ai().getOFFILLER27().substring(2, 3);
    }

    public void setTrnamth(String source) {
        getCotrn2ai().setOFFILLER27(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER27(), source, 2, 3));
    }

    public String getTrnamtv() {
        return getCotrn2ai().getOFFILLER27().substring(3);
    }

    public void setTrnamtv(String source) {
        getCotrn2ai().setOFFILLER27(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER27(), source, 3, 4));
    }

    public String getTrnamto() {
        return getCotrn2ai().getTrnamti();
    }

    public void setTrnamto(String source) {
        getCotrn2ai().setTrnamti(source);
    }

    public String getOFFILLER15() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTorigdtl());
        tempByteBuffer1.flip();
        String temp14 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp14 + getCotrn2ai().getTorigdtf();
    }

    public void setOFFILLER15(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTorigdtl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTorigdtl(0);
        }
    }

    public String getTorigdtc() {
        return getCotrn2ai().getOFFILLER29().substring(0, 1);
    }

    public void setTorigdtc(String source) {
        getCotrn2ai().setOFFILLER29(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER29(), source, 0, 1));
    }

    public String getTorigdtp() {
        return getCotrn2ai().getOFFILLER29().substring(1, 2);
    }

    public void setTorigdtp(String source) {
        getCotrn2ai().setOFFILLER29(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER29(), source, 1, 2));
    }

    public String getTorigdth() {
        return getCotrn2ai().getOFFILLER29().substring(2, 3);
    }

    public void setTorigdth(String source) {
        getCotrn2ai().setOFFILLER29(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER29(), source, 2, 3));
    }

    public String getTorigdtv() {
        return getCotrn2ai().getOFFILLER29().substring(3);
    }

    public void setTorigdtv(String source) {
        getCotrn2ai().setOFFILLER29(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER29(), source, 3, 4));
    }

    public String getTorigdto() {
        return getCotrn2ai().getTorigdti();
    }

    public void setTorigdto(String source) {
        getCotrn2ai().setTorigdti(source);
    }

    public String getOFFILLER16() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getTprocdtl());
        tempByteBuffer1.flip();
        String temp15 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp15 + getCotrn2ai().getTprocdtf();
    }

    public void setOFFILLER16(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setTprocdtl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setTprocdtl(0);
        }
    }

    public String getTprocdtc() {
        return getCotrn2ai().getOFFILLER31().substring(0, 1);
    }

    public void setTprocdtc(String source) {
        getCotrn2ai().setOFFILLER31(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER31(), source, 0, 1));
    }

    public String getTprocdtp() {
        return getCotrn2ai().getOFFILLER31().substring(1, 2);
    }

    public void setTprocdtp(String source) {
        getCotrn2ai().setOFFILLER31(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER31(), source, 1, 2));
    }

    public String getTprocdth() {
        return getCotrn2ai().getOFFILLER31().substring(2, 3);
    }

    public void setTprocdth(String source) {
        getCotrn2ai().setOFFILLER31(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER31(), source, 2, 3));
    }

    public String getTprocdtv() {
        return getCotrn2ai().getOFFILLER31().substring(3);
    }

    public void setTprocdtv(String source) {
        getCotrn2ai().setOFFILLER31(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER31(), source, 3, 4));
    }

    public String getTprocdto() {
        return getCotrn2ai().getTprocdti();
    }

    public void setTprocdto(String source) {
        getCotrn2ai().setTprocdti(source);
    }

    public String getOFFILLER17() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getMidl());
        tempByteBuffer1.flip();
        String temp16 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp16 + getCotrn2ai().getMidf();
    }

    public void setOFFILLER17(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setMidl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setMidl(0);
        }
    }

    public String getMidc() {
        return getCotrn2ai().getOFFILLER33().substring(0, 1);
    }

    public void setMidc(String source) {
        getCotrn2ai().setOFFILLER33(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER33(), source, 0, 1));
    }

    public String getMidp() {
        return getCotrn2ai().getOFFILLER33().substring(1, 2);
    }

    public void setMidp(String source) {
        getCotrn2ai().setOFFILLER33(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER33(), source, 1, 2));
    }

    public String getMidh() {
        return getCotrn2ai().getOFFILLER33().substring(2, 3);
    }

    public void setMidh(String source) {
        getCotrn2ai().setOFFILLER33(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER33(), source, 2, 3));
    }

    public String getMidv() {
        return getCotrn2ai().getOFFILLER33().substring(3);
    }

    public void setMidv(String source) {
        getCotrn2ai().setOFFILLER33(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER33(), source, 3, 4));
    }

    public String getMido() {
        return getCotrn2ai().getMidi();
    }

    public void setMido(String source) {
        getCotrn2ai().setMidi(source);
    }

    public String getOFFILLER18() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getMnamel());
        tempByteBuffer1.flip();
        String temp17 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp17 + getCotrn2ai().getMnamef();
    }

    public void setOFFILLER18(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setMnamel(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setMnamel(0);
        }
    }

    public String getMnamec() {
        return getCotrn2ai().getOFFILLER35().substring(0, 1);
    }

    public void setMnamec(String source) {
        getCotrn2ai().setOFFILLER35(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER35(), source, 0, 1));
    }

    public String getMnamep() {
        return getCotrn2ai().getOFFILLER35().substring(1, 2);
    }

    public void setMnamep(String source) {
        getCotrn2ai().setOFFILLER35(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER35(), source, 1, 2));
    }

    public String getMnameh() {
        return getCotrn2ai().getOFFILLER35().substring(2, 3);
    }

    public void setMnameh(String source) {
        getCotrn2ai().setOFFILLER35(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER35(), source, 2, 3));
    }

    public String getMnamev() {
        return getCotrn2ai().getOFFILLER35().substring(3);
    }

    public void setMnamev(String source) {
        getCotrn2ai().setOFFILLER35(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER35(), source, 3, 4));
    }

    public String getMnameo() {
        return getCotrn2ai().getMnamei();
    }

    public void setMnameo(String source) {
        getCotrn2ai().setMnamei(source);
    }

    public String getOFFILLER19() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getMcityl());
        tempByteBuffer1.flip();
        String temp18 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp18 + getCotrn2ai().getMcityf();
    }

    public void setOFFILLER19(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setMcityl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setMcityl(0);
        }
    }

    public String getMcityc() {
        return getCotrn2ai().getOFFILLER37().substring(0, 1);
    }

    public void setMcityc(String source) {
        getCotrn2ai().setOFFILLER37(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER37(), source, 0, 1));
    }

    public String getMcityp() {
        return getCotrn2ai().getOFFILLER37().substring(1, 2);
    }

    public void setMcityp(String source) {
        getCotrn2ai().setOFFILLER37(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER37(), source, 1, 2));
    }

    public String getMcityh() {
        return getCotrn2ai().getOFFILLER37().substring(2, 3);
    }

    public void setMcityh(String source) {
        getCotrn2ai().setOFFILLER37(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER37(), source, 2, 3));
    }

    public String getMcityv() {
        return getCotrn2ai().getOFFILLER37().substring(3);
    }

    public void setMcityv(String source) {
        getCotrn2ai().setOFFILLER37(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER37(), source, 3, 4));
    }

    public String getMcityo() {
        return getCotrn2ai().getMcityi();
    }

    public void setMcityo(String source) {
        getCotrn2ai().setMcityi(source);
    }

    public String getOFFILLER20() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getMzipl());
        tempByteBuffer1.flip();
        String temp19 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp19 + getCotrn2ai().getMzipf();
    }

    public void setOFFILLER20(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setMzipl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setMzipl(0);
        }
    }

    public String getMzipc() {
        return getCotrn2ai().getOFFILLER39().substring(0, 1);
    }

    public void setMzipc(String source) {
        getCotrn2ai().setOFFILLER39(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER39(), source, 0, 1));
    }

    public String getMzipp() {
        return getCotrn2ai().getOFFILLER39().substring(1, 2);
    }

    public void setMzipp(String source) {
        getCotrn2ai().setOFFILLER39(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER39(), source, 1, 2));
    }

    public String getMziph() {
        return getCotrn2ai().getOFFILLER39().substring(2, 3);
    }

    public void setMziph(String source) {
        getCotrn2ai().setOFFILLER39(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER39(), source, 2, 3));
    }

    public String getMzipv() {
        return getCotrn2ai().getOFFILLER39().substring(3);
    }

    public void setMzipv(String source) {
        getCotrn2ai().setOFFILLER39(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER39(), source, 3, 4));
    }

    public String getMzipo() {
        return getCotrn2ai().getMzipi();
    }

    public void setMzipo(String source) {
        getCotrn2ai().setMzipi(source);
    }

    public String getOFFILLER21() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getConfirml());
        tempByteBuffer1.flip();
        String temp20 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp20 + getCotrn2ai().getConfirmf();
    }

    public void setOFFILLER21(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setConfirml(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setConfirml(0);
        }
    }

    public String getConfirmc() {
        return getCotrn2ai().getOFFILLER41().substring(0, 1);
    }

    public void setConfirmc(String source) {
        getCotrn2ai().setOFFILLER41(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER41(), source, 0, 1));
    }

    public String getConfirmp() {
        return getCotrn2ai().getOFFILLER41().substring(1, 2);
    }

    public void setConfirmp(String source) {
        getCotrn2ai().setOFFILLER41(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER41(), source, 1, 2));
    }

    public String getConfirmh() {
        return getCotrn2ai().getOFFILLER41().substring(2, 3);
    }

    public void setConfirmh(String source) {
        getCotrn2ai().setOFFILLER41(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER41(), source, 2, 3));
    }

    public String getConfirmv() {
        return getCotrn2ai().getOFFILLER41().substring(3);
    }

    public void setConfirmv(String source) {
        getCotrn2ai().setOFFILLER41(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER41(), source, 3, 4));
    }

    public String getConfirmo() {
        return getCotrn2ai().getConfirmi();
    }

    public void setConfirmo(String source) {
        getCotrn2ai().setConfirmi(source);
    }

    public String getOFFILLER22() {
        ByteBuffer tempByteBuffer1;
        tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
        tempByteBuffer1.putShort((short) getCotrn2ai().getErrmsgl());
        tempByteBuffer1.flip();
        String temp21 = StandardCharsets.ISO_8859_1.decode(tempByteBuffer1)
                .toString();
        return temp21 + getCotrn2ai().getErrmsgf();
    }

    public void setOFFILLER22(String source) {
        ByteBuffer tempByteBuffer1;
        try {
            tempByteBuffer1 = ByteBuffer.allocate(Short.BYTES);
            tempByteBuffer1.put(source.substring(0, 2).getBytes(
                    StandardCharsets.ISO_8859_1));
            tempByteBuffer1.flip();
            getCotrn2ai().setErrmsgl(tempByteBuffer1.getShort());
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            getCotrn2ai().setErrmsgl(0);
        }
    }

    public String getErrmsgc() {
        return getCotrn2ai().getOFFILLER43().substring(0, 1);
    }

    public void setErrmsgc(String source) {
        getCotrn2ai().setOFFILLER43(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER43(), source, 0, 1));
    }

    public String getErrmsgp() {
        return getCotrn2ai().getOFFILLER43().substring(1, 2);
    }

    public void setErrmsgp(String source) {
        getCotrn2ai().setOFFILLER43(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER43(), source, 1, 2));
    }

    public String getErrmsgh() {
        return getCotrn2ai().getOFFILLER43().substring(2, 3);
    }

    public void setErrmsgh(String source) {
        getCotrn2ai().setOFFILLER43(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER43(), source, 2, 3));
    }

    public String getErrmsgv() {
        return getCotrn2ai().getOFFILLER43().substring(3);
    }

    public void setErrmsgv(String source) {
        getCotrn2ai().setOFFILLER43(
                StringUtils
                        .overlay(getCotrn2ai().getOFFILLER43(), source, 3, 4));
    }

    public String getErrmsgo() {
        return getCotrn2ai().getErrmsgi();
    }

    public void setErrmsgo(String source) {
        getCotrn2ai().setErrmsgi(source);
    }

    //       *COPY COTTL01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/COTTL01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][COTTL01Y.cpy, LINE #18] CCDA-SCREEN-TITLE (level: 1)
    private @Getter @Setter Cotrn02cCcdaScreenTitle ccdaScreenTitle = new Cotrn02cCcdaScreenTitle();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSDAT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSDAT01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSDAT01Y.cpy, LINE #18] WS-DATE-TIME (level: 1)
    private @Getter @Setter Cotrn02cWsDateTime wsDateTime = new Cotrn02cWsDateTime();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CSMSG01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CSMSG01Y.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.                   
    // * All Rights Reserved.                                            
    // *                                                                 
    // * Licensed under the Apache License, Version 2.0 (the "License"). 
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at                         
    // *                                                                 
    // *    http://www.apache.org/licenses/LICENSE-2.0                   
    // *                                                                 
    // * Unless required by applicable law or agreed to in writing,      
    // * software distributed under the License is distributed on an     
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    
    // * either express or implied. See the License for the specific     
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // [T-Up#INFO][CSMSG01Y.cpy, LINE #18] CCDA-COMMON-MESSAGES (level: 1)
    private @Getter @Setter Cotrn02cCcdaCommonMessages ccdaCommonMessages = new Cotrn02cCcdaCommonMessages();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT 
    // *                                                                 
    //       *COPY CVTRA05Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVTRA05Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for TRANsaction record (RECLN = 350)          
    // ***************************************************************** 
    // [T-Up#INFO][CVTRA05Y.cpy, LINE #5] TRAN-RECORD (level: 1)
    private @Getter @Setter Cotrn02cTranRecord tranRecord = new Cotrn02cTranRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT 
    // *                                                                 
    //       *COPY CVACT01Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT01Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for  account entity (RECLN 300)               
    // ***************************************************************** 
    // [T-Up#INFO][CVACT01Y.cpy, LINE #5] ACCOUNT-RECORD (level: 1)
    private @Getter @Setter Cotrn02cAccountRecord accountRecord = new Cotrn02cAccountRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT 
    // *                                                                 
    //       *COPY CVACT03Y.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/CARDDEMO/CVACT03Y.cpy)
    // ***************************************************************** 
    // *    Data-structure for card xref (RECLN 50)                      
    // ***************************************************************** 
    // [T-Up#INFO][CVACT03Y.cpy, LINE #5] CARD-XREF-RECORD (level: 1)
    private @Getter @Setter Cotrn02cCardXrefRecord cardXrefRecord = new Cotrn02cCardXrefRecord();
    // *                                                                 
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT 
    // *                                                                 
    //       *COPY DFHAID.                                                     
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHAID.cpy)  
    // [T-Up#INFO][DFHAID.cpy, LINE #2] DFHAID (level: 1)
    private @Getter @Setter Cotrn02cDfhaid dfhaid = new Cotrn02cDfhaid();
    //       *COPY DFHBMSCA.                                                   
    // *(/home/oflab/repository/ref/COBOL_COPYBOOK/.default/DFHBMSCA.cpy)
    // [T-Up#INFO][DFHBMSCA.cpy, LINE #2] DFHBMSCA (level: 1)
    private @Getter @Setter Cotrn02cDfhbmsca dfhbmsca = new Cotrn02cDfhbmsca();
    // *----------------------------------------------------------------*
    // *                        LINKAGE SECTION                          
    // *----------------------------------------------------------------*
    // [T-Up#INFO][COTRN02C.cbl, LINE #99] DFHCOMMAREA (level: 1)
    private @Getter @Setter Cotrn02cDfhcommarea dfhcommarea = new Cotrn02cDfhcommarea();

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class Cotrn02cCotrn2ao {
        // [T-Up#INFO][COTRN02.CPY, LINE #147] FILLER (level: 2)
        private @Getter String OFFILLER1 = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COTRN02.CPY, LINE #148] FILLER (level: 2)
        private @Getter String OFFILLER2 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #149] TRNNAMEC (level: 2)
        private @Getter String trnnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #150] TRNNAMEP (level: 2)
        private @Getter String trnnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #151] TRNNAMEH (level: 2)
        private @Getter String trnnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #152] TRNNAMEV (level: 2)
        private @Getter String trnnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #153] TRNNAMEO (level: 2)
        private @Getter String trnnameo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COTRN02.CPY, LINE #154] FILLER (level: 2)
        private @Getter String OFFILLER3 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #155] TITLE01C (level: 2)
        private @Getter String title01c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #156] TITLE01P (level: 2)
        private @Getter String title01p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #157] TITLE01H (level: 2)
        private @Getter String title01h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #158] TITLE01V (level: 2)
        private @Getter String title01v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #159] TITLE01O (level: 2)
        private @Getter String title01o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COTRN02.CPY, LINE #160] FILLER (level: 2)
        private @Getter String OFFILLER4 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #161] CURDATEC (level: 2)
        private @Getter String curdatec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #162] CURDATEP (level: 2)
        private @Getter String curdatep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #163] CURDATEH (level: 2)
        private @Getter String curdateh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #164] CURDATEV (level: 2)
        private @Getter String curdatev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #165] CURDATEO (level: 2)
        private @Getter String curdateo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COTRN02.CPY, LINE #166] FILLER (level: 2)
        private @Getter String OFFILLER5 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #167] PGMNAMEC (level: 2)
        private @Getter String pgmnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #168] PGMNAMEP (level: 2)
        private @Getter String pgmnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #169] PGMNAMEH (level: 2)
        private @Getter String pgmnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #170] PGMNAMEV (level: 2)
        private @Getter String pgmnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #171] PGMNAMEO (level: 2)
        private @Getter String pgmnameo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COTRN02.CPY, LINE #172] FILLER (level: 2)
        private @Getter String OFFILLER6 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #173] TITLE02C (level: 2)
        private @Getter String title02c = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #174] TITLE02P (level: 2)
        private @Getter String title02p = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #175] TITLE02H (level: 2)
        private @Getter String title02h = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #176] TITLE02V (level: 2)
        private @Getter String title02v = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #177] TITLE02O (level: 2)
        private @Getter String title02o = StringUtils.repeat(' ', 40);
        // [T-Up#INFO][COTRN02.CPY, LINE #178] FILLER (level: 2)
        private @Getter String OFFILLER7 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #179] CURTIMEC (level: 2)
        private @Getter String curtimec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #180] CURTIMEP (level: 2)
        private @Getter String curtimep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #181] CURTIMEH (level: 2)
        private @Getter String curtimeh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #182] CURTIMEV (level: 2)
        private @Getter String curtimev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #183] CURTIMEO (level: 2)
        private @Getter String curtimeo = StringUtils.repeat(' ', 8);
        // [T-Up#INFO][COTRN02.CPY, LINE #184] FILLER (level: 2)
        private @Getter String OFFILLER8 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #185] ACTIDINC (level: 2)
        private @Getter String actidinc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #186] ACTIDINP (level: 2)
        private @Getter String actidinp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #187] ACTIDINH (level: 2)
        private @Getter String actidinh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #188] ACTIDINV (level: 2)
        private @Getter String actidinv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #189] ACTIDINO (level: 2)
        private @Getter String actidino = StringUtils.repeat(' ', 11);
        // [T-Up#INFO][COTRN02.CPY, LINE #190] FILLER (level: 2)
        private @Getter String OFFILLER9 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #191] CARDNINC (level: 2)
        private @Getter String cardninc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #192] CARDNINP (level: 2)
        private @Getter String cardninp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #193] CARDNINH (level: 2)
        private @Getter String cardninh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #194] CARDNINV (level: 2)
        private @Getter String cardninv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #195] CARDNINO (level: 2)
        private @Getter String cardnino = StringUtils.repeat(' ', 16);
        // [T-Up#INFO][COTRN02.CPY, LINE #196] FILLER (level: 2)
        private @Getter String OFFILLER10 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #197] TTYPCDC (level: 2)
        private @Getter String ttypcdc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #198] TTYPCDP (level: 2)
        private @Getter String ttypcdp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #199] TTYPCDH (level: 2)
        private @Getter String ttypcdh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #200] TTYPCDV (level: 2)
        private @Getter String ttypcdv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #201] TTYPCDO (level: 2)
        private @Getter String ttypcdo = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][COTRN02.CPY, LINE #202] FILLER (level: 2)
        private @Getter String OFFILLER11 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #203] TCATCDC (level: 2)
        private @Getter String tcatcdc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #204] TCATCDP (level: 2)
        private @Getter String tcatcdp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #205] TCATCDH (level: 2)
        private @Getter String tcatcdh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #206] TCATCDV (level: 2)
        private @Getter String tcatcdv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #207] TCATCDO (level: 2)
        private @Getter String tcatcdo = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][COTRN02.CPY, LINE #208] FILLER (level: 2)
        private @Getter String OFFILLER12 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #209] TRNSRCC (level: 2)
        private @Getter String trnsrcc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #210] TRNSRCP (level: 2)
        private @Getter String trnsrcp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #211] TRNSRCH (level: 2)
        private @Getter String trnsrch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #212] TRNSRCV (level: 2)
        private @Getter String trnsrcv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #213] TRNSRCO (level: 2)
        private @Getter String trnsrco = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COTRN02.CPY, LINE #214] FILLER (level: 2)
        private @Getter String OFFILLER13 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #215] TDESCC (level: 2)
        private @Getter String tdescc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #216] TDESCP (level: 2)
        private @Getter String tdescp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #217] TDESCH (level: 2)
        private @Getter String tdesch = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #218] TDESCV (level: 2)
        private @Getter String tdescv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #219] TDESCO (level: 2)
        private @Getter String tdesco = StringUtils.repeat(' ', 60);
        // [T-Up#INFO][COTRN02.CPY, LINE #220] FILLER (level: 2)
        private @Getter String OFFILLER14 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #221] TRNAMTC (level: 2)
        private @Getter String trnamtc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #222] TRNAMTP (level: 2)
        private @Getter String trnamtp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #223] TRNAMTH (level: 2)
        private @Getter String trnamth = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #224] TRNAMTV (level: 2)
        private @Getter String trnamtv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #225] TRNAMTO (level: 2)
        private @Getter String trnamto = StringUtils.repeat(' ', 12);
        // [T-Up#INFO][COTRN02.CPY, LINE #226] FILLER (level: 2)
        private @Getter String OFFILLER15 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #227] TORIGDTC (level: 2)
        private @Getter String torigdtc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #228] TORIGDTP (level: 2)
        private @Getter String torigdtp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #229] TORIGDTH (level: 2)
        private @Getter String torigdth = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #230] TORIGDTV (level: 2)
        private @Getter String torigdtv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #231] TORIGDTO (level: 2)
        private @Getter String torigdto = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COTRN02.CPY, LINE #232] FILLER (level: 2)
        private @Getter String OFFILLER16 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #233] TPROCDTC (level: 2)
        private @Getter String tprocdtc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #234] TPROCDTP (level: 2)
        private @Getter String tprocdtp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #235] TPROCDTH (level: 2)
        private @Getter String tprocdth = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #236] TPROCDTV (level: 2)
        private @Getter String tprocdtv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #237] TPROCDTO (level: 2)
        private @Getter String tprocdto = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COTRN02.CPY, LINE #238] FILLER (level: 2)
        private @Getter String OFFILLER17 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #239] MIDC (level: 2)
        private @Getter String midc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #240] MIDP (level: 2)
        private @Getter String midp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #241] MIDH (level: 2)
        private @Getter String midh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #242] MIDV (level: 2)
        private @Getter String midv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #243] MIDO (level: 2)
        private @Getter String mido = StringUtils.repeat(' ', 9);
        // [T-Up#INFO][COTRN02.CPY, LINE #244] FILLER (level: 2)
        private @Getter String OFFILLER18 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #245] MNAMEC (level: 2)
        private @Getter String mnamec = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #246] MNAMEP (level: 2)
        private @Getter String mnamep = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #247] MNAMEH (level: 2)
        private @Getter String mnameh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #248] MNAMEV (level: 2)
        private @Getter String mnamev = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #249] MNAMEO (level: 2)
        private @Getter String mnameo = StringUtils.repeat(' ', 30);
        // [T-Up#INFO][COTRN02.CPY, LINE #250] FILLER (level: 2)
        private @Getter String OFFILLER19 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #251] MCITYC (level: 2)
        private @Getter String mcityc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #252] MCITYP (level: 2)
        private @Getter String mcityp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #253] MCITYH (level: 2)
        private @Getter String mcityh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #254] MCITYV (level: 2)
        private @Getter String mcityv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #255] MCITYO (level: 2)
        private @Getter String mcityo = StringUtils.repeat(' ', 25);
        // [T-Up#INFO][COTRN02.CPY, LINE #256] FILLER (level: 2)
        private @Getter String OFFILLER20 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #257] MZIPC (level: 2)
        private @Getter String mzipc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #258] MZIPP (level: 2)
        private @Getter String mzipp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #259] MZIPH (level: 2)
        private @Getter String mziph = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #260] MZIPV (level: 2)
        private @Getter String mzipv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #261] MZIPO (level: 2)
        private @Getter String mzipo = StringUtils.repeat(' ', 10);
        // [T-Up#INFO][COTRN02.CPY, LINE #262] FILLER (level: 2)
        private @Getter String OFFILLER21 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #263] CONFIRMC (level: 2)
        private @Getter String confirmc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #264] CONFIRMP (level: 2)
        private @Getter String confirmp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #265] CONFIRMH (level: 2)
        private @Getter String confirmh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #266] CONFIRMV (level: 2)
        private @Getter String confirmv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #267] CONFIRMO (level: 2)
        private @Getter String confirmo = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #268] FILLER (level: 2)
        private @Getter String OFFILLER22 = StringUtils.repeat(' ', 3);
        // [T-Up#INFO][COTRN02.CPY, LINE #269] ERRMSGC (level: 2)
        private @Getter String errmsgc = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #270] ERRMSGP (level: 2)
        private @Getter String errmsgp = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #271] ERRMSGH (level: 2)
        private @Getter String errmsgh = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #272] ERRMSGV (level: 2)
        private @Getter String errmsgv = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][COTRN02.CPY, LINE #273] ERRMSGO (level: 2)
        private @Getter String errmsgo = StringUtils.repeat(' ', 78);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(actidinc);
            sb.append(actidinp);
            sb.append(actidinh);
            sb.append(actidinv);
            sb.append(actidino);
            sb.append(OFFILLER9);
            sb.append(cardninc);
            sb.append(cardninp);
            sb.append(cardninh);
            sb.append(cardninv);
            sb.append(cardnino);
            sb.append(OFFILLER10);
            sb.append(ttypcdc);
            sb.append(ttypcdp);
            sb.append(ttypcdh);
            sb.append(ttypcdv);
            sb.append(ttypcdo);
            sb.append(OFFILLER11);
            sb.append(tcatcdc);
            sb.append(tcatcdp);
            sb.append(tcatcdh);
            sb.append(tcatcdv);
            sb.append(tcatcdo);
            sb.append(OFFILLER12);
            sb.append(trnsrcc);
            sb.append(trnsrcp);
            sb.append(trnsrch);
            sb.append(trnsrcv);
            sb.append(trnsrco);
            sb.append(OFFILLER13);
            sb.append(tdescc);
            sb.append(tdescp);
            sb.append(tdesch);
            sb.append(tdescv);
            sb.append(tdesco);
            sb.append(OFFILLER14);
            sb.append(trnamtc);
            sb.append(trnamtp);
            sb.append(trnamth);
            sb.append(trnamtv);
            sb.append(trnamto);
            sb.append(OFFILLER15);
            sb.append(torigdtc);
            sb.append(torigdtp);
            sb.append(torigdth);
            sb.append(torigdtv);
            sb.append(torigdto);
            sb.append(OFFILLER16);
            sb.append(tprocdtc);
            sb.append(tprocdtp);
            sb.append(tprocdth);
            sb.append(tprocdtv);
            sb.append(tprocdto);
            sb.append(OFFILLER17);
            sb.append(midc);
            sb.append(midp);
            sb.append(midh);
            sb.append(midv);
            sb.append(mido);
            sb.append(OFFILLER18);
            sb.append(mnamec);
            sb.append(mnamep);
            sb.append(mnameh);
            sb.append(mnamev);
            sb.append(mnameo);
            sb.append(OFFILLER19);
            sb.append(mcityc);
            sb.append(mcityp);
            sb.append(mcityh);
            sb.append(mcityv);
            sb.append(mcityo);
            sb.append(OFFILLER20);
            sb.append(mzipc);
            sb.append(mzipp);
            sb.append(mziph);
            sb.append(mzipv);
            sb.append(mzipo);
            sb.append(OFFILLER21);
            sb.append(confirmc);
            sb.append(confirmp);
            sb.append(confirmh);
            sb.append(confirmv);
            sb.append(confirmo);
            sb.append(OFFILLER22);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(OFFILLER1);
            sb.append(OFFILLER2);
            sb.append(trnnamec);
            sb.append(trnnamep);
            sb.append(trnnameh);
            sb.append(trnnamev);
            sb.append(trnnameo);
            sb.append(OFFILLER3);
            sb.append(title01c);
            sb.append(title01p);
            sb.append(title01h);
            sb.append(title01v);
            sb.append(title01o);
            sb.append(OFFILLER4);
            sb.append(curdatec);
            sb.append(curdatep);
            sb.append(curdateh);
            sb.append(curdatev);
            sb.append(curdateo);
            sb.append(OFFILLER5);
            sb.append(pgmnamec);
            sb.append(pgmnamep);
            sb.append(pgmnameh);
            sb.append(pgmnamev);
            sb.append(pgmnameo);
            sb.append(OFFILLER6);
            sb.append(title02c);
            sb.append(title02p);
            sb.append(title02h);
            sb.append(title02v);
            sb.append(title02o);
            sb.append(OFFILLER7);
            sb.append(curtimec);
            sb.append(curtimep);
            sb.append(curtimeh);
            sb.append(curtimev);
            sb.append(curtimeo);
            sb.append(OFFILLER8);
            sb.append(actidinc);
            sb.append(actidinp);
            sb.append(actidinh);
            sb.append(actidinv);
            sb.append(actidino);
            sb.append(OFFILLER9);
            sb.append(cardninc);
            sb.append(cardninp);
            sb.append(cardninh);
            sb.append(cardninv);
            sb.append(cardnino);
            sb.append(OFFILLER10);
            sb.append(ttypcdc);
            sb.append(ttypcdp);
            sb.append(ttypcdh);
            sb.append(ttypcdv);
            sb.append(ttypcdo);
            sb.append(OFFILLER11);
            sb.append(tcatcdc);
            sb.append(tcatcdp);
            sb.append(tcatcdh);
            sb.append(tcatcdv);
            sb.append(tcatcdo);
            sb.append(OFFILLER12);
            sb.append(trnsrcc);
            sb.append(trnsrcp);
            sb.append(trnsrch);
            sb.append(trnsrcv);
            sb.append(trnsrco);
            sb.append(OFFILLER13);
            sb.append(tdescc);
            sb.append(tdescp);
            sb.append(tdesch);
            sb.append(tdescv);
            sb.append(tdesco);
            sb.append(OFFILLER14);
            sb.append(trnamtc);
            sb.append(trnamtp);
            sb.append(trnamth);
            sb.append(trnamtv);
            sb.append(trnamto);
            sb.append(OFFILLER15);
            sb.append(torigdtc);
            sb.append(torigdtp);
            sb.append(torigdth);
            sb.append(torigdtv);
            sb.append(torigdto);
            sb.append(OFFILLER16);
            sb.append(tprocdtc);
            sb.append(tprocdtp);
            sb.append(tprocdth);
            sb.append(tprocdtv);
            sb.append(tprocdto);
            sb.append(OFFILLER17);
            sb.append(midc);
            sb.append(midp);
            sb.append(midh);
            sb.append(midv);
            sb.append(mido);
            sb.append(OFFILLER18);
            sb.append(mnamec);
            sb.append(mnamep);
            sb.append(mnameh);
            sb.append(mnamev);
            sb.append(mnameo);
            sb.append(OFFILLER19);
            sb.append(mcityc);
            sb.append(mcityp);
            sb.append(mcityh);
            sb.append(mcityv);
            sb.append(mcityo);
            sb.append(OFFILLER20);
            sb.append(mzipc);
            sb.append(mzipp);
            sb.append(mziph);
            sb.append(mzipv);
            sb.append(mzipo);
            sb.append(OFFILLER21);
            sb.append(confirmc);
            sb.append(confirmp);
            sb.append(confirmh);
            sb.append(confirmv);
            sb.append(confirmo);
            sb.append(OFFILLER22);
            sb.append(errmsgc);
            sb.append(errmsgp);
            sb.append(errmsgh);
            sb.append(errmsgv);
            sb.append(errmsgo);
            return sb.toString();
        }
    }
}
